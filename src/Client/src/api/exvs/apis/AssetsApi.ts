/* tslint:disable */
/* eslint-disable */
/**
 * BoostStudio.Web | exvs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AssetFileType,
  AssetFileVm,
  CreateAssetFileCommand,
  PaginatedListOfAssetFileVm,
  UpdateAssetFileByHashCommand,
} from '../models/index';
import {
    AssetFileTypeFromJSON,
    AssetFileTypeToJSON,
    AssetFileVmFromJSON,
    AssetFileVmToJSON,
    CreateAssetFileCommandFromJSON,
    CreateAssetFileCommandToJSON,
    PaginatedListOfAssetFileVmFromJSON,
    PaginatedListOfAssetFileVmToJSON,
    UpdateAssetFileByHashCommandFromJSON,
    UpdateAssetFileByHashCommandToJSON,
} from '../models/index';

export interface DeleteApiAssetsByHashRequest {
    hash: number;
}

export interface GetApiAssetsRequest {
    page?: number;
    perPage?: number;
    unitIds?: Array<number>;
    assetFileTypes?: Array<AssetFileType>;
}

export interface GetApiAssetsByHashRequest {
    hash: number;
}

export interface PostApiAssetsRequest {
    createAssetFileCommand: CreateAssetFileCommand;
}

export interface PostApiAssetsByHashRequest {
    hash: number;
    updateAssetFileByHashCommand: UpdateAssetFileByHashCommand;
}

export interface PostApiAssetsImportRequest {
    files: Array<Blob>;
}

/**
 * 
 */
export class AssetsApi extends runtime.BaseAPI {

    /**
     */
    async deleteApiAssetsByHashRaw(requestParameters: DeleteApiAssetsByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling deleteApiAssetsByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/assets/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteApiAssetsByHash(requestParameters: DeleteApiAssetsByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiAssetsByHashRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getApiAssetsRaw(requestParameters: GetApiAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfAssetFileVm>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['PerPage'] = requestParameters['perPage'];
        }

        if (requestParameters['unitIds'] != null) {
            queryParameters['UnitIds'] = requestParameters['unitIds'];
        }

        if (requestParameters['assetFileTypes'] != null) {
            queryParameters['AssetFileTypes'] = requestParameters['assetFileTypes'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/assets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfAssetFileVmFromJSON(jsonValue));
    }

    /**
     */
    async getApiAssets(requestParameters: GetApiAssetsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfAssetFileVm> {
        const response = await this.getApiAssetsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiAssetsByHashRaw(requestParameters: GetApiAssetsByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AssetFileVm>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling getApiAssetsByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/assets/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFileVmFromJSON(jsonValue));
    }

    /**
     */
    async getApiAssetsByHash(requestParameters: GetApiAssetsByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetFileVm> {
        const response = await this.getApiAssetsByHashRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiAssetsRaw(requestParameters: PostApiAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createAssetFileCommand'] == null) {
            throw new runtime.RequiredError(
                'createAssetFileCommand',
                'Required parameter "createAssetFileCommand" was null or undefined when calling postApiAssets().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/assets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAssetFileCommandToJSON(requestParameters['createAssetFileCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiAssets(requestParameters: PostApiAssetsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiAssetsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiAssetsByHashRaw(requestParameters: PostApiAssetsByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling postApiAssetsByHash().'
            );
        }

        if (requestParameters['updateAssetFileByHashCommand'] == null) {
            throw new runtime.RequiredError(
                'updateAssetFileByHashCommand',
                'Required parameter "updateAssetFileByHashCommand" was null or undefined when calling postApiAssetsByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/assets/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAssetFileByHashCommandToJSON(requestParameters['updateAssetFileByHashCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiAssetsByHash(requestParameters: PostApiAssetsByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiAssetsByHashRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiAssetsImportRaw(requestParameters: PostApiAssetsImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['files'] == null) {
            throw new runtime.RequiredError(
                'files',
                'Required parameter "files" was null or undefined when calling postApiAssetsImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['files'] != null) {
            requestParameters['files'].forEach((element) => {
                formParams.append('files', element as any);
            })
        }

        const response = await this.request({
            path: `/api/assets/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiAssetsImport(requestParameters: PostApiAssetsImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiAssetsImportRaw(requestParameters, initOverrides);
    }

}
