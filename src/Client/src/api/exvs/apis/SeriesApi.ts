/* tslint:disable */
/* eslint-disable */
/**
 * BoostStudio.Web | exvs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import type {
  CreateSeriesCommand,
  ExportPlayableSeriesCommand,
  GetApiAmmoHashParameterInner,
  GetApiAmmoPageParameter,
  GetApiAmmoPerPageParameter,
  PaginatedListOfSeriesDto,
  PaginatedListOfSeriesUnitsVm,
} from "../models/index";
import {
  CreateSeriesCommandToJSON,
  ExportPlayableSeriesCommandToJSON,
  PaginatedListOfSeriesDtoFromJSON,
  PaginatedListOfSeriesUnitsVmFromJSON,
} from "../models/index";

export interface GetApiSeriesRequest {
  page?: GetApiAmmoPageParameter;
  perPage?: GetApiAmmoPerPageParameter;
  search?: Array<string>;
}

export interface GetApiSeriesUnitsRequest {
    page?: GetApiAmmoPageParameter;
    perPage?: GetApiAmmoPerPageParameter;
    unitIds?: Array<GetApiAmmoHashParameterInner>;
    listAll?: boolean;
}

export interface PostApiSeriesRequest {
    createSeriesCommand: CreateSeriesCommand;
}

export interface PostApiSeriesExportRequest {
    exportPlayableSeriesCommand: ExportPlayableSeriesCommand;
}

export interface PostApiSeriesImportRequest {
    file: Blob;
}

/**
 * 
 */
export class SeriesApi extends runtime.BaseAPI {

    /**
     */
    async getApiSeriesRaw(requestParameters: GetApiSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfSeriesDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['PerPage'] = requestParameters['perPage'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/series`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfSeriesDtoFromJSON(jsonValue));
    }

    /**
     */
    async getApiSeries(requestParameters: GetApiSeriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfSeriesDto> {
        const response = await this.getApiSeriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiSeriesUnitsRaw(requestParameters: GetApiSeriesUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfSeriesUnitsVm>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['PerPage'] = requestParameters['perPage'];
        }

        if (requestParameters['unitIds'] != null) {
            queryParameters['UnitIds'] = requestParameters['unitIds'];
        }

        if (requestParameters['listAll'] != null) {
            queryParameters['ListAll'] = requestParameters['listAll'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/series/units`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfSeriesUnitsVmFromJSON(jsonValue));
    }

    /**
     */
    async getApiSeriesUnits(requestParameters: GetApiSeriesUnitsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfSeriesUnitsVm> {
        const response = await this.getApiSeriesUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiSeriesRaw(requestParameters: PostApiSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createSeriesCommand'] == null) {
            throw new runtime.RequiredError(
                'createSeriesCommand',
                'Required parameter "createSeriesCommand" was null or undefined when calling postApiSeries().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/series`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSeriesCommandToJSON(requestParameters['createSeriesCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiSeries(requestParameters: PostApiSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiSeriesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiSeriesExportRaw(requestParameters: PostApiSeriesExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['exportPlayableSeriesCommand'] == null) {
            throw new runtime.RequiredError(
                'exportPlayableSeriesCommand',
                'Required parameter "exportPlayableSeriesCommand" was null or undefined when calling postApiSeriesExport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/series/export`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExportPlayableSeriesCommandToJSON(requestParameters['exportPlayableSeriesCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiSeriesExport(requestParameters: PostApiSeriesExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiSeriesExportRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiSeriesImportRaw(requestParameters: PostApiSeriesImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling postApiSeriesImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api/series/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiSeriesImport(requestParameters: PostApiSeriesImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiSeriesImportRaw(requestParameters, initOverrides);
    }

}
