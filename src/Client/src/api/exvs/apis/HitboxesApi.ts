/* tslint:disable */
/* eslint-disable */
/**
 * BoostStudio.Web | exvs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";
import type {
  CreateHitboxCommand,
  CreateHitboxGroupCommand,
  ExportHitboxGroupByPathCommand,
  ExportHitboxGroupCommand,
  GetApiAmmoHashParameterInner,
  GetApiAmmoPageParameter,
  GetApiAmmoPerPageParameter,
  HitboxDto,
  HitboxGroupDto,
  PaginatedListOfHitboxDto,
  PaginatedListOfHitboxGroupDto,
  UpdateHitboxCommand,
  UpdateHitboxGroupCommand,
} from "../models/index";
import {
  CreateHitboxCommandToJSON,
  CreateHitboxGroupCommandToJSON,
  ExportHitboxGroupByPathCommandToJSON,
  ExportHitboxGroupCommandToJSON,
  HitboxDtoFromJSON,
  HitboxGroupDtoFromJSON,
  PaginatedListOfHitboxDtoFromJSON,
  PaginatedListOfHitboxGroupDtoFromJSON,
  UpdateHitboxCommandToJSON,
  UpdateHitboxGroupCommandToJSON,
} from "../models/index";

export interface DeleteApiHitboxesByHashRequest {
  hash: GetApiAmmoHashParameterInner;
}

export interface GetApiHitboxGroupsRequest {
    page?: GetApiAmmoPageParameter;
    perPage?: GetApiAmmoPerPageParameter;
    hashes?: Array<GetApiAmmoHashParameterInner>;
    unitIds?: Array<GetApiAmmoHashParameterInner>;
}

export interface GetApiHitboxGroupsHashByHashRequest {
    hash: GetApiAmmoHashParameterInner;
}

export interface GetApiHitboxGroupsUnitIdByUnitIdRequest {
    unitId: GetApiAmmoHashParameterInner;
}

export interface GetApiHitboxesRequest {
    page?: GetApiAmmoPageParameter;
    perPage?: GetApiAmmoPerPageParameter;
    hashes?: Array<GetApiAmmoHashParameterInner>;
    unitIds?: Array<GetApiAmmoHashParameterInner>;
    search?: string;
}

export interface GetApiHitboxesByHashRequest {
    hash: GetApiAmmoHashParameterInner;
}

export interface PostApiHitboxGroupsRequest {
    createHitboxGroupCommand: CreateHitboxGroupCommand;
}

export interface PostApiHitboxGroupsByHashRequest {
    hash: GetApiAmmoHashParameterInner;
    updateHitboxGroupCommand: UpdateHitboxGroupCommand;
}

export interface PostApiHitboxGroupsExportRequest {
    exportHitboxGroupCommand: ExportHitboxGroupCommand;
}

export interface PostApiHitboxGroupsExportPathRequest {
    exportHitboxGroupByPathCommand: ExportHitboxGroupByPathCommand;
}

export interface PostApiHitboxGroupsImportRequest {
    file: Blob;
    unitId?: GetApiAmmoHashParameterInner;
}

export interface PostApiHitboxGroupsImportPathRequest {
    directoryPath: string;
}

export interface PostApiHitboxesRequest {
    createHitboxCommand: CreateHitboxCommand;
}

export interface PostApiHitboxesByHashRequest {
    hash: GetApiAmmoHashParameterInner;
    updateHitboxCommand: UpdateHitboxCommand;
}

/**
 * 
 */
export class HitboxesApi extends runtime.BaseAPI {

    /**
     */
    async deleteApiHitboxesByHashRaw(requestParameters: DeleteApiHitboxesByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling deleteApiHitboxesByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/hitboxes/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteApiHitboxesByHash(requestParameters: DeleteApiHitboxesByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiHitboxesByHashRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getApiHitboxGroupsRaw(requestParameters: GetApiHitboxGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfHitboxGroupDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['PerPage'] = requestParameters['perPage'];
        }

        if (requestParameters['hashes'] != null) {
            queryParameters['Hashes'] = requestParameters['hashes'];
        }

        if (requestParameters['unitIds'] != null) {
            queryParameters['UnitIds'] = requestParameters['unitIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/hitbox-groups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfHitboxGroupDtoFromJSON(jsonValue));
    }

    /**
     */
    async getApiHitboxGroups(requestParameters: GetApiHitboxGroupsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfHitboxGroupDto> {
        const response = await this.getApiHitboxGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiHitboxGroupsHashByHashRaw(requestParameters: GetApiHitboxGroupsHashByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HitboxGroupDto>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling getApiHitboxGroupsHashByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/hitbox-groups/hash/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HitboxGroupDtoFromJSON(jsonValue));
    }

    /**
     */
    async getApiHitboxGroupsHashByHash(requestParameters: GetApiHitboxGroupsHashByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HitboxGroupDto> {
        const response = await this.getApiHitboxGroupsHashByHashRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiHitboxGroupsUnitIdByUnitIdRaw(requestParameters: GetApiHitboxGroupsUnitIdByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HitboxGroupDto>> {
        if (requestParameters['unitId'] == null) {
            throw new runtime.RequiredError(
                'unitId',
                'Required parameter "unitId" was null or undefined when calling getApiHitboxGroupsUnitIdByUnitId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/hitbox-groups/unitId/{unitId}`.replace(`{${"unitId"}}`, encodeURIComponent(String(requestParameters['unitId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HitboxGroupDtoFromJSON(jsonValue));
    }

    /**
     */
    async getApiHitboxGroupsUnitIdByUnitId(requestParameters: GetApiHitboxGroupsUnitIdByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HitboxGroupDto> {
        const response = await this.getApiHitboxGroupsUnitIdByUnitIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiHitboxesRaw(requestParameters: GetApiHitboxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfHitboxDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['PerPage'] = requestParameters['perPage'];
        }

        if (requestParameters['hashes'] != null) {
            queryParameters['Hashes'] = requestParameters['hashes'];
        }

        if (requestParameters['unitIds'] != null) {
            queryParameters['UnitIds'] = requestParameters['unitIds'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/hitboxes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfHitboxDtoFromJSON(jsonValue));
    }

    /**
     */
    async getApiHitboxes(requestParameters: GetApiHitboxesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfHitboxDto> {
        const response = await this.getApiHitboxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiHitboxesByHashRaw(requestParameters: GetApiHitboxesByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HitboxDto>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling getApiHitboxesByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/hitboxes/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HitboxDtoFromJSON(jsonValue));
    }

    /**
     */
    async getApiHitboxesByHash(requestParameters: GetApiHitboxesByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HitboxDto> {
        const response = await this.getApiHitboxesByHashRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiHitboxGroupsRaw(requestParameters: PostApiHitboxGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createHitboxGroupCommand'] == null) {
            throw new runtime.RequiredError(
                'createHitboxGroupCommand',
                'Required parameter "createHitboxGroupCommand" was null or undefined when calling postApiHitboxGroups().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/hitbox-groups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateHitboxGroupCommandToJSON(requestParameters['createHitboxGroupCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiHitboxGroups(requestParameters: PostApiHitboxGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiHitboxGroupsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiHitboxGroupsByHashRaw(requestParameters: PostApiHitboxGroupsByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling postApiHitboxGroupsByHash().'
            );
        }

        if (requestParameters['updateHitboxGroupCommand'] == null) {
            throw new runtime.RequiredError(
                'updateHitboxGroupCommand',
                'Required parameter "updateHitboxGroupCommand" was null or undefined when calling postApiHitboxGroupsByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/hitbox-groups/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateHitboxGroupCommandToJSON(requestParameters['updateHitboxGroupCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiHitboxGroupsByHash(requestParameters: PostApiHitboxGroupsByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiHitboxGroupsByHashRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiHitboxGroupsExportRaw(requestParameters: PostApiHitboxGroupsExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['exportHitboxGroupCommand'] == null) {
            throw new runtime.RequiredError(
                'exportHitboxGroupCommand',
                'Required parameter "exportHitboxGroupCommand" was null or undefined when calling postApiHitboxGroupsExport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/hitbox-groups/export`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExportHitboxGroupCommandToJSON(requestParameters['exportHitboxGroupCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiHitboxGroupsExport(requestParameters: PostApiHitboxGroupsExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiHitboxGroupsExportRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiHitboxGroupsExportPathRaw(requestParameters: PostApiHitboxGroupsExportPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['exportHitboxGroupByPathCommand'] == null) {
            throw new runtime.RequiredError(
                'exportHitboxGroupByPathCommand',
                'Required parameter "exportHitboxGroupByPathCommand" was null or undefined when calling postApiHitboxGroupsExportPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/hitbox-groups/export/path`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExportHitboxGroupByPathCommandToJSON(requestParameters['exportHitboxGroupByPathCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiHitboxGroupsExportPath(requestParameters: PostApiHitboxGroupsExportPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiHitboxGroupsExportPathRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiHitboxGroupsImportRaw(requestParameters: PostApiHitboxGroupsImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling postApiHitboxGroupsImport().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['unitId'] != null) {
            queryParameters['unitId'] = requestParameters['unitId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api/hitbox-groups/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiHitboxGroupsImport(requestParameters: PostApiHitboxGroupsImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiHitboxGroupsImportRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiHitboxGroupsImportPathRaw(requestParameters: PostApiHitboxGroupsImportPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['directoryPath'] == null) {
            throw new runtime.RequiredError(
                'directoryPath',
                'Required parameter "directoryPath" was null or undefined when calling postApiHitboxGroupsImportPath().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['directoryPath'] != null) {
            queryParameters['directoryPath'] = requestParameters['directoryPath'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/hitbox-groups/import/path`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiHitboxGroupsImportPath(requestParameters: PostApiHitboxGroupsImportPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiHitboxGroupsImportPathRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiHitboxesRaw(requestParameters: PostApiHitboxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createHitboxCommand'] == null) {
            throw new runtime.RequiredError(
                'createHitboxCommand',
                'Required parameter "createHitboxCommand" was null or undefined when calling postApiHitboxes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/hitboxes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateHitboxCommandToJSON(requestParameters['createHitboxCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiHitboxes(requestParameters: PostApiHitboxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiHitboxesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiHitboxesByHashRaw(requestParameters: PostApiHitboxesByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling postApiHitboxesByHash().'
            );
        }

        if (requestParameters['updateHitboxCommand'] == null) {
            throw new runtime.RequiredError(
                'updateHitboxCommand',
                'Required parameter "updateHitboxCommand" was null or undefined when calling postApiHitboxesByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/hitboxes/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateHitboxCommandToJSON(requestParameters['updateHitboxCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiHitboxesByHash(requestParameters: PostApiHitboxesByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiHitboxesByHashRaw(requestParameters, initOverrides);
    }

}
