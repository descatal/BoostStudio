/* tslint:disable */
/* eslint-disable */
/**
 * BoostStudio.Web | exvs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateStatCommand,
  CreateUnitAmmoSlotCommand,
  ExportUnitStatByPathCommand,
  ExportUnitStatCommand,
  PaginatedListOfStatDto,
  PaginatedListOfUnitStatDto,
  StatDto,
  UnitAmmoSlotDto,
  UnitStatDto,
  UpdateStatCommand,
  UpdateUnitAmmoSlotCommand,
} from '../models/index';
import {
    CreateStatCommandFromJSON,
    CreateStatCommandToJSON,
    CreateUnitAmmoSlotCommandFromJSON,
    CreateUnitAmmoSlotCommandToJSON,
    ExportUnitStatByPathCommandFromJSON,
    ExportUnitStatByPathCommandToJSON,
    ExportUnitStatCommandFromJSON,
    ExportUnitStatCommandToJSON,
    PaginatedListOfStatDtoFromJSON,
    PaginatedListOfStatDtoToJSON,
    PaginatedListOfUnitStatDtoFromJSON,
    PaginatedListOfUnitStatDtoToJSON,
    StatDtoFromJSON,
    StatDtoToJSON,
    UnitAmmoSlotDtoFromJSON,
    UnitAmmoSlotDtoToJSON,
    UnitStatDtoFromJSON,
    UnitStatDtoToJSON,
    UpdateStatCommandFromJSON,
    UpdateStatCommandToJSON,
    UpdateUnitAmmoSlotCommandFromJSON,
    UpdateUnitAmmoSlotCommandToJSON,
} from '../models/index';

export interface DeleteApiStatsByIdRequest {
    id: string;
}

export interface DeleteApiUnitStatsAmmoSlotByIdRequest {
    id: string;
}

export interface GetApiStatsRequest {
    page?: number;
    perPage?: number;
    ids?: Array<string>;
    unitIds?: Array<number>;
}

export interface GetApiStatsByIdRequest {
    id: string;
}

export interface GetApiUnitStatsRequest {
    page?: number;
    perPage?: number;
    unitIds?: Array<number>;
}

export interface GetApiUnitStatsAmmoSlotByUnitIdRequest {
    unitId: number;
}

export interface GetApiUnitStatsByUnitIdRequest {
    unitId: number;
}

export interface PostApiStatsRequest {
    createStatCommand: CreateStatCommand;
}

export interface PostApiStatsByIdRequest {
    id: string;
    updateStatCommand: UpdateStatCommand;
}

export interface PostApiUnitStatsAmmoSlotRequest {
    createUnitAmmoSlotCommand: CreateUnitAmmoSlotCommand;
}

export interface PostApiUnitStatsAmmoSlotByIdRequest {
    id: string;
    updateUnitAmmoSlotCommand: UpdateUnitAmmoSlotCommand;
}

export interface PostApiUnitStatsExportRequest {
    exportUnitStatCommand: ExportUnitStatCommand;
}

export interface PostApiUnitStatsExportPathRequest {
    exportUnitStatByPathCommand: ExportUnitStatByPathCommand;
}

export interface PostApiUnitStatsImportRequest {
    files: Array<Blob>;
}

/**
 * 
 */
export class StatsApi extends runtime.BaseAPI {

    /**
     */
    async deleteApiStatsByIdRaw(requestParameters: DeleteApiStatsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteApiStatsById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/stats/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteApiStatsById(requestParameters: DeleteApiStatsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiStatsByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteApiUnitStatsAmmoSlotByIdRaw(requestParameters: DeleteApiUnitStatsAmmoSlotByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteApiUnitStatsAmmoSlotById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/unit-stats/ammo-slot/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteApiUnitStatsAmmoSlotById(requestParameters: DeleteApiUnitStatsAmmoSlotByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiUnitStatsAmmoSlotByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getApiStatsRaw(requestParameters: GetApiStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfStatDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['PerPage'] = requestParameters['perPage'];
        }

        if (requestParameters['ids'] != null) {
            queryParameters['Ids'] = requestParameters['ids'];
        }

        if (requestParameters['unitIds'] != null) {
            queryParameters['UnitIds'] = requestParameters['unitIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfStatDtoFromJSON(jsonValue));
    }

    /**
     */
    async getApiStats(requestParameters: GetApiStatsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfStatDto> {
        const response = await this.getApiStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiStatsByIdRaw(requestParameters: GetApiStatsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getApiStatsById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/stats/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatDtoFromJSON(jsonValue));
    }

    /**
     */
    async getApiStatsById(requestParameters: GetApiStatsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatDto> {
        const response = await this.getApiStatsByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiUnitStatsRaw(requestParameters: GetApiUnitStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfUnitStatDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['PerPage'] = requestParameters['perPage'];
        }

        if (requestParameters['unitIds'] != null) {
            queryParameters['UnitIds'] = requestParameters['unitIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/unit-stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfUnitStatDtoFromJSON(jsonValue));
    }

    /**
     */
    async getApiUnitStats(requestParameters: GetApiUnitStatsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfUnitStatDto> {
        const response = await this.getApiUnitStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiUnitStatsAmmoSlotByUnitIdRaw(requestParameters: GetApiUnitStatsAmmoSlotByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UnitAmmoSlotDto>>> {
        if (requestParameters['unitId'] == null) {
            throw new runtime.RequiredError(
                'unitId',
                'Required parameter "unitId" was null or undefined when calling getApiUnitStatsAmmoSlotByUnitId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/unit-stats/ammo-slot/{unitId}`.replace(`{${"unitId"}}`, encodeURIComponent(String(requestParameters['unitId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UnitAmmoSlotDtoFromJSON));
    }

    /**
     */
    async getApiUnitStatsAmmoSlotByUnitId(requestParameters: GetApiUnitStatsAmmoSlotByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UnitAmmoSlotDto>> {
        const response = await this.getApiUnitStatsAmmoSlotByUnitIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiUnitStatsByUnitIdRaw(requestParameters: GetApiUnitStatsByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnitStatDto>> {
        if (requestParameters['unitId'] == null) {
            throw new runtime.RequiredError(
                'unitId',
                'Required parameter "unitId" was null or undefined when calling getApiUnitStatsByUnitId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/unit-stats/{unitId}`.replace(`{${"unitId"}}`, encodeURIComponent(String(requestParameters['unitId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitStatDtoFromJSON(jsonValue));
    }

    /**
     */
    async getApiUnitStatsByUnitId(requestParameters: GetApiUnitStatsByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnitStatDto> {
        const response = await this.getApiUnitStatsByUnitIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiStatsRaw(requestParameters: PostApiStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createStatCommand'] == null) {
            throw new runtime.RequiredError(
                'createStatCommand',
                'Required parameter "createStatCommand" was null or undefined when calling postApiStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/stats`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateStatCommandToJSON(requestParameters['createStatCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiStats(requestParameters: PostApiStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiStatsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiStatsByIdRaw(requestParameters: PostApiStatsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postApiStatsById().'
            );
        }

        if (requestParameters['updateStatCommand'] == null) {
            throw new runtime.RequiredError(
                'updateStatCommand',
                'Required parameter "updateStatCommand" was null or undefined when calling postApiStatsById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/stats/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateStatCommandToJSON(requestParameters['updateStatCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiStatsById(requestParameters: PostApiStatsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiStatsByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitStatsAmmoSlotRaw(requestParameters: PostApiUnitStatsAmmoSlotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['createUnitAmmoSlotCommand'] == null) {
            throw new runtime.RequiredError(
                'createUnitAmmoSlotCommand',
                'Required parameter "createUnitAmmoSlotCommand" was null or undefined when calling postApiUnitStatsAmmoSlot().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/unit-stats/ammo-slot`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUnitAmmoSlotCommandToJSON(requestParameters['createUnitAmmoSlotCommand']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async postApiUnitStatsAmmoSlot(requestParameters: PostApiUnitStatsAmmoSlotRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.postApiUnitStatsAmmoSlotRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiUnitStatsAmmoSlotByIdRaw(requestParameters: PostApiUnitStatsAmmoSlotByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postApiUnitStatsAmmoSlotById().'
            );
        }

        if (requestParameters['updateUnitAmmoSlotCommand'] == null) {
            throw new runtime.RequiredError(
                'updateUnitAmmoSlotCommand',
                'Required parameter "updateUnitAmmoSlotCommand" was null or undefined when calling postApiUnitStatsAmmoSlotById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/unit-stats/ammo-slot/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUnitAmmoSlotCommandToJSON(requestParameters['updateUnitAmmoSlotCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitStatsAmmoSlotById(requestParameters: PostApiUnitStatsAmmoSlotByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitStatsAmmoSlotByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitStatsExportRaw(requestParameters: PostApiUnitStatsExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['exportUnitStatCommand'] == null) {
            throw new runtime.RequiredError(
                'exportUnitStatCommand',
                'Required parameter "exportUnitStatCommand" was null or undefined when calling postApiUnitStatsExport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/unit-stats/export`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExportUnitStatCommandToJSON(requestParameters['exportUnitStatCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitStatsExport(requestParameters: PostApiUnitStatsExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitStatsExportRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitStatsExportPathRaw(requestParameters: PostApiUnitStatsExportPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['exportUnitStatByPathCommand'] == null) {
            throw new runtime.RequiredError(
                'exportUnitStatByPathCommand',
                'Required parameter "exportUnitStatByPathCommand" was null or undefined when calling postApiUnitStatsExportPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/unit-stats/export/path`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExportUnitStatByPathCommandToJSON(requestParameters['exportUnitStatByPathCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitStatsExportPath(requestParameters: PostApiUnitStatsExportPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitStatsExportPathRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitStatsImportRaw(requestParameters: PostApiUnitStatsImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['files'] == null) {
            throw new runtime.RequiredError(
                'files',
                'Required parameter "files" was null or undefined when calling postApiUnitStatsImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['files'] != null) {
            requestParameters['files'].forEach((element) => {
                formParams.append('files', element as any);
            })
        }

        const response = await this.request({
            path: `/api/unit-stats/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitStatsImport(requestParameters: PostApiUnitStatsImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitStatsImportRaw(requestParameters, initOverrides);
    }

}
