// This file is auto-generated by @hey-api/openapi-ts

import {
  type DefaultError,
  queryOptions,
  type UseMutationOptions,
} from "@tanstack/react-query";

import { client } from "../client.gen";
import {
  deleteApiAmmoByHash,
  deleteApiAssetsByHash,
  deleteApiConfigsByKey,
  deleteApiHitboxesByHash,
  deleteApiPatchFilesById,
  deleteApiProjectilesByHash,
  deleteApiStatsById,
  deleteApiUnitsByUnitIdPlayableCharacter,
  deleteApiUnitStatsAmmoSlotById,
  getApiAmmo,
  getApiAmmoByHash,
  getApiAssets,
  getApiAssetsByHash,
  getApiConfigs,
  getApiConfigsByKey,
  getApiFhmPackPath,
  getApiFhmUnpackPath,
  getApiHitboxes,
  getApiHitboxesByHash,
  getApiHitboxGroups,
  getApiHitboxGroupsHashByHash,
  getApiHitboxGroupsUnitIdByUnitId,
  getApiPatchFiles,
  getApiPatchFilesById,
  getApiPatchFilesSummary,
  getApiProjectiles,
  getApiProjectilesByHash,
  getApiScexDecompiledByUnitId,
  getApiSeries,
  getApiSeriesUnits,
  getApiStats,
  getApiStatsById,
  getApiTblById,
  getApiTblDeserializePath,
  getApiTblSerializePath,
  getApiUnitProjectiles,
  getApiUnitProjectilesByUnitId,
  getApiUnits,
  getApiUnitsByUnitId,
  getApiUnitsByUnitIdPlayableCharacters,
  getApiUnitStats,
  getApiUnitStatsAmmoSlotByUnitId,
  getApiUnitStatsByUnitId,
  type Options,
  postApiAmmo,
  postApiAmmoByHash,
  postApiAmmoExport,
  postApiAmmoExportPath,
  postApiAmmoImport,
  postApiAssets,
  postApiAssetsByHash,
  postApiAssetsImport,
  postApiConfigs,
  postApiDebug,
  postApiFhmPack,
  postApiFhmPackAsset,
  postApiFhmUnpack,
  postApiFhmUnpackAsset,
  postApiHitboxes,
  postApiHitboxesByHash,
  postApiHitboxGroups,
  postApiHitboxGroupsByHash,
  postApiHitboxGroupsExport,
  postApiHitboxGroupsExportPath,
  postApiHitboxGroupsImport,
  postApiHitboxGroupsImportPath,
  postApiNdp3,
  postApiNdp3Json,
  postApiPatchFiles,
  postApiPatchFilesById,
  postApiPatchFilesResize,
  postApiProjectiles,
  postApiProjectilesByHash,
  postApiPsarcPackPatchFiles,
  postApiPsarcPackPath,
  postApiPsarcUnpackPatchFiles,
  postApiPsarcUnpackPath,
  postApiScexCompilePath,
  postApiScexCompileUnits,
  postApiScexDecompilePath,
  postApiScexDecompileUnits,
  postApiScexHotReloadPath,
  postApiSeries,
  postApiSeriesExport,
  postApiSeriesImport,
  postApiStats,
  postApiStatsById,
  postApiTblDeserialize,
  postApiTblExport,
  postApiTblImport,
  postApiTblSerialize,
  postApiUnitProjectilesExport,
  postApiUnitProjectilesExportPath,
  postApiUnitProjectilesImport,
  postApiUnitProjectilesImportPath,
  postApiUnits,
  postApiUnitsBulk,
  postApiUnitsByUnitId,
  postApiUnitsByUnitIdPlayableCharacter,
  postApiUnitsPlayableCharactersExport,
  postApiUnitsPlayableCharactersImport,
  postApiUnitStatsAmmoSlot,
  postApiUnitStatsAmmoSlotById,
  postApiUnitStatsExport,
  postApiUnitStatsExportPath,
  postApiUnitStatsImport,
} from "../sdk.gen";
import type {
  DeleteApiAmmoByHashData,
  DeleteApiAmmoByHashResponse,
  DeleteApiAssetsByHashData,
  DeleteApiAssetsByHashResponse,
  DeleteApiConfigsByKeyData,
  DeleteApiConfigsByKeyResponse,
  DeleteApiHitboxesByHashData,
  DeleteApiHitboxesByHashResponse,
  DeleteApiPatchFilesByIdData,
  DeleteApiPatchFilesByIdResponse,
  DeleteApiProjectilesByHashData,
  DeleteApiStatsByIdData,
  DeleteApiStatsByIdResponse,
  DeleteApiUnitsByUnitIdPlayableCharacterData,
  DeleteApiUnitsByUnitIdPlayableCharacterResponse,
  DeleteApiUnitStatsAmmoSlotByIdData,
  DeleteApiUnitStatsAmmoSlotByIdResponse,
  GetApiAmmoByHashData,
  GetApiAmmoData,
  GetApiAssetsByHashData,
  GetApiAssetsData,
  GetApiConfigsByKeyData,
  GetApiConfigsData,
  GetApiFhmPackPathData,
  GetApiFhmUnpackPathData,
  GetApiHitboxesByHashData,
  GetApiHitboxesData,
  GetApiHitboxGroupsData,
  GetApiHitboxGroupsHashByHashData,
  GetApiHitboxGroupsUnitIdByUnitIdData,
  GetApiPatchFilesByIdData,
  GetApiPatchFilesData,
  GetApiPatchFilesSummaryData,
  GetApiProjectilesByHashData,
  GetApiProjectilesData,
  GetApiScexDecompiledByUnitIdData,
  GetApiSeriesData,
  GetApiSeriesUnitsData,
  GetApiStatsByIdData,
  GetApiStatsData,
  GetApiTblByIdData,
  GetApiTblDeserializePathData,
  GetApiTblSerializePathData,
  GetApiUnitProjectilesByUnitIdData,
  GetApiUnitProjectilesData,
  GetApiUnitsByUnitIdData,
  GetApiUnitsByUnitIdPlayableCharactersData,
  GetApiUnitsData,
  GetApiUnitStatsAmmoSlotByUnitIdData,
  GetApiUnitStatsByUnitIdData,
  GetApiUnitStatsData,
  PostApiAmmoByHashData,
  PostApiAmmoByHashResponse,
  PostApiAmmoData,
  PostApiAmmoExportData,
  PostApiAmmoExportPathData,
  PostApiAmmoExportPathResponse,
  PostApiAmmoExportResponse,
  PostApiAmmoImportData,
  PostApiAssetsByHashData,
  PostApiAssetsByHashResponse,
  PostApiAssetsData,
  PostApiAssetsImportData,
  PostApiConfigsData,
  PostApiConfigsResponse,
  PostApiDebugData,
  PostApiFhmPackAssetData,
  PostApiFhmPackAssetResponse,
  PostApiFhmPackData,
  PostApiFhmPackResponse,
  PostApiFhmUnpackAssetData,
  PostApiFhmUnpackAssetResponse,
  PostApiFhmUnpackData,
  PostApiFhmUnpackResponse,
  PostApiHitboxesByHashData,
  PostApiHitboxesByHashResponse,
  PostApiHitboxesData,
  PostApiHitboxGroupsByHashData,
  PostApiHitboxGroupsByHashResponse,
  PostApiHitboxGroupsData,
  PostApiHitboxGroupsExportData,
  PostApiHitboxGroupsExportPathData,
  PostApiHitboxGroupsExportPathResponse,
  PostApiHitboxGroupsExportResponse,
  PostApiHitboxGroupsImportData,
  PostApiHitboxGroupsImportPathData,
  PostApiNdp3Data,
  PostApiNdp3JsonData,
  PostApiNdp3JsonResponse,
  PostApiNdp3Response,
  PostApiPatchFilesByIdData,
  PostApiPatchFilesByIdResponse,
  PostApiPatchFilesData,
  PostApiPatchFilesResizeData,
  PostApiPatchFilesResizeResponse,
  PostApiProjectilesByHashData,
  PostApiProjectilesData,
  PostApiPsarcPackPatchFilesData,
  PostApiPsarcPackPatchFilesResponse,
  PostApiPsarcPackPathData,
  PostApiPsarcPackPathResponse,
  PostApiPsarcUnpackPatchFilesData,
  PostApiPsarcUnpackPatchFilesResponse,
  PostApiPsarcUnpackPathData,
  PostApiPsarcUnpackPathResponse,
  PostApiScexCompilePathData,
  PostApiScexCompilePathResponse,
  PostApiScexCompileUnitsData,
  PostApiScexCompileUnitsResponse,
  PostApiScexDecompilePathData,
  PostApiScexDecompilePathResponse,
  PostApiScexDecompileUnitsData,
  PostApiScexDecompileUnitsResponse,
  PostApiScexHotReloadPathData,
  PostApiScexHotReloadPathResponse,
  PostApiSeriesData,
  PostApiSeriesExportData,
  PostApiSeriesExportResponse,
  PostApiSeriesImportData,
  PostApiStatsByIdData,
  PostApiStatsByIdResponse,
  PostApiStatsData,
  PostApiTblDeserializeData,
  PostApiTblDeserializeResponse,
  PostApiTblExportData,
  PostApiTblExportResponse,
  PostApiTblImportData,
  PostApiTblSerializeData,
  PostApiTblSerializeResponse,
  PostApiUnitProjectilesExportData,
  PostApiUnitProjectilesExportPathData,
  PostApiUnitProjectilesExportPathResponse,
  PostApiUnitProjectilesExportResponse,
  PostApiUnitProjectilesImportData,
  PostApiUnitProjectilesImportPathData,
  PostApiUnitsBulkData,
  PostApiUnitsByUnitIdData,
  PostApiUnitsByUnitIdPlayableCharacterData,
  PostApiUnitsByUnitIdPlayableCharacterResponse,
  PostApiUnitsByUnitIdResponse,
  PostApiUnitsData,
  PostApiUnitsPlayableCharactersExportData,
  PostApiUnitsPlayableCharactersExportResponse,
  PostApiUnitsPlayableCharactersImportData,
  PostApiUnitStatsAmmoSlotByIdData,
  PostApiUnitStatsAmmoSlotByIdResponse,
  PostApiUnitStatsAmmoSlotData,
  PostApiUnitStatsExportData,
  PostApiUnitStatsExportPathData,
  PostApiUnitStatsExportPathResponse,
  PostApiUnitStatsExportResponse,
  PostApiUnitStatsImportData,
} from "../types.gen";

export const postApiDebugMutation = (
  options?: Partial<Options<PostApiDebugData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiDebugData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiDebugData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiDebug({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
    tags?: ReadonlyArray<string>;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl || (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getApiUnitsQueryKey = (options?: Options<GetApiUnitsData>) =>
  createQueryKey("getApiUnits", options);

export const getApiUnitsOptions = (options?: Options<GetApiUnitsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUnits({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUnitsQueryKey(options),
  });
};

export const postApiUnitsMutation = (
  options?: Partial<Options<PostApiUnitsData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiUnitsData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitsData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiUnits({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUnitsByUnitIdQueryKey = (
  options: Options<GetApiUnitsByUnitIdData>,
) => createQueryKey("getApiUnitsByUnitId", options);

export const getApiUnitsByUnitIdOptions = (
  options: Options<GetApiUnitsByUnitIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUnitsByUnitId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUnitsByUnitIdQueryKey(options),
  });
};

export const postApiUnitsByUnitIdMutation = (
  options?: Partial<Options<PostApiUnitsByUnitIdData>>,
): UseMutationOptions<
  PostApiUnitsByUnitIdResponse,
  DefaultError,
  Options<PostApiUnitsByUnitIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiUnitsByUnitIdResponse,
    DefaultError,
    Options<PostApiUnitsByUnitIdData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiUnitsByUnitId({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUnitsByUnitIdPlayableCharactersQueryKey = (
  options: Options<GetApiUnitsByUnitIdPlayableCharactersData>,
) => createQueryKey("getApiUnitsByUnitIdPlayableCharacters", options);

export const getApiUnitsByUnitIdPlayableCharactersOptions = (
  options: Options<GetApiUnitsByUnitIdPlayableCharactersData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUnitsByUnitIdPlayableCharacters({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUnitsByUnitIdPlayableCharactersQueryKey(options),
  });
};

export const postApiUnitsBulkMutation = (
  options?: Partial<Options<PostApiUnitsBulkData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiUnitsBulkData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitsBulkData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiUnitsBulk({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiUnitsByUnitIdPlayableCharacterMutation = (
  options?: Partial<Options<DeleteApiUnitsByUnitIdPlayableCharacterData>>,
): UseMutationOptions<
  DeleteApiUnitsByUnitIdPlayableCharacterResponse,
  DefaultError,
  Options<DeleteApiUnitsByUnitIdPlayableCharacterData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiUnitsByUnitIdPlayableCharacterResponse,
    DefaultError,
    Options<DeleteApiUnitsByUnitIdPlayableCharacterData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiUnitsByUnitIdPlayableCharacter({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUnitsByUnitIdPlayableCharacterMutation = (
  options?: Partial<Options<PostApiUnitsByUnitIdPlayableCharacterData>>,
): UseMutationOptions<
  PostApiUnitsByUnitIdPlayableCharacterResponse,
  DefaultError,
  Options<PostApiUnitsByUnitIdPlayableCharacterData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiUnitsByUnitIdPlayableCharacterResponse,
    DefaultError,
    Options<PostApiUnitsByUnitIdPlayableCharacterData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiUnitsByUnitIdPlayableCharacter({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUnitsPlayableCharactersImportMutation = (
  options?: Partial<Options<PostApiUnitsPlayableCharactersImportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiUnitsPlayableCharactersImportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitsPlayableCharactersImportData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiUnitsPlayableCharactersImport({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUnitsPlayableCharactersExportMutation = (
  options?: Partial<Options<PostApiUnitsPlayableCharactersExportData>>,
): UseMutationOptions<
  PostApiUnitsPlayableCharactersExportResponse,
  DefaultError,
  Options<PostApiUnitsPlayableCharactersExportData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiUnitsPlayableCharactersExportResponse,
    DefaultError,
    Options<PostApiUnitsPlayableCharactersExportData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiUnitsPlayableCharactersExport({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiPatchFilesQueryKey = (
  options?: Options<GetApiPatchFilesData>,
) => createQueryKey("getApiPatchFiles", options);

export const getApiPatchFilesOptions = (
  options?: Options<GetApiPatchFilesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiPatchFiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiPatchFilesQueryKey(options),
  });
};

export const postApiPatchFilesMutation = (
  options?: Partial<Options<PostApiPatchFilesData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiPatchFilesData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiPatchFilesData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiPatchFiles({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiPatchFilesSummaryQueryKey = (
  options?: Options<GetApiPatchFilesSummaryData>,
) => createQueryKey("getApiPatchFilesSummary", options);

export const getApiPatchFilesSummaryOptions = (
  options?: Options<GetApiPatchFilesSummaryData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiPatchFilesSummary({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiPatchFilesSummaryQueryKey(options),
  });
};

export const deleteApiPatchFilesByIdMutation = (
  options?: Partial<Options<DeleteApiPatchFilesByIdData>>,
): UseMutationOptions<
  DeleteApiPatchFilesByIdResponse,
  DefaultError,
  Options<DeleteApiPatchFilesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiPatchFilesByIdResponse,
    DefaultError,
    Options<DeleteApiPatchFilesByIdData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiPatchFilesById({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiPatchFilesByIdQueryKey = (
  options: Options<GetApiPatchFilesByIdData>,
) => createQueryKey("getApiPatchFilesById", options);

export const getApiPatchFilesByIdOptions = (
  options: Options<GetApiPatchFilesByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiPatchFilesById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiPatchFilesByIdQueryKey(options),
  });
};

export const postApiPatchFilesByIdMutation = (
  options?: Partial<Options<PostApiPatchFilesByIdData>>,
): UseMutationOptions<
  PostApiPatchFilesByIdResponse,
  DefaultError,
  Options<PostApiPatchFilesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiPatchFilesByIdResponse,
    DefaultError,
    Options<PostApiPatchFilesByIdData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiPatchFilesById({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiPatchFilesResizeMutation = (
  options?: Partial<Options<PostApiPatchFilesResizeData>>,
): UseMutationOptions<
  PostApiPatchFilesResizeResponse,
  DefaultError,
  Options<PostApiPatchFilesResizeData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiPatchFilesResizeResponse,
    DefaultError,
    Options<PostApiPatchFilesResizeData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiPatchFilesResize({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiTblDeserializePathQueryKey = (
  options: Options<GetApiTblDeserializePathData>,
) => createQueryKey("getApiTblDeserializePath", options);

export const getApiTblDeserializePathOptions = (
  options: Options<GetApiTblDeserializePathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiTblDeserializePath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiTblDeserializePathQueryKey(options),
  });
};

export const postApiTblDeserializeMutation = (
  options?: Partial<Options<PostApiTblDeserializeData>>,
): UseMutationOptions<
  PostApiTblDeserializeResponse,
  DefaultError,
  Options<PostApiTblDeserializeData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiTblDeserializeResponse,
    DefaultError,
    Options<PostApiTblDeserializeData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiTblDeserialize({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiTblSerializePathQueryKey = (
  options: Options<GetApiTblSerializePathData>,
) => createQueryKey("getApiTblSerializePath", options);

export const getApiTblSerializePathOptions = (
  options: Options<GetApiTblSerializePathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiTblSerializePath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiTblSerializePathQueryKey(options),
  });
};

export const postApiTblSerializeMutation = (
  options?: Partial<Options<PostApiTblSerializeData>>,
): UseMutationOptions<
  PostApiTblSerializeResponse,
  DefaultError,
  Options<PostApiTblSerializeData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiTblSerializeResponse,
    DefaultError,
    Options<PostApiTblSerializeData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiTblSerialize({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiTblByIdQueryKey = (options: Options<GetApiTblByIdData>) =>
  createQueryKey("getApiTblById", options);

export const getApiTblByIdOptions = (options: Options<GetApiTblByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiTblById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiTblByIdQueryKey(options),
  });
};

export const postApiTblImportMutation = (
  options?: Partial<Options<PostApiTblImportData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiTblImportData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiTblImportData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiTblImport({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiTblExportMutation = (
  options?: Partial<Options<PostApiTblExportData>>,
): UseMutationOptions<
  PostApiTblExportResponse,
  DefaultError,
  Options<PostApiTblExportData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiTblExportResponse,
    DefaultError,
    Options<PostApiTblExportData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiTblExport({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiStatsQueryKey = (options?: Options<GetApiStatsData>) =>
  createQueryKey("getApiStats", options);

export const getApiStatsOptions = (options?: Options<GetApiStatsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiStats({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiStatsQueryKey(options),
  });
};

export const postApiStatsMutation = (
  options?: Partial<Options<PostApiStatsData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiStatsData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiStatsData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiStats({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiStatsByIdMutation = (
  options?: Partial<Options<DeleteApiStatsByIdData>>,
): UseMutationOptions<
  DeleteApiStatsByIdResponse,
  DefaultError,
  Options<DeleteApiStatsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiStatsByIdResponse,
    DefaultError,
    Options<DeleteApiStatsByIdData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiStatsById({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiStatsByIdQueryKey = (
  options: Options<GetApiStatsByIdData>,
) => createQueryKey("getApiStatsById", options);

export const getApiStatsByIdOptions = (
  options: Options<GetApiStatsByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiStatsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiStatsByIdQueryKey(options),
  });
};

export const postApiStatsByIdMutation = (
  options?: Partial<Options<PostApiStatsByIdData>>,
): UseMutationOptions<
  PostApiStatsByIdResponse,
  DefaultError,
  Options<PostApiStatsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiStatsByIdResponse,
    DefaultError,
    Options<PostApiStatsByIdData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiStatsById({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUnitStatsQueryKey = (
  options?: Options<GetApiUnitStatsData>,
) => createQueryKey("getApiUnitStats", options);

export const getApiUnitStatsOptions = (
  options?: Options<GetApiUnitStatsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUnitStats({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUnitStatsQueryKey(options),
  });
};

export const getApiUnitStatsByUnitIdQueryKey = (
  options: Options<GetApiUnitStatsByUnitIdData>,
) => createQueryKey("getApiUnitStatsByUnitId", options);

export const getApiUnitStatsByUnitIdOptions = (
  options: Options<GetApiUnitStatsByUnitIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUnitStatsByUnitId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUnitStatsByUnitIdQueryKey(options),
  });
};

export const postApiUnitStatsImportMutation = (
  options?: Partial<Options<PostApiUnitStatsImportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiUnitStatsImportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitStatsImportData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiUnitStatsImport({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUnitStatsExportMutation = (
  options?: Partial<Options<PostApiUnitStatsExportData>>,
): UseMutationOptions<
  PostApiUnitStatsExportResponse,
  DefaultError,
  Options<PostApiUnitStatsExportData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiUnitStatsExportResponse,
    DefaultError,
    Options<PostApiUnitStatsExportData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiUnitStatsExport({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUnitStatsExportPathMutation = (
  options?: Partial<Options<PostApiUnitStatsExportPathData>>,
): UseMutationOptions<
  PostApiUnitStatsExportPathResponse,
  DefaultError,
  Options<PostApiUnitStatsExportPathData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiUnitStatsExportPathResponse,
    DefaultError,
    Options<PostApiUnitStatsExportPathData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiUnitStatsExportPath({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUnitStatsAmmoSlotByUnitIdQueryKey = (
  options: Options<GetApiUnitStatsAmmoSlotByUnitIdData>,
) => createQueryKey("getApiUnitStatsAmmoSlotByUnitId", options);

export const getApiUnitStatsAmmoSlotByUnitIdOptions = (
  options: Options<GetApiUnitStatsAmmoSlotByUnitIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUnitStatsAmmoSlotByUnitId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUnitStatsAmmoSlotByUnitIdQueryKey(options),
  });
};

export const postApiUnitStatsAmmoSlotMutation = (
  options?: Partial<Options<PostApiUnitStatsAmmoSlotData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiUnitStatsAmmoSlotData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitStatsAmmoSlotData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiUnitStatsAmmoSlot({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiUnitStatsAmmoSlotByIdMutation = (
  options?: Partial<Options<DeleteApiUnitStatsAmmoSlotByIdData>>,
): UseMutationOptions<
  DeleteApiUnitStatsAmmoSlotByIdResponse,
  DefaultError,
  Options<DeleteApiUnitStatsAmmoSlotByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiUnitStatsAmmoSlotByIdResponse,
    DefaultError,
    Options<DeleteApiUnitStatsAmmoSlotByIdData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiUnitStatsAmmoSlotById({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUnitStatsAmmoSlotByIdMutation = (
  options?: Partial<Options<PostApiUnitStatsAmmoSlotByIdData>>,
): UseMutationOptions<
  PostApiUnitStatsAmmoSlotByIdResponse,
  DefaultError,
  Options<PostApiUnitStatsAmmoSlotByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiUnitStatsAmmoSlotByIdResponse,
    DefaultError,
    Options<PostApiUnitStatsAmmoSlotByIdData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiUnitStatsAmmoSlotById({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiSeriesQueryKey = (options?: Options<GetApiSeriesData>) =>
  createQueryKey("getApiSeries", options);

export const getApiSeriesOptions = (options?: Options<GetApiSeriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiSeries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiSeriesQueryKey(options),
  });
};

export const postApiSeriesMutation = (
  options?: Partial<Options<PostApiSeriesData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiSeriesData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiSeriesData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiSeries({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiSeriesUnitsQueryKey = (
  options?: Options<GetApiSeriesUnitsData>,
) => createQueryKey("getApiSeriesUnits", options);

export const getApiSeriesUnitsOptions = (
  options?: Options<GetApiSeriesUnitsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiSeriesUnits({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiSeriesUnitsQueryKey(options),
  });
};

export const postApiSeriesImportMutation = (
  options?: Partial<Options<PostApiSeriesImportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiSeriesImportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiSeriesImportData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiSeriesImport({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiSeriesExportMutation = (
  options?: Partial<Options<PostApiSeriesExportData>>,
): UseMutationOptions<
  PostApiSeriesExportResponse,
  DefaultError,
  Options<PostApiSeriesExportData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiSeriesExportResponse,
    DefaultError,
    Options<PostApiSeriesExportData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiSeriesExport({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiScexDecompiledByUnitIdQueryKey = (
  options: Options<GetApiScexDecompiledByUnitIdData>,
) => createQueryKey("getApiScexDecompiledByUnitId", options);

export const getApiScexDecompiledByUnitIdOptions = (
  options: Options<GetApiScexDecompiledByUnitIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiScexDecompiledByUnitId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiScexDecompiledByUnitIdQueryKey(options),
  });
};

export const postApiScexCompilePathMutation = (
  options?: Partial<Options<PostApiScexCompilePathData>>,
): UseMutationOptions<
  PostApiScexCompilePathResponse,
  DefaultError,
  Options<PostApiScexCompilePathData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiScexCompilePathResponse,
    DefaultError,
    Options<PostApiScexCompilePathData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiScexCompilePath({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiScexDecompilePathMutation = (
  options?: Partial<Options<PostApiScexDecompilePathData>>,
): UseMutationOptions<
  PostApiScexDecompilePathResponse,
  DefaultError,
  Options<PostApiScexDecompilePathData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiScexDecompilePathResponse,
    DefaultError,
    Options<PostApiScexDecompilePathData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiScexDecompilePath({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiScexHotReloadPathMutation = (
  options?: Partial<Options<PostApiScexHotReloadPathData>>,
): UseMutationOptions<
  PostApiScexHotReloadPathResponse,
  DefaultError,
  Options<PostApiScexHotReloadPathData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiScexHotReloadPathResponse,
    DefaultError,
    Options<PostApiScexHotReloadPathData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiScexHotReloadPath({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiScexCompileUnitsMutation = (
  options?: Partial<Options<PostApiScexCompileUnitsData>>,
): UseMutationOptions<
  PostApiScexCompileUnitsResponse,
  DefaultError,
  Options<PostApiScexCompileUnitsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiScexCompileUnitsResponse,
    DefaultError,
    Options<PostApiScexCompileUnitsData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiScexCompileUnits({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiScexDecompileUnitsMutation = (
  options?: Partial<Options<PostApiScexDecompileUnitsData>>,
): UseMutationOptions<
  PostApiScexDecompileUnitsResponse,
  DefaultError,
  Options<PostApiScexDecompileUnitsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiScexDecompileUnitsResponse,
    DefaultError,
    Options<PostApiScexDecompileUnitsData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiScexDecompileUnits({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiPsarcPackPathMutation = (
  options?: Partial<Options<PostApiPsarcPackPathData>>,
): UseMutationOptions<
  PostApiPsarcPackPathResponse,
  DefaultError,
  Options<PostApiPsarcPackPathData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiPsarcPackPathResponse,
    DefaultError,
    Options<PostApiPsarcPackPathData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiPsarcPackPath({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiPsarcUnpackPathMutation = (
  options?: Partial<Options<PostApiPsarcUnpackPathData>>,
): UseMutationOptions<
  PostApiPsarcUnpackPathResponse,
  DefaultError,
  Options<PostApiPsarcUnpackPathData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiPsarcUnpackPathResponse,
    DefaultError,
    Options<PostApiPsarcUnpackPathData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiPsarcUnpackPath({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiPsarcPackPatchFilesMutation = (
  options?: Partial<Options<PostApiPsarcPackPatchFilesData>>,
): UseMutationOptions<
  PostApiPsarcPackPatchFilesResponse,
  DefaultError,
  Options<PostApiPsarcPackPatchFilesData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiPsarcPackPatchFilesResponse,
    DefaultError,
    Options<PostApiPsarcPackPatchFilesData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiPsarcPackPatchFiles({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiPsarcUnpackPatchFilesMutation = (
  options?: Partial<Options<PostApiPsarcUnpackPatchFilesData>>,
): UseMutationOptions<
  PostApiPsarcUnpackPatchFilesResponse,
  DefaultError,
  Options<PostApiPsarcUnpackPatchFilesData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiPsarcUnpackPatchFilesResponse,
    DefaultError,
    Options<PostApiPsarcUnpackPatchFilesData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiPsarcUnpackPatchFiles({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiProjectilesQueryKey = (
  options?: Options<GetApiProjectilesData>,
) => createQueryKey("getApiProjectiles", options);

export const getApiProjectilesOptions = (
  options?: Options<GetApiProjectilesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiProjectiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiProjectilesQueryKey(options),
  });
};

export const postApiProjectilesMutation = (
  options?: Partial<Options<PostApiProjectilesData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiProjectilesData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiProjectilesData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiProjectiles({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiProjectilesByHashMutation = (
  options?: Partial<Options<DeleteApiProjectilesByHashData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<DeleteApiProjectilesByHashData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteApiProjectilesByHashData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiProjectilesByHash({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiProjectilesByHashQueryKey = (
  options: Options<GetApiProjectilesByHashData>,
) => createQueryKey("getApiProjectilesByHash", options);

export const getApiProjectilesByHashOptions = (
  options: Options<GetApiProjectilesByHashData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiProjectilesByHash({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiProjectilesByHashQueryKey(options),
  });
};

export const postApiProjectilesByHashMutation = (
  options?: Partial<Options<PostApiProjectilesByHashData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiProjectilesByHashData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiProjectilesByHashData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiProjectilesByHash({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUnitProjectilesQueryKey = (
  options?: Options<GetApiUnitProjectilesData>,
) => createQueryKey("getApiUnitProjectiles", options);

export const getApiUnitProjectilesOptions = (
  options?: Options<GetApiUnitProjectilesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUnitProjectiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUnitProjectilesQueryKey(options),
  });
};

export const getApiUnitProjectilesByUnitIdQueryKey = (
  options: Options<GetApiUnitProjectilesByUnitIdData>,
) => createQueryKey("getApiUnitProjectilesByUnitId", options);

export const getApiUnitProjectilesByUnitIdOptions = (
  options: Options<GetApiUnitProjectilesByUnitIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUnitProjectilesByUnitId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUnitProjectilesByUnitIdQueryKey(options),
  });
};

export const postApiUnitProjectilesImportMutation = (
  options?: Partial<Options<PostApiUnitProjectilesImportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiUnitProjectilesImportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitProjectilesImportData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiUnitProjectilesImport({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUnitProjectilesImportPathMutation = (
  options?: Partial<Options<PostApiUnitProjectilesImportPathData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiUnitProjectilesImportPathData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitProjectilesImportPathData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiUnitProjectilesImportPath({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUnitProjectilesExportMutation = (
  options?: Partial<Options<PostApiUnitProjectilesExportData>>,
): UseMutationOptions<
  PostApiUnitProjectilesExportResponse,
  DefaultError,
  Options<PostApiUnitProjectilesExportData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiUnitProjectilesExportResponse,
    DefaultError,
    Options<PostApiUnitProjectilesExportData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiUnitProjectilesExport({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUnitProjectilesExportPathMutation = (
  options?: Partial<Options<PostApiUnitProjectilesExportPathData>>,
): UseMutationOptions<
  PostApiUnitProjectilesExportPathResponse,
  DefaultError,
  Options<PostApiUnitProjectilesExportPathData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiUnitProjectilesExportPathResponse,
    DefaultError,
    Options<PostApiUnitProjectilesExportPathData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiUnitProjectilesExportPath({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiNdp3Mutation = (
  options?: Partial<Options<PostApiNdp3Data>>,
): UseMutationOptions<
  PostApiNdp3Response,
  DefaultError,
  Options<PostApiNdp3Data>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiNdp3Response,
    DefaultError,
    Options<PostApiNdp3Data>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiNdp3({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiNdp3JsonMutation = (
  options?: Partial<Options<PostApiNdp3JsonData>>,
): UseMutationOptions<
  PostApiNdp3JsonResponse,
  DefaultError,
  Options<PostApiNdp3JsonData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiNdp3JsonResponse,
    DefaultError,
    Options<PostApiNdp3JsonData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiNdp3Json({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiHitboxesQueryKey = (options?: Options<GetApiHitboxesData>) =>
  createQueryKey("getApiHitboxes", options);

export const getApiHitboxesOptions = (
  options?: Options<GetApiHitboxesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiHitboxes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiHitboxesQueryKey(options),
  });
};

export const postApiHitboxesMutation = (
  options?: Partial<Options<PostApiHitboxesData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiHitboxesData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiHitboxesData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiHitboxes({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiHitboxesByHashMutation = (
  options?: Partial<Options<DeleteApiHitboxesByHashData>>,
): UseMutationOptions<
  DeleteApiHitboxesByHashResponse,
  DefaultError,
  Options<DeleteApiHitboxesByHashData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiHitboxesByHashResponse,
    DefaultError,
    Options<DeleteApiHitboxesByHashData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiHitboxesByHash({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiHitboxesByHashQueryKey = (
  options: Options<GetApiHitboxesByHashData>,
) => createQueryKey("getApiHitboxesByHash", options);

export const getApiHitboxesByHashOptions = (
  options: Options<GetApiHitboxesByHashData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiHitboxesByHash({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiHitboxesByHashQueryKey(options),
  });
};

export const postApiHitboxesByHashMutation = (
  options?: Partial<Options<PostApiHitboxesByHashData>>,
): UseMutationOptions<
  PostApiHitboxesByHashResponse,
  DefaultError,
  Options<PostApiHitboxesByHashData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiHitboxesByHashResponse,
    DefaultError,
    Options<PostApiHitboxesByHashData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiHitboxesByHash({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiHitboxGroupsQueryKey = (
  options?: Options<GetApiHitboxGroupsData>,
) => createQueryKey("getApiHitboxGroups", options);

export const getApiHitboxGroupsOptions = (
  options?: Options<GetApiHitboxGroupsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiHitboxGroups({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiHitboxGroupsQueryKey(options),
  });
};

export const postApiHitboxGroupsMutation = (
  options?: Partial<Options<PostApiHitboxGroupsData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiHitboxGroupsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiHitboxGroupsData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiHitboxGroups({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiHitboxGroupsHashByHashQueryKey = (
  options: Options<GetApiHitboxGroupsHashByHashData>,
) => createQueryKey("getApiHitboxGroupsHashByHash", options);

export const getApiHitboxGroupsHashByHashOptions = (
  options: Options<GetApiHitboxGroupsHashByHashData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiHitboxGroupsHashByHash({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiHitboxGroupsHashByHashQueryKey(options),
  });
};

export const getApiHitboxGroupsUnitIdByUnitIdQueryKey = (
  options: Options<GetApiHitboxGroupsUnitIdByUnitIdData>,
) => createQueryKey("getApiHitboxGroupsUnitIdByUnitId", options);

export const getApiHitboxGroupsUnitIdByUnitIdOptions = (
  options: Options<GetApiHitboxGroupsUnitIdByUnitIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiHitboxGroupsUnitIdByUnitId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiHitboxGroupsUnitIdByUnitIdQueryKey(options),
  });
};

export const postApiHitboxGroupsByHashMutation = (
  options?: Partial<Options<PostApiHitboxGroupsByHashData>>,
): UseMutationOptions<
  PostApiHitboxGroupsByHashResponse,
  DefaultError,
  Options<PostApiHitboxGroupsByHashData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiHitboxGroupsByHashResponse,
    DefaultError,
    Options<PostApiHitboxGroupsByHashData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiHitboxGroupsByHash({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiHitboxGroupsImportMutation = (
  options?: Partial<Options<PostApiHitboxGroupsImportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiHitboxGroupsImportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiHitboxGroupsImportData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiHitboxGroupsImport({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiHitboxGroupsImportPathMutation = (
  options?: Partial<Options<PostApiHitboxGroupsImportPathData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiHitboxGroupsImportPathData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiHitboxGroupsImportPathData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiHitboxGroupsImportPath({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiHitboxGroupsExportMutation = (
  options?: Partial<Options<PostApiHitboxGroupsExportData>>,
): UseMutationOptions<
  PostApiHitboxGroupsExportResponse,
  DefaultError,
  Options<PostApiHitboxGroupsExportData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiHitboxGroupsExportResponse,
    DefaultError,
    Options<PostApiHitboxGroupsExportData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiHitboxGroupsExport({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiHitboxGroupsExportPathMutation = (
  options?: Partial<Options<PostApiHitboxGroupsExportPathData>>,
): UseMutationOptions<
  PostApiHitboxGroupsExportPathResponse,
  DefaultError,
  Options<PostApiHitboxGroupsExportPathData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiHitboxGroupsExportPathResponse,
    DefaultError,
    Options<PostApiHitboxGroupsExportPathData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiHitboxGroupsExportPath({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiFhmPackPathQueryKey = (
  options: Options<GetApiFhmPackPathData>,
) => createQueryKey("getApiFhmPackPath", options);

export const getApiFhmPackPathOptions = (
  options: Options<GetApiFhmPackPathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiFhmPackPath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiFhmPackPathQueryKey(options),
  });
};

export const getApiFhmUnpackPathQueryKey = (
  options: Options<GetApiFhmUnpackPathData>,
) => createQueryKey("getApiFhmUnpackPath", options);

export const getApiFhmUnpackPathOptions = (
  options: Options<GetApiFhmUnpackPathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiFhmUnpackPath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiFhmUnpackPathQueryKey(options),
  });
};

export const postApiFhmPackMutation = (
  options?: Partial<Options<PostApiFhmPackData>>,
): UseMutationOptions<
  PostApiFhmPackResponse,
  DefaultError,
  Options<PostApiFhmPackData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiFhmPackResponse,
    DefaultError,
    Options<PostApiFhmPackData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiFhmPack({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiFhmUnpackMutation = (
  options?: Partial<Options<PostApiFhmUnpackData>>,
): UseMutationOptions<
  PostApiFhmUnpackResponse,
  DefaultError,
  Options<PostApiFhmUnpackData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiFhmUnpackResponse,
    DefaultError,
    Options<PostApiFhmUnpackData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiFhmUnpack({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiFhmPackAssetMutation = (
  options?: Partial<Options<PostApiFhmPackAssetData>>,
): UseMutationOptions<
  PostApiFhmPackAssetResponse,
  DefaultError,
  Options<PostApiFhmPackAssetData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiFhmPackAssetResponse,
    DefaultError,
    Options<PostApiFhmPackAssetData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiFhmPackAsset({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiFhmUnpackAssetMutation = (
  options?: Partial<Options<PostApiFhmUnpackAssetData>>,
): UseMutationOptions<
  PostApiFhmUnpackAssetResponse,
  DefaultError,
  Options<PostApiFhmUnpackAssetData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiFhmUnpackAssetResponse,
    DefaultError,
    Options<PostApiFhmUnpackAssetData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiFhmUnpackAsset({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiConfigsQueryKey = (options: Options<GetApiConfigsData>) =>
  createQueryKey("getApiConfigs", options);

export const getApiConfigsOptions = (options: Options<GetApiConfigsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiConfigs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiConfigsQueryKey(options),
  });
};

export const postApiConfigsMutation = (
  options?: Partial<Options<PostApiConfigsData>>,
): UseMutationOptions<
  PostApiConfigsResponse,
  DefaultError,
  Options<PostApiConfigsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiConfigsResponse,
    DefaultError,
    Options<PostApiConfigsData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiConfigs({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiConfigsByKeyMutation = (
  options?: Partial<Options<DeleteApiConfigsByKeyData>>,
): UseMutationOptions<
  DeleteApiConfigsByKeyResponse,
  DefaultError,
  Options<DeleteApiConfigsByKeyData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiConfigsByKeyResponse,
    DefaultError,
    Options<DeleteApiConfigsByKeyData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiConfigsByKey({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiConfigsByKeyQueryKey = (
  options: Options<GetApiConfigsByKeyData>,
) => createQueryKey("getApiConfigsByKey", options);

export const getApiConfigsByKeyOptions = (
  options: Options<GetApiConfigsByKeyData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiConfigsByKey({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiConfigsByKeyQueryKey(options),
  });
};

export const getApiAssetsQueryKey = (options?: Options<GetApiAssetsData>) =>
  createQueryKey("getApiAssets", options);

export const getApiAssetsOptions = (options?: Options<GetApiAssetsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAssets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAssetsQueryKey(options),
  });
};

export const postApiAssetsMutation = (
  options?: Partial<Options<PostApiAssetsData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiAssetsData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiAssetsData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiAssets({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiAssetsByHashMutation = (
  options?: Partial<Options<DeleteApiAssetsByHashData>>,
): UseMutationOptions<
  DeleteApiAssetsByHashResponse,
  DefaultError,
  Options<DeleteApiAssetsByHashData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiAssetsByHashResponse,
    DefaultError,
    Options<DeleteApiAssetsByHashData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiAssetsByHash({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiAssetsByHashQueryKey = (
  options: Options<GetApiAssetsByHashData>,
) => createQueryKey("getApiAssetsByHash", options);

export const getApiAssetsByHashOptions = (
  options: Options<GetApiAssetsByHashData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAssetsByHash({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAssetsByHashQueryKey(options),
  });
};

export const postApiAssetsByHashMutation = (
  options?: Partial<Options<PostApiAssetsByHashData>>,
): UseMutationOptions<
  PostApiAssetsByHashResponse,
  DefaultError,
  Options<PostApiAssetsByHashData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiAssetsByHashResponse,
    DefaultError,
    Options<PostApiAssetsByHashData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiAssetsByHash({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAssetsImportMutation = (
  options?: Partial<Options<PostApiAssetsImportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiAssetsImportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiAssetsImportData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiAssetsImport({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiAmmoQueryKey = (options?: Options<GetApiAmmoData>) =>
  createQueryKey("getApiAmmo", options);

export const getApiAmmoOptions = (options?: Options<GetApiAmmoData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAmmo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAmmoQueryKey(options),
  });
};

export const postApiAmmoMutation = (
  options?: Partial<Options<PostApiAmmoData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiAmmoData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiAmmoData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiAmmo({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiAmmoByHashMutation = (
  options?: Partial<Options<DeleteApiAmmoByHashData>>,
): UseMutationOptions<
  DeleteApiAmmoByHashResponse,
  DefaultError,
  Options<DeleteApiAmmoByHashData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiAmmoByHashResponse,
    DefaultError,
    Options<DeleteApiAmmoByHashData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await deleteApiAmmoByHash({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiAmmoByHashQueryKey = (
  options: Options<GetApiAmmoByHashData>,
) => createQueryKey("getApiAmmoByHash", options);

export const getApiAmmoByHashOptions = (
  options: Options<GetApiAmmoByHashData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAmmoByHash({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAmmoByHashQueryKey(options),
  });
};

export const postApiAmmoByHashMutation = (
  options?: Partial<Options<PostApiAmmoByHashData>>,
): UseMutationOptions<
  PostApiAmmoByHashResponse,
  DefaultError,
  Options<PostApiAmmoByHashData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiAmmoByHashResponse,
    DefaultError,
    Options<PostApiAmmoByHashData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiAmmoByHash({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAmmoImportMutation = (
  options?: Partial<Options<PostApiAmmoImportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiAmmoImportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiAmmoImportData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiAmmoImport({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAmmoExportMutation = (
  options?: Partial<Options<PostApiAmmoExportData>>,
): UseMutationOptions<
  PostApiAmmoExportResponse,
  DefaultError,
  Options<PostApiAmmoExportData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiAmmoExportResponse,
    DefaultError,
    Options<PostApiAmmoExportData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiAmmoExport({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAmmoExportPathMutation = (
  options?: Partial<Options<PostApiAmmoExportPathData>>,
): UseMutationOptions<
  PostApiAmmoExportPathResponse,
  DefaultError,
  Options<PostApiAmmoExportPathData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiAmmoExportPathResponse,
    DefaultError,
    Options<PostApiAmmoExportPathData>
  > = {
    mutationFn: async (fnOptions) => {
      const { data } = await postApiAmmoExportPath({
        ...options,
        ...fnOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
