// This file is auto-generated by @hey-api/openapi-ts

import {
  deleteApiAmmoByHash,
  deleteApiAssetsByHash,
  deleteApiConfigsByKey,
  deleteApiHitboxesByHash,
  deleteApiPatchFilesById,
  deleteApiProjectilesByHash,
  deleteApiStatsById,
  deleteApiUnitStatsAmmoSlotById,
  getApiAmmo,
  getApiAmmoByHash,
  getApiAssets,
  getApiAssetsByHash,
  getApiConfigs,
  getApiConfigsByKey,
  getApiFhmPackPath,
  getApiFhmUnpackPath,
  getApiHitboxes,
  getApiHitboxesByHash,
  getApiHitboxGroups,
  getApiHitboxGroupsHashByHash,
  getApiHitboxGroupsUnitIdByUnitId,
  getApiPatchFiles,
  getApiPatchFilesById,
  getApiPatchFilesSummary,
  getApiProjectiles,
  getApiProjectilesByHash,
  getApiScexDecompiledByUnitId,
  getApiSeries,
  getApiSeriesUnits,
  getApiStats,
  getApiStatsById,
  getApiTblById,
  getApiTblDeserializePath,
  getApiTblSerializePath,
  getApiUnitProjectiles,
  getApiUnitProjectilesByUnitId,
  getApiUnits,
  getApiUnitsByUnitId,
  getApiUnitsByUnitIdPlayableCharacters,
  getApiUnitStats,
  getApiUnitStatsAmmoSlotByUnitId,
  getApiUnitStatsByUnitId,
  type Options,
  postApiAmmo,
  postApiAmmoByHash,
  postApiAmmoExport,
  postApiAmmoExportPath,
  postApiAmmoImport,
  postApiAssets,
  postApiAssetsByHash,
  postApiAssetsImport,
  postApiConfigs,
  postApiDebug,
  postApiFhmPack,
  postApiFhmPackAsset,
  postApiFhmUnpack,
  postApiFhmUnpackAsset,
  postApiHitboxes,
  postApiHitboxesByHash,
  postApiHitboxGroups,
  postApiHitboxGroupsByHash,
  postApiHitboxGroupsExport,
  postApiHitboxGroupsExportPath,
  postApiHitboxGroupsImport,
  postApiHitboxGroupsImportPath,
  postApiPatchFiles,
  postApiPatchFilesById,
  postApiPatchFilesResize,
  postApiProjectiles,
  postApiProjectilesByHash,
  postApiPsarcPackPatchFiles,
  postApiPsarcPackPath,
  postApiPsarcUnpackPatchFiles,
  postApiPsarcUnpackPath,
  postApiScexCompilePath,
  postApiScexCompileUnits,
  postApiScexDecompilePath,
  postApiScexDecompileUnits,
  postApiScexHotReloadPath,
  postApiSeries,
  postApiSeriesExport,
  postApiSeriesImport,
  postApiStats,
  postApiStatsById,
  postApiTblDeserialize,
  postApiTblExport,
  postApiTblImport,
  postApiTblSerialize,
  postApiUnitProjectilesExport,
  postApiUnitProjectilesExportPath,
  postApiUnitProjectilesImport,
  postApiUnitProjectilesImportPath,
  postApiUnits,
  postApiUnitsBulk,
  postApiUnitsByUnitId,
  postApiUnitsByUnitIdPlayableCharacters,
  postApiUnitsPlayableCharactersExport,
  postApiUnitsPlayableCharactersImport,
  postApiUnitStatsAmmoSlot,
  postApiUnitStatsAmmoSlotById,
  postApiUnitStatsExport,
  postApiUnitStatsExportPath,
  postApiUnitStatsImport,
} from "../sdk.gen";
import {
  type DefaultError,
  queryOptions,
  type UseMutationOptions,
} from "@tanstack/react-query";
import type {
  DeleteApiAmmoByHashData,
  DeleteApiAssetsByHashData,
  DeleteApiConfigsByKeyData,
  DeleteApiHitboxesByHashData,
  DeleteApiPatchFilesByIdData,
  DeleteApiProjectilesByHashData,
  DeleteApiStatsByIdData,
  DeleteApiUnitStatsAmmoSlotByIdData,
  GetApiAmmoByHashData,
  GetApiAmmoData,
  GetApiAssetsByHashData,
  GetApiAssetsData,
  GetApiConfigsByKeyData,
  GetApiConfigsData,
  GetApiFhmPackPathData,
  GetApiFhmUnpackPathData,
  GetApiHitboxesByHashData,
  GetApiHitboxesData,
  GetApiHitboxGroupsData,
  GetApiHitboxGroupsHashByHashData,
  GetApiHitboxGroupsUnitIdByUnitIdData,
  GetApiPatchFilesByIdData,
  GetApiPatchFilesData,
  GetApiPatchFilesSummaryData,
  GetApiProjectilesByHashData,
  GetApiProjectilesData,
  GetApiScexDecompiledByUnitIdData,
  GetApiSeriesData,
  GetApiSeriesUnitsData,
  GetApiStatsByIdData,
  GetApiStatsData,
  GetApiTblByIdData,
  GetApiTblDeserializePathData,
  GetApiTblSerializePathData,
  GetApiUnitProjectilesByUnitIdData,
  GetApiUnitProjectilesData,
  GetApiUnitsByUnitIdData,
  GetApiUnitsByUnitIdPlayableCharactersData,
  GetApiUnitsData,
  GetApiUnitStatsAmmoSlotByUnitIdData,
  GetApiUnitStatsByUnitIdData,
  GetApiUnitStatsData,
  PostApiAmmoByHashData,
  PostApiAmmoData,
  PostApiAmmoExportData,
  PostApiAmmoExportPathData,
  PostApiAmmoImportData,
  PostApiAssetsByHashData,
  PostApiAssetsData,
  PostApiAssetsImportData,
  PostApiConfigsData,
  PostApiDebugData,
  PostApiFhmPackAssetData,
  PostApiFhmPackData,
  PostApiFhmPackResponse,
  PostApiFhmUnpackAssetData,
  PostApiFhmUnpackData,
  PostApiFhmUnpackResponse,
  PostApiHitboxesByHashData,
  PostApiHitboxesData,
  PostApiHitboxGroupsByHashData,
  PostApiHitboxGroupsData,
  PostApiHitboxGroupsExportData,
  PostApiHitboxGroupsExportPathData,
  PostApiHitboxGroupsImportData,
  PostApiHitboxGroupsImportPathData,
  PostApiPatchFilesByIdData,
  PostApiPatchFilesData,
  PostApiPatchFilesResizeData,
  PostApiProjectilesByHashData,
  PostApiProjectilesData,
  PostApiPsarcPackPatchFilesData,
  PostApiPsarcPackPathData,
  PostApiPsarcUnpackPatchFilesData,
  PostApiPsarcUnpackPathData,
  PostApiScexCompilePathData,
  PostApiScexCompileUnitsData,
  PostApiScexDecompilePathData,
  PostApiScexDecompileUnitsData,
  PostApiScexHotReloadPathData,
  PostApiSeriesData,
  PostApiSeriesExportData,
  PostApiSeriesImportData,
  PostApiStatsByIdData,
  PostApiStatsData,
  PostApiTblDeserializeData,
  PostApiTblDeserializeResponse,
  PostApiTblExportData,
  PostApiTblImportData,
  PostApiTblSerializeData,
  PostApiUnitProjectilesExportData,
  PostApiUnitProjectilesExportPathData,
  PostApiUnitProjectilesImportData,
  PostApiUnitProjectilesImportPathData,
  PostApiUnitsBulkData,
  PostApiUnitsByUnitIdData,
  PostApiUnitsByUnitIdPlayableCharactersData,
  PostApiUnitsData,
  PostApiUnitsPlayableCharactersExportData,
  PostApiUnitsPlayableCharactersImportData,
  PostApiUnitStatsAmmoSlotByIdData,
  PostApiUnitStatsAmmoSlotData,
  PostApiUnitStatsAmmoSlotResponse,
  PostApiUnitStatsExportData,
  PostApiUnitStatsExportPathData,
  PostApiUnitStatsImportData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
    tags?: ReadonlyArray<string>;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getApiAmmoQueryKey = (options?: Options<GetApiAmmoData>) =>
  createQueryKey("getApiAmmo", options);

export const getApiAmmoOptions = (options?: Options<GetApiAmmoData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAmmo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAmmoQueryKey(options),
  });
};

export const postApiAmmoQueryKey = (options: Options<PostApiAmmoData>) =>
  createQueryKey("postApiAmmo", options);

export const postApiAmmoOptions = (options: Options<PostApiAmmoData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAmmo({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAmmoQueryKey(options),
  });
};

export const postApiAmmoMutation = (
  options?: Partial<Options<PostApiAmmoData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiAmmoData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiAmmoData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAmmo({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiAmmoByHashMutation = (
  options?: Partial<Options<DeleteApiAmmoByHashData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<DeleteApiAmmoByHashData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteApiAmmoByHashData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiAmmoByHash({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiAmmoByHashQueryKey = (
  options: Options<GetApiAmmoByHashData>,
) => createQueryKey("getApiAmmoByHash", options);

export const getApiAmmoByHashOptions = (
  options: Options<GetApiAmmoByHashData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAmmoByHash({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAmmoByHashQueryKey(options),
  });
};

export const postApiAmmoByHashQueryKey = (
  options: Options<PostApiAmmoByHashData>,
) => createQueryKey("postApiAmmoByHash", options);

export const postApiAmmoByHashOptions = (
  options: Options<PostApiAmmoByHashData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAmmoByHash({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAmmoByHashQueryKey(options),
  });
};

export const postApiAmmoByHashMutation = (
  options?: Partial<Options<PostApiAmmoByHashData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiAmmoByHashData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiAmmoByHashData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAmmoByHash({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAmmoImportQueryKey = (
  options: Options<PostApiAmmoImportData>,
) => createQueryKey("postApiAmmoImport", options);

export const postApiAmmoImportOptions = (
  options: Options<PostApiAmmoImportData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAmmoImport({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAmmoImportQueryKey(options),
  });
};

export const postApiAmmoImportMutation = (
  options?: Partial<Options<PostApiAmmoImportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiAmmoImportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiAmmoImportData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAmmoImport({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAmmoExportQueryKey = (
  options: Options<PostApiAmmoExportData>,
) => createQueryKey("postApiAmmoExport", options);

export const postApiAmmoExportOptions = (
  options: Options<PostApiAmmoExportData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAmmoExport({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAmmoExportQueryKey(options),
  });
};

export const postApiAmmoExportMutation = (
  options?: Partial<Options<PostApiAmmoExportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiAmmoExportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiAmmoExportData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAmmoExport({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAmmoExportPathQueryKey = (
  options: Options<PostApiAmmoExportPathData>,
) => createQueryKey("postApiAmmoExportPath", options);

export const postApiAmmoExportPathOptions = (
  options: Options<PostApiAmmoExportPathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAmmoExportPath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAmmoExportPathQueryKey(options),
  });
};

export const postApiAmmoExportPathMutation = (
  options?: Partial<Options<PostApiAmmoExportPathData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiAmmoExportPathData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiAmmoExportPathData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAmmoExportPath({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiConfigsQueryKey = (options: Options<GetApiConfigsData>) =>
  createQueryKey("getApiConfigs", options);

export const getApiConfigsOptions = (options: Options<GetApiConfigsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiConfigs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiConfigsQueryKey(options),
  });
};

export const postApiConfigsQueryKey = (options: Options<PostApiConfigsData>) =>
  createQueryKey("postApiConfigs", options);

export const postApiConfigsOptions = (options: Options<PostApiConfigsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiConfigs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiConfigsQueryKey(options),
  });
};

export const postApiConfigsMutation = (
  options?: Partial<Options<PostApiConfigsData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiConfigsData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiConfigsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiConfigs({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiConfigsByKeyMutation = (
  options?: Partial<Options<DeleteApiConfigsByKeyData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<DeleteApiConfigsByKeyData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteApiConfigsByKeyData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiConfigsByKey({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiConfigsByKeyQueryKey = (
  options: Options<GetApiConfigsByKeyData>,
) => createQueryKey("getApiConfigsByKey", options);

export const getApiConfigsByKeyOptions = (
  options: Options<GetApiConfigsByKeyData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiConfigsByKey({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiConfigsByKeyQueryKey(options),
  });
};

export const postApiDebugQueryKey = (options: Options<PostApiDebugData>) =>
  createQueryKey("postApiDebug", options);

export const postApiDebugOptions = (options: Options<PostApiDebugData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiDebug({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiDebugQueryKey(options),
  });
};

export const postApiDebugMutation = (
  options?: Partial<Options<PostApiDebugData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiDebugData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiDebugData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiDebug({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiFhmPackPathQueryKey = (
  options: Options<GetApiFhmPackPathData>,
) => createQueryKey("getApiFhmPackPath", options);

export const getApiFhmPackPathOptions = (
  options: Options<GetApiFhmPackPathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiFhmPackPath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiFhmPackPathQueryKey(options),
  });
};

export const getApiFhmUnpackPathQueryKey = (
  options: Options<GetApiFhmUnpackPathData>,
) => createQueryKey("getApiFhmUnpackPath", options);

export const getApiFhmUnpackPathOptions = (
  options: Options<GetApiFhmUnpackPathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiFhmUnpackPath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiFhmUnpackPathQueryKey(options),
  });
};

export const postApiFhmPackQueryKey = (options: Options<PostApiFhmPackData>) =>
  createQueryKey("postApiFhmPack", options);

export const postApiFhmPackOptions = (options: Options<PostApiFhmPackData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiFhmPack({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiFhmPackQueryKey(options),
  });
};

export const postApiFhmPackMutation = (
  options?: Partial<Options<PostApiFhmPackData>>,
): UseMutationOptions<
  PostApiFhmPackResponse,
  DefaultError,
  Options<PostApiFhmPackData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiFhmPackResponse,
    DefaultError,
    Options<PostApiFhmPackData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiFhmPack({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiFhmUnpackQueryKey = (
  options: Options<PostApiFhmUnpackData>,
) => createQueryKey("postApiFhmUnpack", options);

export const postApiFhmUnpackOptions = (
  options: Options<PostApiFhmUnpackData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiFhmUnpack({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiFhmUnpackQueryKey(options),
  });
};

export const postApiFhmUnpackMutation = (
  options?: Partial<Options<PostApiFhmUnpackData>>,
): UseMutationOptions<
  PostApiFhmUnpackResponse,
  DefaultError,
  Options<PostApiFhmUnpackData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiFhmUnpackResponse,
    DefaultError,
    Options<PostApiFhmUnpackData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiFhmUnpack({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiFhmPackAssetQueryKey = (
  options: Options<PostApiFhmPackAssetData>,
) => createQueryKey("postApiFhmPackAsset", options);

export const postApiFhmPackAssetOptions = (
  options: Options<PostApiFhmPackAssetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiFhmPackAsset({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiFhmPackAssetQueryKey(options),
  });
};

export const postApiFhmPackAssetMutation = (
  options?: Partial<Options<PostApiFhmPackAssetData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiFhmPackAssetData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiFhmPackAssetData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiFhmPackAsset({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiFhmUnpackAssetQueryKey = (
  options: Options<PostApiFhmUnpackAssetData>,
) => createQueryKey("postApiFhmUnpackAsset", options);

export const postApiFhmUnpackAssetOptions = (
  options: Options<PostApiFhmUnpackAssetData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiFhmUnpackAsset({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiFhmUnpackAssetQueryKey(options),
  });
};

export const postApiFhmUnpackAssetMutation = (
  options?: Partial<Options<PostApiFhmUnpackAssetData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiFhmUnpackAssetData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiFhmUnpackAssetData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiFhmUnpackAsset({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiPsarcPackPathQueryKey = (
  options: Options<PostApiPsarcPackPathData>,
) => createQueryKey("postApiPsarcPackPath", options);

export const postApiPsarcPackPathOptions = (
  options: Options<PostApiPsarcPackPathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiPsarcPackPath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiPsarcPackPathQueryKey(options),
  });
};

export const postApiPsarcPackPathMutation = (
  options?: Partial<Options<PostApiPsarcPackPathData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiPsarcPackPathData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiPsarcPackPathData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiPsarcPackPath({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiPsarcUnpackPathQueryKey = (
  options: Options<PostApiPsarcUnpackPathData>,
) => createQueryKey("postApiPsarcUnpackPath", options);

export const postApiPsarcUnpackPathOptions = (
  options: Options<PostApiPsarcUnpackPathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiPsarcUnpackPath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiPsarcUnpackPathQueryKey(options),
  });
};

export const postApiPsarcUnpackPathMutation = (
  options?: Partial<Options<PostApiPsarcUnpackPathData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiPsarcUnpackPathData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiPsarcUnpackPathData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiPsarcUnpackPath({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiPsarcPackPatchFilesQueryKey = (
  options: Options<PostApiPsarcPackPatchFilesData>,
) => createQueryKey("postApiPsarcPackPatchFiles", options);

export const postApiPsarcPackPatchFilesOptions = (
  options: Options<PostApiPsarcPackPatchFilesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiPsarcPackPatchFiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiPsarcPackPatchFilesQueryKey(options),
  });
};

export const postApiPsarcPackPatchFilesMutation = (
  options?: Partial<Options<PostApiPsarcPackPatchFilesData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiPsarcPackPatchFilesData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiPsarcPackPatchFilesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiPsarcPackPatchFiles({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiPsarcUnpackPatchFilesQueryKey = (
  options: Options<PostApiPsarcUnpackPatchFilesData>,
) => createQueryKey("postApiPsarcUnpackPatchFiles", options);

export const postApiPsarcUnpackPatchFilesOptions = (
  options: Options<PostApiPsarcUnpackPatchFilesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiPsarcUnpackPatchFiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiPsarcUnpackPatchFilesQueryKey(options),
  });
};

export const postApiPsarcUnpackPatchFilesMutation = (
  options?: Partial<Options<PostApiPsarcUnpackPatchFilesData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiPsarcUnpackPatchFilesData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiPsarcUnpackPatchFilesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiPsarcUnpackPatchFiles({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiScexDecompiledByUnitIdQueryKey = (
  options: Options<GetApiScexDecompiledByUnitIdData>,
) => createQueryKey("getApiScexDecompiledByUnitId", options);

export const getApiScexDecompiledByUnitIdOptions = (
  options: Options<GetApiScexDecompiledByUnitIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiScexDecompiledByUnitId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiScexDecompiledByUnitIdQueryKey(options),
  });
};

export const postApiScexCompilePathQueryKey = (
  options: Options<PostApiScexCompilePathData>,
) => createQueryKey("postApiScexCompilePath", options);

export const postApiScexCompilePathOptions = (
  options: Options<PostApiScexCompilePathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiScexCompilePath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiScexCompilePathQueryKey(options),
  });
};

export const postApiScexCompilePathMutation = (
  options?: Partial<Options<PostApiScexCompilePathData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiScexCompilePathData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiScexCompilePathData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiScexCompilePath({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiScexDecompilePathQueryKey = (
  options: Options<PostApiScexDecompilePathData>,
) => createQueryKey("postApiScexDecompilePath", options);

export const postApiScexDecompilePathOptions = (
  options: Options<PostApiScexDecompilePathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiScexDecompilePath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiScexDecompilePathQueryKey(options),
  });
};

export const postApiScexDecompilePathMutation = (
  options?: Partial<Options<PostApiScexDecompilePathData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiScexDecompilePathData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiScexDecompilePathData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiScexDecompilePath({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiScexHotReloadPathQueryKey = (
  options: Options<PostApiScexHotReloadPathData>,
) => createQueryKey("postApiScexHotReloadPath", options);

export const postApiScexHotReloadPathOptions = (
  options: Options<PostApiScexHotReloadPathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiScexHotReloadPath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiScexHotReloadPathQueryKey(options),
  });
};

export const postApiScexHotReloadPathMutation = (
  options?: Partial<Options<PostApiScexHotReloadPathData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiScexHotReloadPathData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiScexHotReloadPathData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiScexHotReloadPath({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiScexCompileUnitsQueryKey = (
  options: Options<PostApiScexCompileUnitsData>,
) => createQueryKey("postApiScexCompileUnits", options);

export const postApiScexCompileUnitsOptions = (
  options: Options<PostApiScexCompileUnitsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiScexCompileUnits({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiScexCompileUnitsQueryKey(options),
  });
};

export const postApiScexCompileUnitsMutation = (
  options?: Partial<Options<PostApiScexCompileUnitsData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiScexCompileUnitsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiScexCompileUnitsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiScexCompileUnits({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiScexDecompileUnitsQueryKey = (
  options: Options<PostApiScexDecompileUnitsData>,
) => createQueryKey("postApiScexDecompileUnits", options);

export const postApiScexDecompileUnitsOptions = (
  options: Options<PostApiScexDecompileUnitsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiScexDecompileUnits({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiScexDecompileUnitsQueryKey(options),
  });
};

export const postApiScexDecompileUnitsMutation = (
  options?: Partial<Options<PostApiScexDecompileUnitsData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiScexDecompileUnitsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiScexDecompileUnitsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiScexDecompileUnits({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUnitsQueryKey = (options?: Options<GetApiUnitsData>) =>
  createQueryKey("getApiUnits", options);

export const getApiUnitsOptions = (options?: Options<GetApiUnitsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUnits({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUnitsQueryKey(options),
  });
};

export const postApiUnitsQueryKey = (options: Options<PostApiUnitsData>) =>
  createQueryKey("postApiUnits", options);

export const postApiUnitsOptions = (options: Options<PostApiUnitsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUnits({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUnitsQueryKey(options),
  });
};

export const postApiUnitsMutation = (
  options?: Partial<Options<PostApiUnitsData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiUnitsData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUnits({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUnitsByUnitIdQueryKey = (
  options: Options<GetApiUnitsByUnitIdData>,
) => createQueryKey("getApiUnitsByUnitId", options);

export const getApiUnitsByUnitIdOptions = (
  options: Options<GetApiUnitsByUnitIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUnitsByUnitId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUnitsByUnitIdQueryKey(options),
  });
};

export const postApiUnitsByUnitIdQueryKey = (
  options: Options<PostApiUnitsByUnitIdData>,
) => createQueryKey("postApiUnitsByUnitId", options);

export const postApiUnitsByUnitIdOptions = (
  options: Options<PostApiUnitsByUnitIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUnitsByUnitId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUnitsByUnitIdQueryKey(options),
  });
};

export const postApiUnitsByUnitIdMutation = (
  options?: Partial<Options<PostApiUnitsByUnitIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiUnitsByUnitIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitsByUnitIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUnitsByUnitId({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUnitsByUnitIdPlayableCharactersQueryKey = (
  options: Options<GetApiUnitsByUnitIdPlayableCharactersData>,
) => createQueryKey("getApiUnitsByUnitIdPlayableCharacters", options);

export const getApiUnitsByUnitIdPlayableCharactersOptions = (
  options: Options<GetApiUnitsByUnitIdPlayableCharactersData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUnitsByUnitIdPlayableCharacters({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUnitsByUnitIdPlayableCharactersQueryKey(options),
  });
};

export const postApiUnitsByUnitIdPlayableCharactersQueryKey = (
  options: Options<PostApiUnitsByUnitIdPlayableCharactersData>,
) => createQueryKey("postApiUnitsByUnitIdPlayableCharacters", options);

export const postApiUnitsByUnitIdPlayableCharactersOptions = (
  options: Options<PostApiUnitsByUnitIdPlayableCharactersData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUnitsByUnitIdPlayableCharacters({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUnitsByUnitIdPlayableCharactersQueryKey(options),
  });
};

export const postApiUnitsByUnitIdPlayableCharactersMutation = (
  options?: Partial<Options<PostApiUnitsByUnitIdPlayableCharactersData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiUnitsByUnitIdPlayableCharactersData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitsByUnitIdPlayableCharactersData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUnitsByUnitIdPlayableCharacters({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUnitsBulkQueryKey = (
  options: Options<PostApiUnitsBulkData>,
) => createQueryKey("postApiUnitsBulk", options);

export const postApiUnitsBulkOptions = (
  options: Options<PostApiUnitsBulkData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUnitsBulk({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUnitsBulkQueryKey(options),
  });
};

export const postApiUnitsBulkMutation = (
  options?: Partial<Options<PostApiUnitsBulkData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiUnitsBulkData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitsBulkData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUnitsBulk({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUnitsPlayableCharactersImportQueryKey = (
  options: Options<PostApiUnitsPlayableCharactersImportData>,
) => createQueryKey("postApiUnitsPlayableCharactersImport", options);

export const postApiUnitsPlayableCharactersImportOptions = (
  options: Options<PostApiUnitsPlayableCharactersImportData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUnitsPlayableCharactersImport({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUnitsPlayableCharactersImportQueryKey(options),
  });
};

export const postApiUnitsPlayableCharactersImportMutation = (
  options?: Partial<Options<PostApiUnitsPlayableCharactersImportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiUnitsPlayableCharactersImportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitsPlayableCharactersImportData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUnitsPlayableCharactersImport({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUnitsPlayableCharactersExportQueryKey = (
  options: Options<PostApiUnitsPlayableCharactersExportData>,
) => createQueryKey("postApiUnitsPlayableCharactersExport", options);

export const postApiUnitsPlayableCharactersExportOptions = (
  options: Options<PostApiUnitsPlayableCharactersExportData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUnitsPlayableCharactersExport({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUnitsPlayableCharactersExportQueryKey(options),
  });
};

export const postApiUnitsPlayableCharactersExportMutation = (
  options?: Partial<Options<PostApiUnitsPlayableCharactersExportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiUnitsPlayableCharactersExportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitsPlayableCharactersExportData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUnitsPlayableCharactersExport({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiPatchFilesQueryKey = (
  options?: Options<GetApiPatchFilesData>,
) => createQueryKey("getApiPatchFiles", options);

export const getApiPatchFilesOptions = (
  options?: Options<GetApiPatchFilesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiPatchFiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiPatchFilesQueryKey(options),
  });
};

export const postApiPatchFilesQueryKey = (
  options: Options<PostApiPatchFilesData>,
) => createQueryKey("postApiPatchFiles", options);

export const postApiPatchFilesOptions = (
  options: Options<PostApiPatchFilesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiPatchFiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiPatchFilesQueryKey(options),
  });
};

export const postApiPatchFilesMutation = (
  options?: Partial<Options<PostApiPatchFilesData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiPatchFilesData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiPatchFilesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiPatchFiles({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiPatchFilesSummaryQueryKey = (
  options?: Options<GetApiPatchFilesSummaryData>,
) => createQueryKey("getApiPatchFilesSummary", options);

export const getApiPatchFilesSummaryOptions = (
  options?: Options<GetApiPatchFilesSummaryData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiPatchFilesSummary({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiPatchFilesSummaryQueryKey(options),
  });
};

export const deleteApiPatchFilesByIdMutation = (
  options?: Partial<Options<DeleteApiPatchFilesByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<DeleteApiPatchFilesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteApiPatchFilesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiPatchFilesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiPatchFilesByIdQueryKey = (
  options: Options<GetApiPatchFilesByIdData>,
) => createQueryKey("getApiPatchFilesById", options);

export const getApiPatchFilesByIdOptions = (
  options: Options<GetApiPatchFilesByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiPatchFilesById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiPatchFilesByIdQueryKey(options),
  });
};

export const postApiPatchFilesByIdQueryKey = (
  options: Options<PostApiPatchFilesByIdData>,
) => createQueryKey("postApiPatchFilesById", options);

export const postApiPatchFilesByIdOptions = (
  options: Options<PostApiPatchFilesByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiPatchFilesById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiPatchFilesByIdQueryKey(options),
  });
};

export const postApiPatchFilesByIdMutation = (
  options?: Partial<Options<PostApiPatchFilesByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiPatchFilesByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiPatchFilesByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiPatchFilesById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiPatchFilesResizeQueryKey = (
  options: Options<PostApiPatchFilesResizeData>,
) => createQueryKey("postApiPatchFilesResize", options);

export const postApiPatchFilesResizeOptions = (
  options: Options<PostApiPatchFilesResizeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiPatchFilesResize({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiPatchFilesResizeQueryKey(options),
  });
};

export const postApiPatchFilesResizeMutation = (
  options?: Partial<Options<PostApiPatchFilesResizeData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiPatchFilesResizeData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiPatchFilesResizeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiPatchFilesResize({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiTblDeserializePathQueryKey = (
  options: Options<GetApiTblDeserializePathData>,
) => createQueryKey("getApiTblDeserializePath", options);

export const getApiTblDeserializePathOptions = (
  options: Options<GetApiTblDeserializePathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiTblDeserializePath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiTblDeserializePathQueryKey(options),
  });
};

export const postApiTblDeserializeQueryKey = (
  options: Options<PostApiTblDeserializeData>,
) => createQueryKey("postApiTblDeserialize", options);

export const postApiTblDeserializeOptions = (
  options: Options<PostApiTblDeserializeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiTblDeserialize({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiTblDeserializeQueryKey(options),
  });
};

export const postApiTblDeserializeMutation = (
  options?: Partial<Options<PostApiTblDeserializeData>>,
): UseMutationOptions<
  PostApiTblDeserializeResponse,
  DefaultError,
  Options<PostApiTblDeserializeData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiTblDeserializeResponse,
    DefaultError,
    Options<PostApiTblDeserializeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiTblDeserialize({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiTblSerializePathQueryKey = (
  options: Options<GetApiTblSerializePathData>,
) => createQueryKey("getApiTblSerializePath", options);

export const getApiTblSerializePathOptions = (
  options: Options<GetApiTblSerializePathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiTblSerializePath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiTblSerializePathQueryKey(options),
  });
};

export const postApiTblSerializeQueryKey = (
  options: Options<PostApiTblSerializeData>,
) => createQueryKey("postApiTblSerialize", options);

export const postApiTblSerializeOptions = (
  options: Options<PostApiTblSerializeData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiTblSerialize({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiTblSerializeQueryKey(options),
  });
};

export const postApiTblSerializeMutation = (
  options?: Partial<Options<PostApiTblSerializeData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiTblSerializeData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiTblSerializeData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiTblSerialize({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiTblByIdQueryKey = (options: Options<GetApiTblByIdData>) =>
  createQueryKey("getApiTblById", options);

export const getApiTblByIdOptions = (options: Options<GetApiTblByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiTblById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiTblByIdQueryKey(options),
  });
};

export const postApiTblImportQueryKey = (
  options: Options<PostApiTblImportData>,
) => createQueryKey("postApiTblImport", options);

export const postApiTblImportOptions = (
  options: Options<PostApiTblImportData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiTblImport({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiTblImportQueryKey(options),
  });
};

export const postApiTblImportMutation = (
  options?: Partial<Options<PostApiTblImportData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiTblImportData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiTblImportData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiTblImport({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiTblExportQueryKey = (
  options: Options<PostApiTblExportData>,
) => createQueryKey("postApiTblExport", options);

export const postApiTblExportOptions = (
  options: Options<PostApiTblExportData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiTblExport({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiTblExportQueryKey(options),
  });
};

export const postApiTblExportMutation = (
  options?: Partial<Options<PostApiTblExportData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiTblExportData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiTblExportData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiTblExport({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiStatsQueryKey = (options?: Options<GetApiStatsData>) =>
  createQueryKey("getApiStats", options);

export const getApiStatsOptions = (options?: Options<GetApiStatsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiStats({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiStatsQueryKey(options),
  });
};

export const postApiStatsQueryKey = (options: Options<PostApiStatsData>) =>
  createQueryKey("postApiStats", options);

export const postApiStatsOptions = (options: Options<PostApiStatsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiStats({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiStatsQueryKey(options),
  });
};

export const postApiStatsMutation = (
  options?: Partial<Options<PostApiStatsData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiStatsData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiStatsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiStats({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiStatsByIdMutation = (
  options?: Partial<Options<DeleteApiStatsByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<DeleteApiStatsByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteApiStatsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiStatsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiStatsByIdQueryKey = (
  options: Options<GetApiStatsByIdData>,
) => createQueryKey("getApiStatsById", options);

export const getApiStatsByIdOptions = (
  options: Options<GetApiStatsByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiStatsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiStatsByIdQueryKey(options),
  });
};

export const postApiStatsByIdQueryKey = (
  options: Options<PostApiStatsByIdData>,
) => createQueryKey("postApiStatsById", options);

export const postApiStatsByIdOptions = (
  options: Options<PostApiStatsByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiStatsById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiStatsByIdQueryKey(options),
  });
};

export const postApiStatsByIdMutation = (
  options?: Partial<Options<PostApiStatsByIdData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiStatsByIdData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiStatsByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiStatsById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUnitStatsQueryKey = (
  options?: Options<GetApiUnitStatsData>,
) => createQueryKey("getApiUnitStats", options);

export const getApiUnitStatsOptions = (
  options?: Options<GetApiUnitStatsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUnitStats({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUnitStatsQueryKey(options),
  });
};

export const getApiUnitStatsByUnitIdQueryKey = (
  options: Options<GetApiUnitStatsByUnitIdData>,
) => createQueryKey("getApiUnitStatsByUnitId", options);

export const getApiUnitStatsByUnitIdOptions = (
  options: Options<GetApiUnitStatsByUnitIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUnitStatsByUnitId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUnitStatsByUnitIdQueryKey(options),
  });
};

export const postApiUnitStatsImportQueryKey = (
  options: Options<PostApiUnitStatsImportData>,
) => createQueryKey("postApiUnitStatsImport", options);

export const postApiUnitStatsImportOptions = (
  options: Options<PostApiUnitStatsImportData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUnitStatsImport({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUnitStatsImportQueryKey(options),
  });
};

export const postApiUnitStatsImportMutation = (
  options?: Partial<Options<PostApiUnitStatsImportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiUnitStatsImportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitStatsImportData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUnitStatsImport({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUnitStatsExportQueryKey = (
  options: Options<PostApiUnitStatsExportData>,
) => createQueryKey("postApiUnitStatsExport", options);

export const postApiUnitStatsExportOptions = (
  options: Options<PostApiUnitStatsExportData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUnitStatsExport({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUnitStatsExportQueryKey(options),
  });
};

export const postApiUnitStatsExportMutation = (
  options?: Partial<Options<PostApiUnitStatsExportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiUnitStatsExportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitStatsExportData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUnitStatsExport({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUnitStatsExportPathQueryKey = (
  options: Options<PostApiUnitStatsExportPathData>,
) => createQueryKey("postApiUnitStatsExportPath", options);

export const postApiUnitStatsExportPathOptions = (
  options: Options<PostApiUnitStatsExportPathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUnitStatsExportPath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUnitStatsExportPathQueryKey(options),
  });
};

export const postApiUnitStatsExportPathMutation = (
  options?: Partial<Options<PostApiUnitStatsExportPathData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiUnitStatsExportPathData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitStatsExportPathData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUnitStatsExportPath({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUnitStatsAmmoSlotByUnitIdQueryKey = (
  options: Options<GetApiUnitStatsAmmoSlotByUnitIdData>,
) => createQueryKey("getApiUnitStatsAmmoSlotByUnitId", options);

export const getApiUnitStatsAmmoSlotByUnitIdOptions = (
  options: Options<GetApiUnitStatsAmmoSlotByUnitIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUnitStatsAmmoSlotByUnitId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUnitStatsAmmoSlotByUnitIdQueryKey(options),
  });
};

export const postApiUnitStatsAmmoSlotQueryKey = (
  options: Options<PostApiUnitStatsAmmoSlotData>,
) => createQueryKey("postApiUnitStatsAmmoSlot", options);

export const postApiUnitStatsAmmoSlotOptions = (
  options: Options<PostApiUnitStatsAmmoSlotData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUnitStatsAmmoSlot({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUnitStatsAmmoSlotQueryKey(options),
  });
};

export const postApiUnitStatsAmmoSlotMutation = (
  options?: Partial<Options<PostApiUnitStatsAmmoSlotData>>,
): UseMutationOptions<
  PostApiUnitStatsAmmoSlotResponse,
  DefaultError,
  Options<PostApiUnitStatsAmmoSlotData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiUnitStatsAmmoSlotResponse,
    DefaultError,
    Options<PostApiUnitStatsAmmoSlotData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUnitStatsAmmoSlot({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiUnitStatsAmmoSlotByIdMutation = (
  options?: Partial<Options<DeleteApiUnitStatsAmmoSlotByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<DeleteApiUnitStatsAmmoSlotByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteApiUnitStatsAmmoSlotByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiUnitStatsAmmoSlotById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUnitStatsAmmoSlotByIdQueryKey = (
  options: Options<PostApiUnitStatsAmmoSlotByIdData>,
) => createQueryKey("postApiUnitStatsAmmoSlotById", options);

export const postApiUnitStatsAmmoSlotByIdOptions = (
  options: Options<PostApiUnitStatsAmmoSlotByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUnitStatsAmmoSlotById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUnitStatsAmmoSlotByIdQueryKey(options),
  });
};

export const postApiUnitStatsAmmoSlotByIdMutation = (
  options?: Partial<Options<PostApiUnitStatsAmmoSlotByIdData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiUnitStatsAmmoSlotByIdData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitStatsAmmoSlotByIdData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUnitStatsAmmoSlotById({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiSeriesQueryKey = (options?: Options<GetApiSeriesData>) =>
  createQueryKey("getApiSeries", options);

export const getApiSeriesOptions = (options?: Options<GetApiSeriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiSeries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiSeriesQueryKey(options),
  });
};

export const postApiSeriesQueryKey = (options: Options<PostApiSeriesData>) =>
  createQueryKey("postApiSeries", options);

export const postApiSeriesOptions = (options: Options<PostApiSeriesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiSeries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiSeriesQueryKey(options),
  });
};

export const postApiSeriesMutation = (
  options?: Partial<Options<PostApiSeriesData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiSeriesData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiSeriesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiSeries({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiSeriesUnitsQueryKey = (
  options?: Options<GetApiSeriesUnitsData>,
) => createQueryKey("getApiSeriesUnits", options);

export const getApiSeriesUnitsOptions = (
  options?: Options<GetApiSeriesUnitsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiSeriesUnits({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiSeriesUnitsQueryKey(options),
  });
};

export const postApiSeriesImportQueryKey = (
  options: Options<PostApiSeriesImportData>,
) => createQueryKey("postApiSeriesImport", options);

export const postApiSeriesImportOptions = (
  options: Options<PostApiSeriesImportData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiSeriesImport({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiSeriesImportQueryKey(options),
  });
};

export const postApiSeriesImportMutation = (
  options?: Partial<Options<PostApiSeriesImportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiSeriesImportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiSeriesImportData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiSeriesImport({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiSeriesExportQueryKey = (
  options: Options<PostApiSeriesExportData>,
) => createQueryKey("postApiSeriesExport", options);

export const postApiSeriesExportOptions = (
  options: Options<PostApiSeriesExportData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiSeriesExport({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiSeriesExportQueryKey(options),
  });
};

export const postApiSeriesExportMutation = (
  options?: Partial<Options<PostApiSeriesExportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiSeriesExportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiSeriesExportData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiSeriesExport({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiProjectilesQueryKey = (
  options?: Options<GetApiProjectilesData>,
) => createQueryKey("getApiProjectiles", options);

export const getApiProjectilesOptions = (
  options?: Options<GetApiProjectilesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiProjectiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiProjectilesQueryKey(options),
  });
};

export const postApiProjectilesQueryKey = (
  options: Options<PostApiProjectilesData>,
) => createQueryKey("postApiProjectiles", options);

export const postApiProjectilesOptions = (
  options: Options<PostApiProjectilesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiProjectiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiProjectilesQueryKey(options),
  });
};

export const postApiProjectilesMutation = (
  options?: Partial<Options<PostApiProjectilesData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiProjectilesData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiProjectilesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiProjectiles({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiProjectilesByHashMutation = (
  options?: Partial<Options<DeleteApiProjectilesByHashData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<DeleteApiProjectilesByHashData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteApiProjectilesByHashData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiProjectilesByHash({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiProjectilesByHashQueryKey = (
  options: Options<GetApiProjectilesByHashData>,
) => createQueryKey("getApiProjectilesByHash", options);

export const getApiProjectilesByHashOptions = (
  options: Options<GetApiProjectilesByHashData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiProjectilesByHash({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiProjectilesByHashQueryKey(options),
  });
};

export const postApiProjectilesByHashQueryKey = (
  options: Options<PostApiProjectilesByHashData>,
) => createQueryKey("postApiProjectilesByHash", options);

export const postApiProjectilesByHashOptions = (
  options: Options<PostApiProjectilesByHashData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiProjectilesByHash({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiProjectilesByHashQueryKey(options),
  });
};

export const postApiProjectilesByHashMutation = (
  options?: Partial<Options<PostApiProjectilesByHashData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiProjectilesByHashData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiProjectilesByHashData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiProjectilesByHash({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiUnitProjectilesQueryKey = (
  options?: Options<GetApiUnitProjectilesData>,
) => createQueryKey("getApiUnitProjectiles", options);

export const getApiUnitProjectilesOptions = (
  options?: Options<GetApiUnitProjectilesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUnitProjectiles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUnitProjectilesQueryKey(options),
  });
};

export const getApiUnitProjectilesByUnitIdQueryKey = (
  options: Options<GetApiUnitProjectilesByUnitIdData>,
) => createQueryKey("getApiUnitProjectilesByUnitId", options);

export const getApiUnitProjectilesByUnitIdOptions = (
  options: Options<GetApiUnitProjectilesByUnitIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiUnitProjectilesByUnitId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiUnitProjectilesByUnitIdQueryKey(options),
  });
};

export const postApiUnitProjectilesImportQueryKey = (
  options: Options<PostApiUnitProjectilesImportData>,
) => createQueryKey("postApiUnitProjectilesImport", options);

export const postApiUnitProjectilesImportOptions = (
  options: Options<PostApiUnitProjectilesImportData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUnitProjectilesImport({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUnitProjectilesImportQueryKey(options),
  });
};

export const postApiUnitProjectilesImportMutation = (
  options?: Partial<Options<PostApiUnitProjectilesImportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiUnitProjectilesImportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitProjectilesImportData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUnitProjectilesImport({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUnitProjectilesImportPathQueryKey = (
  options: Options<PostApiUnitProjectilesImportPathData>,
) => createQueryKey("postApiUnitProjectilesImportPath", options);

export const postApiUnitProjectilesImportPathOptions = (
  options: Options<PostApiUnitProjectilesImportPathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUnitProjectilesImportPath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUnitProjectilesImportPathQueryKey(options),
  });
};

export const postApiUnitProjectilesImportPathMutation = (
  options?: Partial<Options<PostApiUnitProjectilesImportPathData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiUnitProjectilesImportPathData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitProjectilesImportPathData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUnitProjectilesImportPath({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUnitProjectilesExportQueryKey = (
  options: Options<PostApiUnitProjectilesExportData>,
) => createQueryKey("postApiUnitProjectilesExport", options);

export const postApiUnitProjectilesExportOptions = (
  options: Options<PostApiUnitProjectilesExportData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUnitProjectilesExport({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUnitProjectilesExportQueryKey(options),
  });
};

export const postApiUnitProjectilesExportMutation = (
  options?: Partial<Options<PostApiUnitProjectilesExportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiUnitProjectilesExportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitProjectilesExportData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUnitProjectilesExport({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiUnitProjectilesExportPathQueryKey = (
  options: Options<PostApiUnitProjectilesExportPathData>,
) => createQueryKey("postApiUnitProjectilesExportPath", options);

export const postApiUnitProjectilesExportPathOptions = (
  options: Options<PostApiUnitProjectilesExportPathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiUnitProjectilesExportPath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiUnitProjectilesExportPathQueryKey(options),
  });
};

export const postApiUnitProjectilesExportPathMutation = (
  options?: Partial<Options<PostApiUnitProjectilesExportPathData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiUnitProjectilesExportPathData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiUnitProjectilesExportPathData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiUnitProjectilesExportPath({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiHitboxesQueryKey = (options?: Options<GetApiHitboxesData>) =>
  createQueryKey("getApiHitboxes", options);

export const getApiHitboxesOptions = (
  options?: Options<GetApiHitboxesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiHitboxes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiHitboxesQueryKey(options),
  });
};

export const postApiHitboxesQueryKey = (
  options: Options<PostApiHitboxesData>,
) => createQueryKey("postApiHitboxes", options);

export const postApiHitboxesOptions = (
  options: Options<PostApiHitboxesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiHitboxes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiHitboxesQueryKey(options),
  });
};

export const postApiHitboxesMutation = (
  options?: Partial<Options<PostApiHitboxesData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiHitboxesData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiHitboxesData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiHitboxes({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiHitboxesByHashMutation = (
  options?: Partial<Options<DeleteApiHitboxesByHashData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<DeleteApiHitboxesByHashData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteApiHitboxesByHashData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiHitboxesByHash({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiHitboxesByHashQueryKey = (
  options: Options<GetApiHitboxesByHashData>,
) => createQueryKey("getApiHitboxesByHash", options);

export const getApiHitboxesByHashOptions = (
  options: Options<GetApiHitboxesByHashData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiHitboxesByHash({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiHitboxesByHashQueryKey(options),
  });
};

export const postApiHitboxesByHashQueryKey = (
  options: Options<PostApiHitboxesByHashData>,
) => createQueryKey("postApiHitboxesByHash", options);

export const postApiHitboxesByHashOptions = (
  options: Options<PostApiHitboxesByHashData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiHitboxesByHash({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiHitboxesByHashQueryKey(options),
  });
};

export const postApiHitboxesByHashMutation = (
  options?: Partial<Options<PostApiHitboxesByHashData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiHitboxesByHashData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiHitboxesByHashData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiHitboxesByHash({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiHitboxGroupsQueryKey = (
  options?: Options<GetApiHitboxGroupsData>,
) => createQueryKey("getApiHitboxGroups", options);

export const getApiHitboxGroupsOptions = (
  options?: Options<GetApiHitboxGroupsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiHitboxGroups({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiHitboxGroupsQueryKey(options),
  });
};

export const postApiHitboxGroupsQueryKey = (
  options: Options<PostApiHitboxGroupsData>,
) => createQueryKey("postApiHitboxGroups", options);

export const postApiHitboxGroupsOptions = (
  options: Options<PostApiHitboxGroupsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiHitboxGroups({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiHitboxGroupsQueryKey(options),
  });
};

export const postApiHitboxGroupsMutation = (
  options?: Partial<Options<PostApiHitboxGroupsData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiHitboxGroupsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiHitboxGroupsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiHitboxGroups({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiHitboxGroupsHashByHashQueryKey = (
  options: Options<GetApiHitboxGroupsHashByHashData>,
) => createQueryKey("getApiHitboxGroupsHashByHash", options);

export const getApiHitboxGroupsHashByHashOptions = (
  options: Options<GetApiHitboxGroupsHashByHashData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiHitboxGroupsHashByHash({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiHitboxGroupsHashByHashQueryKey(options),
  });
};

export const getApiHitboxGroupsUnitIdByUnitIdQueryKey = (
  options: Options<GetApiHitboxGroupsUnitIdByUnitIdData>,
) => createQueryKey("getApiHitboxGroupsUnitIdByUnitId", options);

export const getApiHitboxGroupsUnitIdByUnitIdOptions = (
  options: Options<GetApiHitboxGroupsUnitIdByUnitIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiHitboxGroupsUnitIdByUnitId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiHitboxGroupsUnitIdByUnitIdQueryKey(options),
  });
};

export const postApiHitboxGroupsByHashQueryKey = (
  options: Options<PostApiHitboxGroupsByHashData>,
) => createQueryKey("postApiHitboxGroupsByHash", options);

export const postApiHitboxGroupsByHashOptions = (
  options: Options<PostApiHitboxGroupsByHashData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiHitboxGroupsByHash({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiHitboxGroupsByHashQueryKey(options),
  });
};

export const postApiHitboxGroupsByHashMutation = (
  options?: Partial<Options<PostApiHitboxGroupsByHashData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiHitboxGroupsByHashData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiHitboxGroupsByHashData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiHitboxGroupsByHash({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiHitboxGroupsImportQueryKey = (
  options: Options<PostApiHitboxGroupsImportData>,
) => createQueryKey("postApiHitboxGroupsImport", options);

export const postApiHitboxGroupsImportOptions = (
  options: Options<PostApiHitboxGroupsImportData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiHitboxGroupsImport({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiHitboxGroupsImportQueryKey(options),
  });
};

export const postApiHitboxGroupsImportMutation = (
  options?: Partial<Options<PostApiHitboxGroupsImportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiHitboxGroupsImportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiHitboxGroupsImportData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiHitboxGroupsImport({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiHitboxGroupsImportPathQueryKey = (
  options: Options<PostApiHitboxGroupsImportPathData>,
) => createQueryKey("postApiHitboxGroupsImportPath", options);

export const postApiHitboxGroupsImportPathOptions = (
  options: Options<PostApiHitboxGroupsImportPathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiHitboxGroupsImportPath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiHitboxGroupsImportPathQueryKey(options),
  });
};

export const postApiHitboxGroupsImportPathMutation = (
  options?: Partial<Options<PostApiHitboxGroupsImportPathData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiHitboxGroupsImportPathData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiHitboxGroupsImportPathData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiHitboxGroupsImportPath({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiHitboxGroupsExportQueryKey = (
  options: Options<PostApiHitboxGroupsExportData>,
) => createQueryKey("postApiHitboxGroupsExport", options);

export const postApiHitboxGroupsExportOptions = (
  options: Options<PostApiHitboxGroupsExportData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiHitboxGroupsExport({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiHitboxGroupsExportQueryKey(options),
  });
};

export const postApiHitboxGroupsExportMutation = (
  options?: Partial<Options<PostApiHitboxGroupsExportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiHitboxGroupsExportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiHitboxGroupsExportData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiHitboxGroupsExport({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiHitboxGroupsExportPathQueryKey = (
  options: Options<PostApiHitboxGroupsExportPathData>,
) => createQueryKey("postApiHitboxGroupsExportPath", options);

export const postApiHitboxGroupsExportPathOptions = (
  options: Options<PostApiHitboxGroupsExportPathData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiHitboxGroupsExportPath({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiHitboxGroupsExportPathQueryKey(options),
  });
};

export const postApiHitboxGroupsExportPathMutation = (
  options?: Partial<Options<PostApiHitboxGroupsExportPathData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiHitboxGroupsExportPathData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiHitboxGroupsExportPathData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiHitboxGroupsExportPath({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiAssetsQueryKey = (options?: Options<GetApiAssetsData>) =>
  createQueryKey("getApiAssets", options);

export const getApiAssetsOptions = (options?: Options<GetApiAssetsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAssets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAssetsQueryKey(options),
  });
};

export const postApiAssetsQueryKey = (options: Options<PostApiAssetsData>) =>
  createQueryKey("postApiAssets", options);

export const postApiAssetsOptions = (options: Options<PostApiAssetsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAssets({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAssetsQueryKey(options),
  });
};

export const postApiAssetsMutation = (
  options?: Partial<Options<PostApiAssetsData>>,
): UseMutationOptions<unknown, DefaultError, Options<PostApiAssetsData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiAssetsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAssets({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiAssetsByHashMutation = (
  options?: Partial<Options<DeleteApiAssetsByHashData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<DeleteApiAssetsByHashData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<DeleteApiAssetsByHashData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiAssetsByHash({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiAssetsByHashQueryKey = (
  options: Options<GetApiAssetsByHashData>,
) => createQueryKey("getApiAssetsByHash", options);

export const getApiAssetsByHashOptions = (
  options: Options<GetApiAssetsByHashData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiAssetsByHash({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiAssetsByHashQueryKey(options),
  });
};

export const postApiAssetsByHashQueryKey = (
  options: Options<PostApiAssetsByHashData>,
) => createQueryKey("postApiAssetsByHash", options);

export const postApiAssetsByHashOptions = (
  options: Options<PostApiAssetsByHashData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAssetsByHash({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAssetsByHashQueryKey(options),
  });
};

export const postApiAssetsByHashMutation = (
  options?: Partial<Options<PostApiAssetsByHashData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiAssetsByHashData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiAssetsByHashData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAssetsByHash({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiAssetsImportQueryKey = (
  options: Options<PostApiAssetsImportData>,
) => createQueryKey("postApiAssetsImport", options);

export const postApiAssetsImportOptions = (
  options: Options<PostApiAssetsImportData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiAssetsImport({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiAssetsImportQueryKey(options),
  });
};

export const postApiAssetsImportMutation = (
  options?: Partial<Options<PostApiAssetsImportData>>,
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<PostApiAssetsImportData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<PostApiAssetsImportData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiAssetsImport({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
