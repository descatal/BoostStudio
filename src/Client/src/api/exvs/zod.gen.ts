// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod";

export const zAmmoDto = z.object({
  hash: z.optional(
    z.union([z.coerce.bigint(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  ammoType: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  maxAmmo: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  initialAmmo: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  timedDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk16: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  reloadType: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  cooldownDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reloadDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  assaultBurstReloadDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  blastBurstReloadDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk40: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk44: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  inactiveUnk48: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inactiveCooldownDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inactiveReloadDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inactiveAssaultBurstReloadDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inactiveBlastBurstReloadDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inactiveUnk68: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inactiveUnk72: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  burstReplenish: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk80: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk84: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk88: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  chargeInput: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  chargeDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  assaultBurstChargeDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  blastBurstChargeDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk108: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk112: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  releaseChargeLingerDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  maxChargeLevel: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk124: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  chargeMultiLockFlag: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  order: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unitId: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zAssetFileType = z.enum([
  "Unknown",
  "Dummy",
  "Animations",
  "ModelAndTexture",
  "Data",
  "Effects",
  "SoundEffects",
  "InGamePilotVoiceLines",
  "SpriteFrames",
  "WeaponSprites",
  "VoiceLinesMetadata",
  "PilotVoiceLines",
  "ArcadeSelectionCostume1Sprite",
  "ArcadeSelectionCostume2Sprite",
  "ArcadeSelectionCostume3Sprite",
  "LoadingLeftCostume1Sprite",
  "LoadingLeftCostume2Sprite",
  "LoadingLeftCostume3Sprite",
  "LoadingRightCostume1Sprite",
  "LoadingRightCostume2Sprite",
  "LoadingRightCostume3Sprite",
  "GenericSelectionCostume1Sprite",
  "GenericSelectionCostume2Sprite",
  "GenericSelectionCostume3Sprite",
  "LoadingTargetUnitSprite",
  "LoadingTargetPilotCostume1Sprite",
  "LoadingTargetPilotCostume2Sprite",
  "LoadingTargetPilotCostume3Sprite",
  "InGameSortieAndAwakeningPilotCostume1Sprite",
  "InGameSortieAndAwakeningPilotCostume2Sprite",
  "InGameSortieAndAwakeningPilotCostume3Sprite",
  "ResultSmallUnitSprite",
  "FigurineSprite",
  "LoadingTargetUnitSmallSprite",
  "CatalogStorePilotCostume2Sprite",
  "CatalogStorePilotCostume3Sprite",
  "Movie",
  "Hitboxes",
  "Projectiles",
  "Ammo",
  "ListInfo",
  "UnitCostInfo",
  "SharedFigurineSprites",
  "MapSelectSprites",
  "ArcadeSelectSmallSprites",
  "ArcadeSelectUnitNameSprites",
  "CameraConfigs",
  "CommonEffects",
  "CommonEffectParticles",
  "CosmeticInfo",
  "TextStrings",
  "SeriesLogoSprites",
  "SeriesLogoSprites2",
]);

export const zSeriesVm = z.union([
  z.null(),
  z.object({
    id: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
    slugName: z.optional(z.string()),
    nameEnglish: z.optional(z.union([z.null(), z.string()])),
    nameJapanese: z.optional(z.union([z.null(), z.string()])),
    nameChinese: z.optional(z.union([z.null(), z.string()])),
  }),
]);

export const zUnitSummaryVm = z.object({
  unitId: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  slugName: z.optional(z.union([z.null(), z.string()])),
  nameEnglish: z.optional(z.union([z.null(), z.string()])),
  nameJapanese: z.optional(z.union([z.null(), z.string()])),
  nameChinese: z.optional(z.union([z.null(), z.string()])),
  seriesId: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  series: z.optional(zSeriesVm),
});

export const zAssetFileDto = z.union([
  z.null(),
  z.object({
    hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    order: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    fileType: z.array(zAssetFileType),
    units: z.array(zUnitSummaryVm),
  }),
]);

export const zAssetFileVm = z.object({
  hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  order: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  fileType: z.optional(z.array(zAssetFileType)),
  unitIds: z.optional(
    z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  ),
});

export const zBulkCreateUnitCommand = z.object({
  units: z.array(zUnitSummaryVm),
});

export const zCompileScexByPathCommand = z.object({
  sourcePath: z.string(),
  destinationPath: z.string(),
  fileName: z.optional(z.union([z.null(), z.string()])),
  hotReload: z.optional(z.boolean()).default(true),
});

export const zCompileScexByUnitsCommand = z.object({
  unitIds: z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  replaceWorking: z.optional(z.boolean()).default(false),
  hotReload: z.optional(z.boolean()).default(false),
});

export const zCompressionFormats = z.enum(["Zip", "Tar"]);

export const zConfigDto = z.object({
  key: z.string(),
  value: z.string(),
});

export const zCreateAmmoCommand = z.object({
  ammoType: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  maxAmmo: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  initialAmmo: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  timedDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk16: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  reloadType: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  cooldownDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reloadDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  assaultBurstReloadDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  blastBurstReloadDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk40: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk44: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  inactiveUnk48: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inactiveCooldownDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inactiveReloadDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inactiveAssaultBurstReloadDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inactiveBlastBurstReloadDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inactiveUnk68: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inactiveUnk72: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  burstReplenish: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk80: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk84: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk88: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  chargeInput: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  chargeDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  assaultBurstChargeDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  blastBurstChargeDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk108: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk112: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  releaseChargeLingerDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  maxChargeLevel: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk124: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  chargeMultiLockFlag: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  order: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unitId: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zCreateAssetFileCommand = z.object({
  order: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  fileType: z.optional(z.array(zAssetFileType)),
  unitIds: z.optional(
    z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  ),
});

export const zCreateHitboxCommand = z.object({
  hitboxType: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  damage: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk8: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  downValueThreshold: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  yorukeValueThreshold: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk20: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk24: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  damageCorrection: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  specialEffect: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  hitEffect: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  flyDirection1: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  flyDirection2: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  flyDirection3: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  enemyCameraShakeMultiplier: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  playerCameraShakeMultiplier: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk56: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  knockUpAngle: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  knockUpRange: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk68: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  multipleHitIntervalFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  multipleHitCount: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  enemyStunDuration: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  playerStunDuration: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  hitVisualEffect: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  hitVisualEffectSizeMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  hitSoundEffectHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk100: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  friendlyDamageFlag: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk108: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  hitboxGroupHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zCreateHitboxGroupCommand = z.object({
  hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  unitIds: z.optional(
    z.union([
      z.null(),
      z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
    ]),
  ),
});

export const zPatchFileVersion = z.enum([
  "Base",
  "Patch1",
  "Patch2",
  "Patch3",
  "Patch4",
  "Patch5",
  "Patch6",
]);

export const zPathInfoDto = z.union([
  z.null(),
  z.object({
    path: z.string(),
    order: z.optional(
      z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    ),
  }),
]);

export const zFileInfoDto = z.union([
  z.null(),
  z.object({
    version: zPatchFileVersion,
    size1: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    size2: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    size3: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    size4: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
]);

export const zCreatePatchFileCommand = z.object({
  tblId: zPatchFileVersion,
  pathInfo: z.optional(zPathInfoDto),
  fileInfo: z.optional(zFileInfoDto),
  assetFileHash: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zCreateProjectileCommand = z.object({
  projectileType: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  hitboxHash: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  modelHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  skeletonIndex: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  aimType: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  translateY: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  translateZ: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  translateX: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  rotateX: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  rotateZ: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  cosmeticHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk44: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk48: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk52: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk56: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  ammoConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  durationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  maxTravelDistance: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  initialSpeed: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  acceleration: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  accelerationStartFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk84: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  maxSpeed: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved92: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved96: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved100: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved104: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved108: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved112: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved116: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  horizontalGuidance: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  horizontalGuidanceAngle: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  verticalGuidance: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  verticalGuidanceAngle: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved136: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved140: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved144: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved148: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved152: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved156: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved160: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved164: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved168: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved172: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  size: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved180: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved184: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  soundEffectHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved192: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved196: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  chainedProjectileHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved204: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved208: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved212: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved216: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved220: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved224: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved228: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved232: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved236: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved240: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved244: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved248: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved252: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved256: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved260: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved264: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved268: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved272: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved276: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unitId: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zPlayableSeriesDetailsDto = z.union([
  z.null(),
  z.object({
    unk2: z.optional(
      z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    ),
    unk3: z.optional(
      z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    ),
    unk4: z.optional(
      z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    ),
    selectOrder: z.optional(
      z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    ),
    logoSpriteIndex: z.optional(
      z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    ),
    logoSprite2Index: z.optional(
      z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    ),
    unk11: z.optional(
      z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    ),
    movieAssetHash: z.optional(
      z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    ),
  }),
]);

export const zCreateSeriesCommand = z.object({
  id: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  playableSeries: z.optional(zPlayableSeriesDetailsDto),
  slugName: z.optional(z.string()),
  nameEnglish: z.optional(z.union([z.null(), z.string()])),
  nameJapanese: z.optional(z.union([z.null(), z.string()])),
  nameChinese: z.optional(z.union([z.null(), z.string()])),
});

export const zCreateStatCommand = z.object({
  unitCost: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unitCost2: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  maxHp: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  downValueThreshold: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  yorukeValueThreshold: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk20: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk24: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk28: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  maxBoost: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk36: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk40: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk44: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  gravityMultiplierAir: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  gravityMultiplierLand: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk56: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk60: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk64: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk68: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk72: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk76: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk80: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  cameraZoomMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk88: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk92: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk96: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk100: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk104: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk108: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  sizeMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk116: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk120: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk124: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk128: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk132: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk136: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk140: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk144: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk148: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk152: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk156: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk160: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk164: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk168: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk172: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk176: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk180: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk184: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  redLockRangeMelee: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  redLockRange: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk196: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk200: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk204: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk208: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostReplenish: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk216: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostFuwaInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostFlyConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostGroundStepInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostGroundStepConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostAirStepInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostAirStepConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostBdInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostBdConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk256: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk260: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk264: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk268: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostTransformInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostTransformConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostNonVernierActionConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostPostActionConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostRainbowStepInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk292: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk296: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk300: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk304: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk308: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk312: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk316: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk320: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk324: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk328: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk332: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  assaultBurstRedLockMelee: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstRedLock: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstDamageDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstDamageTakenMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstMobilityMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstDownValueDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstBoostConsumptionMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk364: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk368: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  assaultBurstDamageDealtBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstDamageTakenBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk380: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk384: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk388: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk392: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk396: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstRedLockMelee: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstRedLock: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstDamageDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstDamageTakenMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstMobilityMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstDownValueDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstBoostConsumptionMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk428: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk432: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  blastBurstDamageDealtBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstDamageTakenBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk444: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk448: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk452: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk456: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk460: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstRedLockMelee: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstRedLock: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstDamageDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstDamageTakenMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstMobilityMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstDownValueDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstBoostConsumptionMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk492: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk496: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  thirdBurstDamageDealtBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstDamageTakenBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk508: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk512: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk516: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk520: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk524: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstRedLockMelee: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstRedLock: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstDamageDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstDamageTakenMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstMobilityMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstDownValueDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstBoostConsumptionMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk572: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk576: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  fourthBurstDamageDealtBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstDamageTakenBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk588: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk592: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk596: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk600: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk604: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk608: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  order: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unitId: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zCreateUnitAmmoSlotCommand = z.object({
  ammoHash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  unitId: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  slotOrder: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
});

export const zCreateUnitCommand = z.object({
  unitId: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  slugName: z.optional(z.union([z.null(), z.string()])),
  nameEnglish: z.optional(z.union([z.null(), z.string()])),
  nameJapanese: z.optional(z.union([z.null(), z.string()])),
  nameChinese: z.optional(z.union([z.null(), z.string()])),
  seriesId: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  series: z.optional(zSeriesVm),
});

export const zDebugCommand = z.record(z.string(), z.unknown());

export const zDecompileScexByPathCommand = z.object({
  sourcePath: z.string(),
  destinationPath: z.string(),
  fileName: z.optional(z.union([z.null(), z.string()])),
});

export const zDecompileScexByUnitsCommand = z.object({
  unitIds: z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  replaceScript: z.optional(z.boolean()).default(false),
});

export const zExportAmmoByPathCommand = z.object({
  exportPath: z.optional(z.union([z.null(), z.string()])),
});

export const zExportAmmoCommand = z.object({
  replaceWorking: z.optional(z.boolean()).default(false),
  hotReload: z.optional(z.boolean()).default(false),
});

export const zExportHitboxGroupByPathCommand = z.object({
  hashes: z.optional(
    z.union([
      z.null(),
      z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
    ]),
  ),
  unitIds: z.optional(
    z.union([
      z.null(),
      z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
    ]),
  ),
  outputPath: z.optional(z.union([z.null(), z.string()])),
});

export const zExportHitboxGroupCommand = z.object({
  hashes: z.optional(
    z.union([
      z.null(),
      z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
    ]),
  ),
  unitIds: z.optional(
    z.union([
      z.null(),
      z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
    ]),
  ),
  replaceWorking: z.optional(z.boolean()).default(false),
  hotReload: z.optional(z.boolean()).default(false),
});

export const zExportPlayableCharactersCommand = z.object({
  replaceWorking: z.optional(z.boolean()).default(false),
});

export const zExportPlayableSeriesCommand = z.object({
  replaceWorking: z.optional(z.boolean()).default(false),
});

export const zExportTblCommand = z.object({
  versions: z.optional(z.union([z.null(), z.array(zPatchFileVersion)])),
  replaceStaging: z.optional(z.boolean()).default(false),
});

export const zExportUnitProjectileByPathCommand = z.object({
  unitIds: z.optional(
    z.union([
      z.null(),
      z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
    ]),
  ),
  exportPath: z.optional(z.union([z.null(), z.string()])),
});

export const zExportUnitProjectileCommand = z.object({
  unitIds: z.optional(
    z.union([
      z.null(),
      z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
    ]),
  ),
  replaceWorking: z.optional(z.boolean()).default(false),
  hotReload: z.optional(z.boolean()).default(false),
});

export const zExportUnitStatByPathCommand = z.object({
  unitIds: z.optional(
    z.union([
      z.null(),
      z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
    ]),
  ),
  exportPath: z.optional(z.union([z.null(), z.string()])),
});

export const zExportUnitStatCommand = z.object({
  unitIds: z.optional(
    z.union([
      z.null(),
      z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
    ]),
  ),
  replaceWorking: z.optional(z.boolean()).default(false),
});

export const zFileContentHttpResult = z.string();

export const zGetUnitSummaryQueryIncludes = z.enum(["Series"]);

export const zHitboxDto = z.object({
  hash: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  hitboxType: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  damage: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk8: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  downValueThreshold: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  yorukeValueThreshold: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk20: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk24: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  damageCorrection: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  specialEffect: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  hitEffect: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  flyDirection1: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  flyDirection2: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  flyDirection3: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  enemyCameraShakeMultiplier: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  playerCameraShakeMultiplier: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk56: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  knockUpAngle: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  knockUpRange: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk68: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  multipleHitIntervalFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  multipleHitCount: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  enemyStunDuration: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  playerStunDuration: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  hitVisualEffect: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  hitVisualEffectSizeMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  hitSoundEffectHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk100: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  friendlyDamageFlag: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk108: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  hitboxGroupHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zHitboxGroupDto = z.object({
  hash: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unitIds: z.optional(
    z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  ),
  hitboxes: z.optional(z.array(zHitboxDto)),
});

export const zHotReloadScex = z.object({
  sourcePath: z.string(),
});

export const zIFormFile = z.string();

export const zIFormFileCollection = z.array(zIFormFile);

export const zLanguageSettings = z.enum(["English", "Japanese", "Chinese"]);

export const zNullableOfCompressionType = z.enum(["None", "Zlib", "Lzma"]);

export const zPackFhmByAssetCommand = z.object({
  assetFileHashes: z.optional(
    z.union([
      z.null(),
      z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
    ]),
  ),
  assetFileTypes: z.optional(z.union([z.null(), z.array(zAssetFileType)])),
  unitIds: z.optional(
    z.union([
      z.null(),
      z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
    ]),
  ),
  patchFileVersions: z.optional(
    z.union([z.null(), z.array(zPatchFileVersion)]),
  ),
  replaceStaging: z.optional(z.boolean()).default(false),
});

export const zPackPsarcByPatchFilesCommand = z.object({
  patchFileVersions: z.optional(
    z.union([z.null(), z.array(zPatchFileVersion)]),
  ),
});

export const zPackPsarcByPathCommand = z.object({
  sourcePath: z.string(),
  destinationPath: z.string(),
  filename: z.optional(z.union([z.null(), z.string()])),
  compressionType: z.optional(zNullableOfCompressionType),
  compressionLevel: z
    .optional(
      z.union([
        z.null(),
        z.int().default(9),
        z
          .string()
          .regex(/^-?(?:0|[1-9]\d*)$/)
          .default(9),
      ]),
    )
    .default(9),
});

export const zPaginatedListOfAmmoDto = z.object({
  items: z.array(zAmmoDto),
  pageNumber: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  totalPages: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  totalCount: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  hasPreviousPage: z.optional(z.boolean()),
  hasNextPage: z.optional(z.boolean()),
});

export const zPaginatedListOfAssetFileVm = z.object({
  items: z.array(zAssetFileVm),
  pageNumber: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  totalPages: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  totalCount: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  hasPreviousPage: z.optional(z.boolean()),
  hasNextPage: z.optional(z.boolean()),
});

export const zPaginatedListOfHitboxDto = z.object({
  items: z.array(zHitboxDto),
  pageNumber: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  totalPages: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  totalCount: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  hasPreviousPage: z.optional(z.boolean()),
  hasNextPage: z.optional(z.boolean()),
});

export const zPaginatedListOfHitboxGroupDto = z.object({
  items: z.array(zHitboxGroupDto),
  pageNumber: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  totalPages: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  totalCount: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  hasPreviousPage: z.optional(z.boolean()),
  hasNextPage: z.optional(z.boolean()),
});

export const zPatchFileSummaryVm = z.object({
  assetFile: z.optional(zAssetFileDto),
  id: z.union([z.null(), z.string()]),
  tblId: zPatchFileVersion,
  pathInfo: z.optional(zPathInfoDto),
  fileInfo: z.optional(zFileInfoDto),
  assetFileHash: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zPaginatedListOfPatchFileSummaryVm = z.object({
  items: z.array(zPatchFileSummaryVm),
  pageNumber: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  totalPages: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  totalCount: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  hasPreviousPage: z.optional(z.boolean()),
  hasNextPage: z.optional(z.boolean()),
});

export const zPatchFileVm = z.object({
  id: z.union([z.null(), z.string()]),
  tblId: zPatchFileVersion,
  pathInfo: z.optional(zPathInfoDto),
  fileInfo: z.optional(zFileInfoDto),
  assetFileHash: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zPaginatedListOfPatchFileVm = z.object({
  items: z.array(zPatchFileVm),
  pageNumber: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  totalPages: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  totalCount: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  hasPreviousPage: z.optional(z.boolean()),
  hasNextPage: z.optional(z.boolean()),
});

export const zProjectileDto = z.object({
  hash: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  projectileType: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  hitboxHash: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  modelHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  skeletonIndex: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  aimType: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  translateY: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  translateZ: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  translateX: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  rotateX: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  rotateZ: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  cosmeticHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk44: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk48: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk52: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk56: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  ammoConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  durationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  maxTravelDistance: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  initialSpeed: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  acceleration: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  accelerationStartFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk84: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  maxSpeed: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved92: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved96: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved100: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved104: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved108: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved112: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved116: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  horizontalGuidance: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  horizontalGuidanceAngle: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  verticalGuidance: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  verticalGuidanceAngle: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved136: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved140: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved144: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved148: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved152: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved156: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved160: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved164: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved168: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved172: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  size: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved180: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved184: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  soundEffectHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved192: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved196: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  chainedProjectileHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved204: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved208: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved212: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved216: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved220: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved224: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved228: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved232: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved236: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved240: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved244: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved248: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved252: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved256: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved260: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved264: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved268: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved272: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved276: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unitId: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zPaginatedListOfProjectileDto = z.object({
  items: z.array(zProjectileDto),
  pageNumber: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  totalPages: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  totalCount: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  hasPreviousPage: z.optional(z.boolean()),
  hasNextPage: z.optional(z.boolean()),
});

export const zSeriesDto = z.object({
  id: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  playableSeries: z.optional(zPlayableSeriesDetailsDto),
  slugName: z.optional(z.string()),
  nameEnglish: z.optional(z.union([z.null(), z.string()])),
  nameJapanese: z.optional(z.union([z.null(), z.string()])),
  nameChinese: z.optional(z.union([z.null(), z.string()])),
});

export const zPaginatedListOfSeriesDto = z.object({
  items: z.array(zSeriesDto),
  pageNumber: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  totalPages: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  totalCount: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  hasPreviousPage: z.optional(z.boolean()),
  hasNextPage: z.optional(z.boolean()),
});

export const zSeriesUnitsVm = z.object({
  units: z.optional(z.array(zUnitSummaryVm)),
  id: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  slugName: z.optional(z.string()),
  nameEnglish: z.optional(z.union([z.null(), z.string()])),
  nameJapanese: z.optional(z.union([z.null(), z.string()])),
  nameChinese: z.optional(z.union([z.null(), z.string()])),
});

export const zPaginatedListOfSeriesUnitsVm = z.object({
  items: z.array(zSeriesUnitsVm),
  pageNumber: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  totalPages: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  totalCount: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  hasPreviousPage: z.optional(z.boolean()),
  hasNextPage: z.optional(z.boolean()),
});

export const zStatDto = z.object({
  id: z.optional(z.string()),
  unitCost: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unitCost2: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  maxHp: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  downValueThreshold: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  yorukeValueThreshold: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk20: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk24: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk28: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  maxBoost: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk36: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk40: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk44: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  gravityMultiplierAir: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  gravityMultiplierLand: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk56: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk60: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk64: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk68: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk72: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk76: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk80: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  cameraZoomMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk88: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk92: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk96: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk100: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk104: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk108: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  sizeMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk116: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk120: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk124: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk128: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk132: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk136: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk140: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk144: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk148: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk152: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk156: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk160: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk164: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk168: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk172: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk176: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk180: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk184: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  redLockRangeMelee: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  redLockRange: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk196: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk200: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk204: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk208: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostReplenish: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk216: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostFuwaInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostFlyConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostGroundStepInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostGroundStepConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostAirStepInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostAirStepConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostBdInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostBdConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk256: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk260: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk264: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk268: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostTransformInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostTransformConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostNonVernierActionConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostPostActionConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostRainbowStepInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk292: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk296: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk300: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk304: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk308: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk312: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk316: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk320: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk324: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk328: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk332: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  assaultBurstRedLockMelee: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstRedLock: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstDamageDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstDamageTakenMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstMobilityMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstDownValueDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstBoostConsumptionMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk364: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk368: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  assaultBurstDamageDealtBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstDamageTakenBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk380: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk384: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk388: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk392: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk396: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstRedLockMelee: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstRedLock: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstDamageDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstDamageTakenMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstMobilityMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstDownValueDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstBoostConsumptionMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk428: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk432: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  blastBurstDamageDealtBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstDamageTakenBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk444: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk448: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk452: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk456: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk460: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstRedLockMelee: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstRedLock: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstDamageDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstDamageTakenMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstMobilityMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstDownValueDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstBoostConsumptionMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk492: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk496: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  thirdBurstDamageDealtBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstDamageTakenBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk508: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk512: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk516: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk520: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk524: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstRedLockMelee: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstRedLock: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstDamageDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstDamageTakenMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstMobilityMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstDownValueDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstBoostConsumptionMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk572: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk576: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  fourthBurstDamageDealtBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstDamageTakenBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk588: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk592: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk596: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk600: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk604: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk608: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  order: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unitId: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zPaginatedListOfStatDto = z.object({
  items: z.array(zStatDto),
  pageNumber: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  totalPages: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  totalCount: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  hasPreviousPage: z.optional(z.boolean()),
  hasNextPage: z.optional(z.boolean()),
});

export const zUnitProjectileDto = z.object({
  unitId: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  projectiles: z.optional(z.array(zProjectileDto)),
});

export const zPaginatedListOfUnitProjectileDto = z.object({
  items: z.array(zUnitProjectileDto),
  pageNumber: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  totalPages: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  totalCount: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  hasPreviousPage: z.optional(z.boolean()),
  hasNextPage: z.optional(z.boolean()),
});

export const zUnitAmmoSlotDto = z.object({
  id: z.optional(z.union([z.null(), z.string()])),
  slotOrder: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  ammoHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zUnitStatDto = z.object({
  id: z.optional(z.union([z.null(), z.string()])),
  unitId: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  ammoSlots: z.optional(z.array(zUnitAmmoSlotDto)),
});

export const zPaginatedListOfUnitStatDto = z.object({
  items: z.array(zUnitStatDto),
  pageNumber: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  totalPages: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  totalCount: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  hasPreviousPage: z.optional(z.boolean()),
  hasNextPage: z.optional(z.boolean()),
});

export const zPaginatedListOfUnitSummaryVm = z.object({
  items: z.array(zUnitSummaryVm),
  pageNumber: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  totalPages: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  totalCount: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  hasPreviousPage: z.optional(z.boolean()),
  hasNextPage: z.optional(z.boolean()),
});

export const zTblFileInfoMetadata = z.union([
  z.null(),
  z.object({
    cumulativeIndex: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    patchNumber: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    size1: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    size2: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    size3: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    size4: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
    hashName: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
]);

export const zPatchFileMetadataDto = z.object({
  path: z.optional(z.union([z.null(), z.string()])),
  fileInfoMetadata: z.optional(zTblFileInfoMetadata),
});

export const zPlayableCharacterDto = z.object({
  unitId: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unitIndex: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  seriesId: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk2: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  fString: z.optional(z.union([z.null(), z.string()])),
  fOutString: z.optional(z.union([z.null(), z.string()])),
  pString: z.optional(z.union([z.null(), z.string()])),
  unitSelectOrderInSeries: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  arcadeSmallSpriteIndex: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  arcadeUnitNameSpriteIndex: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk27: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk112: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  figurineSpriteIndex: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk114: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk124: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk128: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  catalogStorePilotCostume2TString: z.optional(z.union([z.null(), z.string()])),
  catalogStorePilotCostume2String: z.optional(z.union([z.null(), z.string()])),
  catalogStorePilotCostume3TString: z.optional(z.union([z.null(), z.string()])),
  catalogStorePilotCostume3String: z.optional(z.union([z.null(), z.string()])),
  unk156: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  arcadeSelectionCostume1SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  arcadeSelectionCostume2SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  arcadeSelectionCostume3SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingLeftCostume1SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingLeftCostume2SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingLeftCostume3SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingRightCostume1SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingRightCostume2SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingRightCostume3SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  genericSelectionCostume1SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  genericSelectionCostume2SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  genericSelectionCostume3SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingTargetUnitSpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingTargetPilotCostume1SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingTargetPilotCostume2SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingTargetPilotCostume3SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inGameSortieAndAwakeningPilotCostume1SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inGameSortieAndAwakeningPilotCostume2SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inGameSortieAndAwakeningPilotCostume3SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  spriteFramesAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  resultSmallUnitSpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  figurineSpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingTargetUnitSmallSpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  catalogStorePilotCostume2SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  catalogStorePilotCostume3SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zResizePatchFileCommand = z.object({
  ids: z.optional(z.union([z.null(), z.array(z.uuid())])),
  versions: z.optional(z.union([z.null(), z.array(zPatchFileVersion)])),
  unitIds: z.optional(
    z.union([
      z.null(),
      z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
    ]),
  ),
  assetFileTypes: z.optional(z.union([z.null(), z.array(zAssetFileType)])),
});

export const zSerializeTblCommand = z.object({
  cumulativeFileInfoCount: z.union([
    z.int(),
    z.string().regex(/^-?(?:0|[1-9]\d*)$/),
  ]),
  fileMetadata: z.array(zPatchFileMetadataDto),
  pathOrder: z.optional(z.union([z.null(), z.array(z.string())])),
});

export const zTblDto = z.object({
  cumulativeFileInfoCount: z.union([
    z.int(),
    z.string().regex(/^-?(?:0|[1-9]\d*)$/),
  ]),
  fileMetadata: z.array(zPatchFileMetadataDto),
  pathOrder: z.optional(z.union([z.null(), z.array(z.string())])),
});

export const zTblVm = z.object({
  id: z.string(),
  cumulativeAssetIndex: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zUnpackFhmByAssetCommand = z.object({
  assetFileHashes: z.optional(
    z.union([
      z.null(),
      z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
    ]),
  ),
  assetFileTypes: z.optional(z.union([z.null(), z.array(zAssetFileType)])),
  unitIds: z.optional(
    z.union([
      z.null(),
      z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
    ]),
  ),
  patchFileVersions: z.optional(
    z.union([z.null(), z.array(zPatchFileVersion)]),
  ),
  replaceWorking: z.optional(z.boolean()).default(false),
});

export const zUnpackPsarcByPatchFilesCommand = z.object({
  patchFileVersions: z.optional(
    z.union([z.null(), z.array(zPatchFileVersion)]),
  ),
});

export const zUnpackPsarcByPathCommand = z.object({
  sourceFilePath: z.string(),
  outputDirectoryPath: z.string(),
});

export const zUpdateAmmoCommand = z.object({
  hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ammoType: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  maxAmmo: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  initialAmmo: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  timedDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk16: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  reloadType: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  cooldownDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reloadDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  assaultBurstReloadDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  blastBurstReloadDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk40: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk44: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  inactiveUnk48: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inactiveCooldownDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inactiveReloadDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inactiveAssaultBurstReloadDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inactiveBlastBurstReloadDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inactiveUnk68: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inactiveUnk72: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  burstReplenish: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk80: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk84: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk88: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  chargeInput: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  chargeDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  assaultBurstChargeDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  blastBurstChargeDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk108: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk112: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  releaseChargeLingerDurationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  maxChargeLevel: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk124: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  chargeMultiLockFlag: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  order: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unitId: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zUpdateAssetFileByHashCommand = z.object({
  hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  order: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  fileType: z.optional(z.array(zAssetFileType)),
  unitIds: z.optional(
    z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  ),
});

export const zUpdateHitboxCommand = z.object({
  hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  hitboxType: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  damage: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk8: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  downValueThreshold: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  yorukeValueThreshold: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk20: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk24: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  damageCorrection: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  specialEffect: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  hitEffect: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  flyDirection1: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  flyDirection2: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  flyDirection3: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  enemyCameraShakeMultiplier: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  playerCameraShakeMultiplier: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk56: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  knockUpAngle: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  knockUpRange: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk68: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  multipleHitIntervalFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  multipleHitCount: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  enemyStunDuration: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  playerStunDuration: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  hitVisualEffect: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  hitVisualEffectSizeMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  hitSoundEffectHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk100: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  friendlyDamageFlag: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk108: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  hitboxGroupHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zUpdateHitboxGroupCommand = z.object({
  hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  unitIds: z.optional(
    z.union([
      z.null(),
      z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
    ]),
  ),
});

export const zUpdatePatchFileByIdCommand = z.object({
  id: z.uuid(),
  tblId: zPatchFileVersion,
  pathInfo: z.optional(zPathInfoDto),
  fileInfo: z.optional(zFileInfoDto),
  assetFileHash: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zUpdateProjectileByIdCommand = z.object({
  hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  projectileType: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  hitboxHash: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  modelHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  skeletonIndex: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  aimType: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  translateY: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  translateZ: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  translateX: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  rotateX: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  rotateZ: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  cosmeticHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk44: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk48: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk52: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk56: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  ammoConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  durationFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  maxTravelDistance: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  initialSpeed: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  acceleration: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  accelerationStartFrame: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk84: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  maxSpeed: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved92: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved96: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved100: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved104: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved108: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved112: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved116: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  horizontalGuidance: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  horizontalGuidanceAngle: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  verticalGuidance: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  verticalGuidanceAngle: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved136: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved140: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved144: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved148: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved152: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved156: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved160: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved164: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved168: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved172: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  size: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved180: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved184: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  soundEffectHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved192: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved196: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  chainedProjectileHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved204: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved208: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved212: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved216: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  reserved220: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved224: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved228: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved232: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved236: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved240: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved244: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved248: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved252: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved256: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved260: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved264: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved268: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved272: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  reserved276: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unitId: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zUpdateStatCommand = z.object({
  id: z.uuid(),
  unitCost: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unitCost2: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  maxHp: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  downValueThreshold: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  yorukeValueThreshold: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk20: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk24: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk28: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  maxBoost: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk36: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk40: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk44: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  gravityMultiplierAir: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  gravityMultiplierLand: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk56: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk60: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk64: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk68: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk72: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk76: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk80: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  cameraZoomMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk88: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk92: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk96: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk100: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk104: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk108: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  sizeMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk116: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk120: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk124: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk128: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk132: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk136: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk140: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk144: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk148: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk152: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk156: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk160: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk164: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk168: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk172: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk176: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk180: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk184: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  redLockRangeMelee: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  redLockRange: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk196: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk200: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk204: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk208: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostReplenish: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk216: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostFuwaInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostFlyConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostGroundStepInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostGroundStepConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostAirStepInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostAirStepConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostBdInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostBdConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk256: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk260: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk264: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk268: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostTransformInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostTransformConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostNonVernierActionConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostPostActionConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  boostRainbowStepInitialConsumption: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk292: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk296: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk300: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk304: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk308: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk312: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk316: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk320: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk324: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk328: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk332: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  assaultBurstRedLockMelee: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstRedLock: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstDamageDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstDamageTakenMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstMobilityMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstDownValueDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstBoostConsumptionMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk364: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk368: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  assaultBurstDamageDealtBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  assaultBurstDamageTakenBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk380: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk384: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk388: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk392: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk396: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstRedLockMelee: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstRedLock: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstDamageDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstDamageTakenMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstMobilityMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstDownValueDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstBoostConsumptionMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk428: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk432: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  blastBurstDamageDealtBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  blastBurstDamageTakenBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk444: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk448: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk452: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk456: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk460: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstRedLockMelee: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstRedLock: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstDamageDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstDamageTakenMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstMobilityMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstDownValueDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstBoostConsumptionMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk492: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk496: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  thirdBurstDamageDealtBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  thirdBurstDamageTakenBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk508: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk512: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk516: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk520: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk524: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstRedLockMelee: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstRedLock: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstDamageDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstDamageTakenMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstMobilityMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstDownValueDealtMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstBoostConsumptionMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk572: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk576: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  fourthBurstDamageDealtBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  fourthBurstDamageTakenBurstGaugeIncreaseMultiplier: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk588: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk592: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk596: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk600: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk604: z.optional(
    z.union([
      z.number(),
      z.string().regex(/^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/),
    ]),
  ),
  unk608: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  order: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unitId: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zUpdateUnitAmmoSlotCommand = z.object({
  id: z.uuid(),
  unitId: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  slotOrder: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  ammoHash: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zUpdateUnitCommand = z.object({
  unitId: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  slugName: z.optional(z.union([z.null(), z.string()])),
  nameEnglish: z.optional(z.union([z.null(), z.string()])),
  nameJapanese: z.optional(z.union([z.null(), z.string()])),
  nameChinese: z.optional(z.union([z.null(), z.string()])),
  seriesId: z.optional(
    z.union([z.null(), z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  series: z.optional(zSeriesVm),
});

export const zUpsertConfigCommand = z.object({
  key: z.string(),
  value: z.string(),
});

export const zUpsertPlayableCharacterCommand = z.object({
  unitId: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  unitIndex: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  seriesId: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk2: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  fString: z.optional(z.union([z.null(), z.string()])),
  fOutString: z.optional(z.union([z.null(), z.string()])),
  pString: z.optional(z.union([z.null(), z.string()])),
  unitSelectOrderInSeries: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  arcadeSmallSpriteIndex: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  arcadeUnitNameSpriteIndex: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk27: z.optional(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
  unk112: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  figurineSpriteIndex: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk114: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk124: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  unk128: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  catalogStorePilotCostume2TString: z.optional(z.union([z.null(), z.string()])),
  catalogStorePilotCostume2String: z.optional(z.union([z.null(), z.string()])),
  catalogStorePilotCostume3TString: z.optional(z.union([z.null(), z.string()])),
  catalogStorePilotCostume3String: z.optional(z.union([z.null(), z.string()])),
  unk156: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  arcadeSelectionCostume1SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  arcadeSelectionCostume2SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  arcadeSelectionCostume3SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingLeftCostume1SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingLeftCostume2SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingLeftCostume3SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingRightCostume1SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingRightCostume2SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingRightCostume3SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  genericSelectionCostume1SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  genericSelectionCostume2SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  genericSelectionCostume3SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingTargetUnitSpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingTargetPilotCostume1SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingTargetPilotCostume2SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingTargetPilotCostume3SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inGameSortieAndAwakeningPilotCostume1SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inGameSortieAndAwakeningPilotCostume2SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  inGameSortieAndAwakeningPilotCostume3SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  spriteFramesAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  resultSmallUnitSpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  figurineSpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  loadingTargetUnitSmallSpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  catalogStorePilotCostume2SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
  catalogStorePilotCostume3SpriteAssetHash: z.optional(
    z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  ),
});

export const zPostApiDebugData = z.object({
  body: zDebugCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zGetApiUnitsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      Page: z
        .optional(
          z.union([
            z.int().default(1),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(1),
          ]),
        )
        .default(1),
      PerPage: z
        .optional(
          z.union([
            z.int().default(10),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(10),
          ]),
        )
        .default(10),
      ListAll: z.optional(z.boolean()).default(false),
      Search: z.optional(z.string()),
      UnitIds: z.optional(
        z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
      ),
      Languages: z.optional(z.array(zLanguageSettings)),
      Includes: z.optional(z.array(zGetUnitSummaryQueryIncludes)),
    }),
  ),
});

/**
 * OK
 */
export const zGetApiUnitsResponse = zPaginatedListOfUnitSummaryVm;

export const zPostApiUnitsData = z.object({
  body: zCreateUnitCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zGetApiUnitsByUnitIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    unitId: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetApiUnitsByUnitIdResponse = zUnitSummaryVm;

export const zPostApiUnitsByUnitIdData = z.object({
  body: zUpdateUnitCommand,
  path: z.object({
    unitId: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiUnitsByUnitIdResponse = z.void();

export const zGetApiUnitsByUnitIdPlayableCharactersData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    unitId: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetApiUnitsByUnitIdPlayableCharactersResponse =
  zPlayableCharacterDto;

export const zPostApiUnitsBulkData = z.object({
  body: zBulkCreateUnitCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zDeleteApiUnitsByUnitIdPlayableCharacterData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    unitId: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zDeleteApiUnitsByUnitIdPlayableCharacterResponse = z.void();

export const zPostApiUnitsByUnitIdPlayableCharacterData = z.object({
  body: zUpsertPlayableCharacterCommand,
  path: z.object({
    unitId: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiUnitsByUnitIdPlayableCharacterResponse = z.void();

export const zPostApiUnitsPlayableCharactersImportData = z.object({
  body: z.object({
    file: zIFormFile,
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zPostApiUnitsPlayableCharactersExportData = z.object({
  body: zExportPlayableCharactersCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zPostApiUnitsPlayableCharactersExportResponse =
  zFileContentHttpResult;

export const zGetApiPatchFilesData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      Page: z
        .optional(
          z.union([
            z.int().default(1),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(1),
          ]),
        )
        .default(1),
      PerPage: z
        .optional(
          z.union([
            z.int().default(10),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(10),
          ]),
        )
        .default(10),
      Search: z.optional(z.string()),
      Versions: z.optional(z.array(zPatchFileVersion)),
      UnitIds: z.optional(
        z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
      ),
    }),
  ),
});

/**
 * OK
 */
export const zGetApiPatchFilesResponse = zPaginatedListOfPatchFileVm;

export const zPostApiPatchFilesData = z.object({
  body: zCreatePatchFileCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zGetApiPatchFilesSummaryData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      Page: z
        .optional(
          z.union([
            z.int().default(1),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(1),
          ]),
        )
        .default(1),
      PerPage: z
        .optional(
          z.union([
            z.int().default(10),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(10),
          ]),
        )
        .default(10),
      Versions: z.optional(z.array(zPatchFileVersion)),
      UnitIds: z.optional(
        z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
      ),
      AssetFileHashes: z.optional(
        z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
      ),
      AssetFileTypes: z.optional(z.array(zAssetFileType)),
    }),
  ),
});

/**
 * OK
 */
export const zGetApiPatchFilesSummaryResponse =
  zPaginatedListOfPatchFileSummaryVm;

export const zDeleteApiPatchFilesByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zDeleteApiPatchFilesByIdResponse = z.void();

export const zGetApiPatchFilesByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetApiPatchFilesByIdResponse = zPatchFileVm;

export const zPostApiPatchFilesByIdData = z.object({
  body: zUpdatePatchFileByIdCommand,
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiPatchFilesByIdResponse = z.void();

export const zPostApiPatchFilesResizeData = z.object({
  body: zResizePatchFileCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiPatchFilesResizeResponse = z.void();

export const zGetApiTblDeserializePathData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    filePath: z.string(),
  }),
});

/**
 * OK
 */
export const zGetApiTblDeserializePathResponse = zTblDto;

export const zPostApiTblDeserializeData = z.object({
  body: z.object({
    file: zIFormFile,
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zPostApiTblDeserializeResponse = zTblDto;

export const zGetApiTblSerializePathData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    filePath: z.string(),
  }),
});

export const zPostApiTblSerializeData = z.object({
  body: zSerializeTblCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zPostApiTblSerializeResponse = zFileContentHttpResult;

export const zGetApiTblByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: zPatchFileVersion,
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetApiTblByIdResponse = zTblVm;

export const zPostApiTblImportData = z.object({
  body: z.object({
    files: zIFormFileCollection,
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zPostApiTblExportData = z.object({
  body: zExportTblCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zPostApiTblExportResponse = zFileContentHttpResult;

export const zGetApiStatsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      Page: z
        .optional(
          z.union([
            z.int().default(1),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(1),
          ]),
        )
        .default(1),
      PerPage: z
        .optional(
          z.union([
            z.int().default(10),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(10),
          ]),
        )
        .default(10),
      Ids: z.optional(z.array(z.uuid())),
      UnitIds: z.optional(
        z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
      ),
    }),
  ),
});

/**
 * OK
 */
export const zGetApiStatsResponse = zPaginatedListOfStatDto;

export const zPostApiStatsData = z.object({
  body: zCreateStatCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zDeleteApiStatsByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zDeleteApiStatsByIdResponse = z.void();

export const zGetApiStatsByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetApiStatsByIdResponse = zStatDto;

export const zPostApiStatsByIdData = z.object({
  body: zUpdateStatCommand,
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiStatsByIdResponse = z.void();

export const zGetApiUnitStatsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      Page: z
        .optional(
          z.union([
            z.int().default(1),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(1),
          ]),
        )
        .default(1),
      PerPage: z
        .optional(
          z.union([
            z.int().default(10),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(10),
          ]),
        )
        .default(10),
      UnitIds: z.optional(
        z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
      ),
    }),
  ),
});

/**
 * OK
 */
export const zGetApiUnitStatsResponse = zPaginatedListOfUnitStatDto;

export const zGetApiUnitStatsByUnitIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    unitId: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetApiUnitStatsByUnitIdResponse = zUnitStatDto;

export const zPostApiUnitStatsImportData = z.object({
  body: z.object({
    files: zIFormFileCollection,
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zPostApiUnitStatsExportData = z.object({
  body: zExportUnitStatCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zPostApiUnitStatsExportResponse = zFileContentHttpResult;

export const zPostApiUnitStatsExportPathData = z.object({
  body: zExportUnitStatByPathCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiUnitStatsExportPathResponse = z.void();

export const zGetApiUnitStatsAmmoSlotByUnitIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    unitId: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetApiUnitStatsAmmoSlotByUnitIdResponse =
  z.array(zUnitAmmoSlotDto);

export const zPostApiUnitStatsAmmoSlotData = z.object({
  body: zCreateUnitAmmoSlotCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zDeleteApiUnitStatsAmmoSlotByIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zDeleteApiUnitStatsAmmoSlotByIdResponse = z.void();

export const zPostApiUnitStatsAmmoSlotByIdData = z.object({
  body: zUpdateUnitAmmoSlotCommand,
  path: z.object({
    id: z.uuid(),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiUnitStatsAmmoSlotByIdResponse = z.void();

export const zGetApiSeriesData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      Page: z
        .optional(
          z.union([
            z.int().default(1),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(1),
          ]),
        )
        .default(1),
      PerPage: z
        .optional(
          z.union([
            z.int().default(10),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(10),
          ]),
        )
        .default(10),
      Search: z.optional(z.array(z.string())),
      ListAll: z.optional(z.boolean()).default(false),
    }),
  ),
});

/**
 * OK
 */
export const zGetApiSeriesResponse = zPaginatedListOfSeriesDto;

export const zPostApiSeriesData = z.object({
  body: zCreateSeriesCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zGetApiSeriesUnitsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      Page: z
        .optional(
          z.union([
            z.int().default(1),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(1),
          ]),
        )
        .default(1),
      PerPage: z
        .optional(
          z.union([
            z.int().default(10),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(10),
          ]),
        )
        .default(10),
      UnitIds: z.optional(
        z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
      ),
      ListAll: z.optional(z.boolean()).default(false),
    }),
  ),
});

/**
 * OK
 */
export const zGetApiSeriesUnitsResponse = zPaginatedListOfSeriesUnitsVm;

export const zPostApiSeriesImportData = z.object({
  body: z.object({
    file: zIFormFile,
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zPostApiSeriesExportData = z.object({
  body: zExportPlayableSeriesCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zPostApiSeriesExportResponse = zFileContentHttpResult;

export const zGetApiScexDecompiledByUnitIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    unitId: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetApiScexDecompiledByUnitIdResponse = z.string();

export const zPostApiScexCompilePathData = z.object({
  body: zCompileScexByPathCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiScexCompilePathResponse = z.void();

export const zPostApiScexDecompilePathData = z.object({
  body: zDecompileScexByPathCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiScexDecompilePathResponse = z.void();

export const zPostApiScexHotReloadPathData = z.object({
  body: zHotReloadScex,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiScexHotReloadPathResponse = z.void();

export const zPostApiScexCompileUnitsData = z.object({
  body: zCompileScexByUnitsCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiScexCompileUnitsResponse = z.void();

export const zPostApiScexDecompileUnitsData = z.object({
  body: zDecompileScexByUnitsCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiScexDecompileUnitsResponse = z.void();

export const zPostApiPsarcPackPathData = z.object({
  body: zPackPsarcByPathCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiPsarcPackPathResponse = z.void();

export const zPostApiPsarcUnpackPathData = z.object({
  body: zUnpackPsarcByPathCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiPsarcUnpackPathResponse = z.void();

export const zPostApiPsarcPackPatchFilesData = z.object({
  body: zPackPsarcByPatchFilesCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiPsarcPackPatchFilesResponse = z.void();

export const zPostApiPsarcUnpackPatchFilesData = z.object({
  body: zUnpackPsarcByPatchFilesCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiPsarcUnpackPatchFilesResponse = z.void();

export const zGetApiProjectilesData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      Page: z
        .optional(
          z.union([
            z.int().default(1),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(1),
          ]),
        )
        .default(1),
      PerPage: z
        .optional(
          z.union([
            z.int().default(10),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(10),
          ]),
        )
        .default(10),
      Hashes: z.optional(
        z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
      ),
      UnitIds: z.optional(
        z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
      ),
      ModelHashes: z.optional(
        z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
      ),
      Search: z.optional(z.string()),
    }),
  ),
});

/**
 * OK
 */
export const zGetApiProjectilesResponse = zPaginatedListOfProjectileDto;

export const zPostApiProjectilesData = z.object({
  body: zCreateProjectileCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zDeleteApiProjectilesByHashData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

export const zGetApiProjectilesByHashData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetApiProjectilesByHashResponse = zProjectileDto;

export const zPostApiProjectilesByHashData = z.object({
  body: zUpdateProjectileByIdCommand,
  path: z.object({
    hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

export const zGetApiUnitProjectilesData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      Page: z
        .optional(
          z.union([
            z.int().default(1),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(1),
          ]),
        )
        .default(1),
      PerPage: z
        .optional(
          z.union([
            z.int().default(10),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(10),
          ]),
        )
        .default(10),
      UnitIds: z.optional(
        z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
      ),
      Search: z.optional(z.string()),
    }),
  ),
});

/**
 * OK
 */
export const zGetApiUnitProjectilesResponse = zPaginatedListOfUnitProjectileDto;

export const zGetApiUnitProjectilesByUnitIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    unitId: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetApiUnitProjectilesByUnitIdResponse = zUnitProjectileDto;

export const zPostApiUnitProjectilesImportData = z.object({
  body: z.object({
    files: zIFormFileCollection,
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zPostApiUnitProjectilesImportPathData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    directoryPath: z.string(),
  }),
});

export const zPostApiUnitProjectilesExportData = z.object({
  body: zExportUnitProjectileCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zPostApiUnitProjectilesExportResponse = zFileContentHttpResult;

export const zPostApiUnitProjectilesExportPathData = z.object({
  body: zExportUnitProjectileByPathCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiUnitProjectilesExportPathResponse = z.void();

export const zPostApiNdp3Data = z.object({
  body: z
    .object({
      ndp3File: zIFormFile,
    })
    .and(
      z.object({
        vbnFile: z.optional(zIFormFile),
      }),
    ),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zPostApiNdp3Response = zFileContentHttpResult;

export const zPostApiNdp3JsonData = z.object({
  body: z
    .object({
      ndp3File: zIFormFile,
    })
    .and(
      z.object({
        vbnFile: zIFormFile,
      }),
    ),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zPostApiNdp3JsonResponse = zFileContentHttpResult;

export const zGetApiHitboxesData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      Page: z
        .optional(
          z.union([
            z.int().default(1),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(1),
          ]),
        )
        .default(1),
      PerPage: z
        .optional(
          z.union([
            z.int().default(10),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(10),
          ]),
        )
        .default(10),
      Hashes: z.optional(
        z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
      ),
      UnitIds: z.optional(
        z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
      ),
      Search: z.optional(z.string()),
    }),
  ),
});

/**
 * OK
 */
export const zGetApiHitboxesResponse = zPaginatedListOfHitboxDto;

export const zPostApiHitboxesData = z.object({
  body: zCreateHitboxCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zDeleteApiHitboxesByHashData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zDeleteApiHitboxesByHashResponse = z.void();

export const zGetApiHitboxesByHashData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetApiHitboxesByHashResponse = zHitboxDto;

export const zPostApiHitboxesByHashData = z.object({
  body: zUpdateHitboxCommand,
  path: z.object({
    hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiHitboxesByHashResponse = z.void();

export const zGetApiHitboxGroupsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      Page: z
        .optional(
          z.union([
            z.int().default(1),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(1),
          ]),
        )
        .default(1),
      PerPage: z
        .optional(
          z.union([
            z.int().default(10),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(10),
          ]),
        )
        .default(10),
      Hashes: z.optional(
        z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
      ),
      UnitIds: z.optional(
        z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
      ),
    }),
  ),
});

/**
 * OK
 */
export const zGetApiHitboxGroupsResponse = zPaginatedListOfHitboxGroupDto;

export const zPostApiHitboxGroupsData = z.object({
  body: zCreateHitboxGroupCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zGetApiHitboxGroupsHashByHashData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetApiHitboxGroupsHashByHashResponse = zHitboxGroupDto;

export const zGetApiHitboxGroupsUnitIdByUnitIdData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    unitId: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetApiHitboxGroupsUnitIdByUnitIdResponse = zHitboxGroupDto;

export const zPostApiHitboxGroupsByHashData = z.object({
  body: zUpdateHitboxGroupCommand,
  path: z.object({
    hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiHitboxGroupsByHashResponse = z.void();

export const zPostApiHitboxGroupsImportData = z.object({
  body: z.object({
    file: zIFormFile,
  }),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      unitId: z.optional(
        z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
      ),
    }),
  ),
});

export const zPostApiHitboxGroupsImportPathData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    directoryPath: z.string(),
  }),
});

export const zPostApiHitboxGroupsExportData = z.object({
  body: zExportHitboxGroupCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zPostApiHitboxGroupsExportResponse = zFileContentHttpResult;

export const zPostApiHitboxGroupsExportPathData = z.object({
  body: zExportHitboxGroupByPathCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiHitboxGroupsExportPathResponse = z.void();

export const zGetApiFhmPackPathData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    SourcePath: z.string(),
    DestinationPath: z.string(),
    FileName: z.optional(z.string()),
  }),
});

/**
 * No Content
 */
export const zGetApiFhmPackPathResponse = z.void();

export const zGetApiFhmUnpackPathData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    SourceFilePath: z.string(),
    OutputDirectoryPath: z.string(),
    MultipleFiles: z.optional(z.boolean()).default(false),
  }),
});

/**
 * No Content
 */
export const zGetApiFhmUnpackPathResponse = z.void();

export const zPostApiFhmPackData = z.object({
  body: z.object({
    file: zIFormFile,
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zPostApiFhmPackResponse = zFileContentHttpResult;

export const zPostApiFhmUnpackData = z.object({
  body: z.object({
    file: zIFormFile,
  }),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      compressionFormat: z.optional(zCompressionFormats),
    }),
  ),
});

/**
 * OK
 */
export const zPostApiFhmUnpackResponse = zFileContentHttpResult;

export const zPostApiFhmPackAssetData = z.object({
  body: zPackFhmByAssetCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiFhmPackAssetResponse = z.void();

export const zPostApiFhmUnpackAssetData = z.object({
  body: zUnpackFhmByAssetCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiFhmUnpackAssetResponse = z.void();

export const zGetApiConfigsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.object({
    Keys: z.array(z.string()),
  }),
});

/**
 * OK
 */
export const zGetApiConfigsResponse = z.array(zConfigDto);

export const zPostApiConfigsData = z.object({
  body: zUpsertConfigCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiConfigsResponse = z.void();

export const zDeleteApiConfigsByKeyData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    key: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zDeleteApiConfigsByKeyResponse = z.void();

export const zGetApiConfigsByKeyData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    key: z.string(),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetApiConfigsByKeyResponse = z.string();

export const zGetApiAssetsData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      Page: z
        .optional(
          z.union([
            z.int().default(1),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(1),
          ]),
        )
        .default(1),
      PerPage: z
        .optional(
          z.union([
            z.int().default(10),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(10),
          ]),
        )
        .default(10),
      UnitIds: z.optional(
        z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
      ),
      AssetFileTypes: z.optional(z.array(zAssetFileType)),
      ListAll: z.optional(z.boolean()).default(false),
    }),
  ),
});

/**
 * OK
 */
export const zGetApiAssetsResponse = zPaginatedListOfAssetFileVm;

export const zPostApiAssetsData = z.object({
  body: zCreateAssetFileCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zDeleteApiAssetsByHashData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zDeleteApiAssetsByHashResponse = z.void();

export const zGetApiAssetsByHashData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetApiAssetsByHashResponse = zAssetFileVm;

export const zPostApiAssetsByHashData = z.object({
  body: zUpdateAssetFileByHashCommand,
  path: z.object({
    hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiAssetsByHashResponse = z.void();

export const zPostApiAssetsImportData = z.object({
  body: z.object({
    files: zIFormFileCollection,
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zGetApiAmmoData = z.object({
  body: z.optional(z.never()),
  path: z.optional(z.never()),
  query: z.optional(
    z.object({
      Page: z
        .optional(
          z.union([
            z.int().default(1),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(1),
          ]),
        )
        .default(1),
      PerPage: z
        .optional(
          z.union([
            z.int().default(10),
            z
              .string()
              .regex(/^-?(?:0|[1-9]\d*)$/)
              .default(10),
          ]),
        )
        .default(10),
      Hash: z.optional(
        z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
      ),
      UnitIds: z.optional(
        z.array(z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)])),
      ),
      Search: z.optional(z.string()),
      ListAll: z.optional(z.boolean()).default(false),
    }),
  ),
});

/**
 * OK
 */
export const zGetApiAmmoResponse = zPaginatedListOfAmmoDto;

export const zPostApiAmmoData = z.object({
  body: zCreateAmmoCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zDeleteApiAmmoByHashData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zDeleteApiAmmoByHashResponse = z.void();

export const zGetApiAmmoByHashData = z.object({
  body: z.optional(z.never()),
  path: z.object({
    hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zGetApiAmmoByHashResponse = zAmmoDto;

export const zPostApiAmmoByHashData = z.object({
  body: zUpdateAmmoCommand,
  path: z.object({
    hash: z.union([z.int(), z.string().regex(/^-?(?:0|[1-9]\d*)$/)]),
  }),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiAmmoByHashResponse = z.void();

export const zPostApiAmmoImportData = z.object({
  body: z.object({
    formFile: zIFormFile,
  }),
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

export const zPostApiAmmoExportData = z.object({
  body: zExportAmmoCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * OK
 */
export const zPostApiAmmoExportResponse = zFileContentHttpResult;

export const zPostApiAmmoExportPathData = z.object({
  body: zExportAmmoByPathCommand,
  path: z.optional(z.never()),
  query: z.optional(z.never()),
});

/**
 * No Content
 */
export const zPostApiAmmoExportPathResponse = z.void();
