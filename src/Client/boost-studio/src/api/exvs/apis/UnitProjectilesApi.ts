/* tslint:disable */
/* eslint-disable */
/**
 * BoostStudio.Web | exvs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PostApiUnitStatsExportRequest,
} from '../models/index';
import {
    PostApiUnitStatsExportRequestFromJSON,
    PostApiUnitStatsExportRequestToJSON,
} from '../models/index';

export interface GetApiUnitProjectilesRequest {
    page?: number;
    perPage?: number;
    unitIds?: Array<number> | null;
    search?: string | null;
}

export interface GetApiUnitProjectilesByUnitIdRequest {
    unitId: number;
}

export interface PostApiUnitProjectilesExportRequest {
    postApiUnitStatsExportRequest: PostApiUnitStatsExportRequest;
}

export interface PostApiUnitProjectilesExportByUnitIdRequest {
    unitId: number;
}

export interface PostApiUnitProjectilesImportRequest {
    files?: Array<Blob>;
}

export interface PostApiUnitProjectilesImportDirectoryRequest {
    directoryPath: string;
}

/**
 * 
 */
export class UnitProjectilesApi extends runtime.BaseAPI {

    /**
     */
    async getApiUnitProjectilesRaw(requestParameters: GetApiUnitProjectilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['PerPage'] = requestParameters['perPage'];
        }

        if (requestParameters['unitIds'] != null) {
            queryParameters['UnitIds'] = requestParameters['unitIds'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/unit-projectiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getApiUnitProjectiles(requestParameters: GetApiUnitProjectilesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getApiUnitProjectilesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getApiUnitProjectilesByUnitIdRaw(requestParameters: GetApiUnitProjectilesByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['unitId'] == null) {
            throw new runtime.RequiredError(
                'unitId',
                'Required parameter "unitId" was null or undefined when calling getApiUnitProjectilesByUnitId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/unit-projectiles/{unitId}`.replace(`{${"unitId"}}`, encodeURIComponent(String(requestParameters['unitId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getApiUnitProjectilesByUnitId(requestParameters: GetApiUnitProjectilesByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getApiUnitProjectilesByUnitIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitProjectilesExportRaw(requestParameters: PostApiUnitProjectilesExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postApiUnitStatsExportRequest'] == null) {
            throw new runtime.RequiredError(
                'postApiUnitStatsExportRequest',
                'Required parameter "postApiUnitStatsExportRequest" was null or undefined when calling postApiUnitProjectilesExport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/unit-projectiles/export`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostApiUnitStatsExportRequestToJSON(requestParameters['postApiUnitStatsExportRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitProjectilesExport(requestParameters: PostApiUnitProjectilesExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitProjectilesExportRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitProjectilesExportByUnitIdRaw(requestParameters: PostApiUnitProjectilesExportByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['unitId'] == null) {
            throw new runtime.RequiredError(
                'unitId',
                'Required parameter "unitId" was null or undefined when calling postApiUnitProjectilesExportByUnitId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/unit-projectiles/export/{unitId}`.replace(`{${"unitId"}}`, encodeURIComponent(String(requestParameters['unitId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitProjectilesExportByUnitId(requestParameters: PostApiUnitProjectilesExportByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitProjectilesExportByUnitIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitProjectilesImportRaw(requestParameters: PostApiUnitProjectilesImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['files'] != null) {
            requestParameters['files'].forEach((element) => {
                formParams.append('files', element as any);
            })
        }

        const response = await this.request({
            path: `/api/unit-projectiles/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitProjectilesImport(requestParameters: PostApiUnitProjectilesImportRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitProjectilesImportRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitProjectilesImportDirectoryRaw(requestParameters: PostApiUnitProjectilesImportDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['directoryPath'] == null) {
            throw new runtime.RequiredError(
                'directoryPath',
                'Required parameter "directoryPath" was null or undefined when calling postApiUnitProjectilesImportDirectory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['directoryPath'] != null) {
            queryParameters['directoryPath'] = requestParameters['directoryPath'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/unit-projectiles/import/directory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitProjectilesImportDirectory(requestParameters: PostApiUnitProjectilesImportDirectoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitProjectilesImportDirectoryRaw(requestParameters, initOverrides);
    }

}
