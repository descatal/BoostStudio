/* tslint:disable */
/* eslint-disable */
/**
 * BoostStudio.Web | exvs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BulkCreateUnitCommand,
  CreateUnitCommand,
  ExportPlayableCharactersCommand,
  PlayableCharacterDto,
  UnitSummaryVm,
  UpdateUnitCommand,
  UpsertPlayableCharactersCommand,
} from '../models/index';
import {
    BulkCreateUnitCommandFromJSON,
    BulkCreateUnitCommandToJSON,
    CreateUnitCommandFromJSON,
    CreateUnitCommandToJSON,
    ExportPlayableCharactersCommandFromJSON,
    ExportPlayableCharactersCommandToJSON,
    PlayableCharacterDtoFromJSON,
    PlayableCharacterDtoToJSON,
    UnitSummaryVmFromJSON,
    UnitSummaryVmToJSON,
    UpdateUnitCommandFromJSON,
    UpdateUnitCommandToJSON,
    UpsertPlayableCharactersCommandFromJSON,
    UpsertPlayableCharactersCommandToJSON,
} from '../models/index';

export interface GetApiUnitsRequest {
    search?: string;
    unitIds?: Array<number>;
    languages?: Array<GetApiUnitsLanguagesEnum>;
}

export interface GetApiUnitsByUnitIdRequest {
    unitId: number;
}

export interface GetApiUnitsByUnitIdPlayableCharactersRequest {
    unitId: number;
}

export interface PostApiUnitsRequest {
    createUnitCommand: CreateUnitCommand;
}

export interface PostApiUnitsBulkRequest {
    bulkCreateUnitCommand: BulkCreateUnitCommand;
}

export interface PostApiUnitsByUnitIdRequest {
    unitId: number;
    updateUnitCommand: UpdateUnitCommand;
}

export interface PostApiUnitsByUnitIdPlayableCharactersRequest {
    unitId: number;
    upsertPlayableCharactersCommand: UpsertPlayableCharactersCommand;
}

export interface PostApiUnitsPlayableCharactersExportRequest {
    exportPlayableCharactersCommand: ExportPlayableCharactersCommand;
}

export interface PostApiUnitsPlayableCharactersImportRequest {
    file: Blob;
}

/**
 * 
 */
export class UnitsApi extends runtime.BaseAPI {

    /**
     */
    async getApiUnitsRaw(requestParameters: GetApiUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UnitSummaryVm>>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        if (requestParameters['unitIds'] != null) {
            queryParameters['UnitIds'] = requestParameters['unitIds'];
        }

        if (requestParameters['languages'] != null) {
            queryParameters['Languages'] = requestParameters['languages'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/units`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UnitSummaryVmFromJSON));
    }

    /**
     */
    async getApiUnits(requestParameters: GetApiUnitsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UnitSummaryVm>> {
        const response = await this.getApiUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiUnitsByUnitIdRaw(requestParameters: GetApiUnitsByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnitSummaryVm>> {
        if (requestParameters['unitId'] == null) {
            throw new runtime.RequiredError(
                'unitId',
                'Required parameter "unitId" was null or undefined when calling getApiUnitsByUnitId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/units/{unitId}`.replace(`{${"unitId"}}`, encodeURIComponent(String(requestParameters['unitId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitSummaryVmFromJSON(jsonValue));
    }

    /**
     */
    async getApiUnitsByUnitId(requestParameters: GetApiUnitsByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnitSummaryVm> {
        const response = await this.getApiUnitsByUnitIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiUnitsByUnitIdPlayableCharactersRaw(requestParameters: GetApiUnitsByUnitIdPlayableCharactersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlayableCharacterDto>> {
        if (requestParameters['unitId'] == null) {
            throw new runtime.RequiredError(
                'unitId',
                'Required parameter "unitId" was null or undefined when calling getApiUnitsByUnitIdPlayableCharacters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/units/{unitId}/playable-characters`.replace(`{${"unitId"}}`, encodeURIComponent(String(requestParameters['unitId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayableCharacterDtoFromJSON(jsonValue));
    }

    /**
     */
    async getApiUnitsByUnitIdPlayableCharacters(requestParameters: GetApiUnitsByUnitIdPlayableCharactersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlayableCharacterDto> {
        const response = await this.getApiUnitsByUnitIdPlayableCharactersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiUnitsRaw(requestParameters: PostApiUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createUnitCommand'] == null) {
            throw new runtime.RequiredError(
                'createUnitCommand',
                'Required parameter "createUnitCommand" was null or undefined when calling postApiUnits().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/units`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUnitCommandToJSON(requestParameters['createUnitCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnits(requestParameters: PostApiUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitsBulkRaw(requestParameters: PostApiUnitsBulkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bulkCreateUnitCommand'] == null) {
            throw new runtime.RequiredError(
                'bulkCreateUnitCommand',
                'Required parameter "bulkCreateUnitCommand" was null or undefined when calling postApiUnitsBulk().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/units/bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkCreateUnitCommandToJSON(requestParameters['bulkCreateUnitCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitsBulk(requestParameters: PostApiUnitsBulkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitsBulkRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitsByUnitIdRaw(requestParameters: PostApiUnitsByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['unitId'] == null) {
            throw new runtime.RequiredError(
                'unitId',
                'Required parameter "unitId" was null or undefined when calling postApiUnitsByUnitId().'
            );
        }

        if (requestParameters['updateUnitCommand'] == null) {
            throw new runtime.RequiredError(
                'updateUnitCommand',
                'Required parameter "updateUnitCommand" was null or undefined when calling postApiUnitsByUnitId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/units/{unitId}`.replace(`{${"unitId"}}`, encodeURIComponent(String(requestParameters['unitId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUnitCommandToJSON(requestParameters['updateUnitCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitsByUnitId(requestParameters: PostApiUnitsByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitsByUnitIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitsByUnitIdPlayableCharactersRaw(requestParameters: PostApiUnitsByUnitIdPlayableCharactersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['unitId'] == null) {
            throw new runtime.RequiredError(
                'unitId',
                'Required parameter "unitId" was null or undefined when calling postApiUnitsByUnitIdPlayableCharacters().'
            );
        }

        if (requestParameters['upsertPlayableCharactersCommand'] == null) {
            throw new runtime.RequiredError(
                'upsertPlayableCharactersCommand',
                'Required parameter "upsertPlayableCharactersCommand" was null or undefined when calling postApiUnitsByUnitIdPlayableCharacters().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/units/{unitId}/playable-characters`.replace(`{${"unitId"}}`, encodeURIComponent(String(requestParameters['unitId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpsertPlayableCharactersCommandToJSON(requestParameters['upsertPlayableCharactersCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitsByUnitIdPlayableCharacters(requestParameters: PostApiUnitsByUnitIdPlayableCharactersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitsByUnitIdPlayableCharactersRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitsPlayableCharactersExportRaw(requestParameters: PostApiUnitsPlayableCharactersExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['exportPlayableCharactersCommand'] == null) {
            throw new runtime.RequiredError(
                'exportPlayableCharactersCommand',
                'Required parameter "exportPlayableCharactersCommand" was null or undefined when calling postApiUnitsPlayableCharactersExport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/units/playable-characters/export`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExportPlayableCharactersCommandToJSON(requestParameters['exportPlayableCharactersCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitsPlayableCharactersExport(requestParameters: PostApiUnitsPlayableCharactersExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitsPlayableCharactersExportRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitsPlayableCharactersImportRaw(requestParameters: PostApiUnitsPlayableCharactersImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling postApiUnitsPlayableCharactersImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api/units/playable-characters/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitsPlayableCharactersImport(requestParameters: PostApiUnitsPlayableCharactersImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitsPlayableCharactersImportRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetApiUnitsLanguagesEnum = {
    English: 'English',
    Japanese: 'Japanese',
    Chinese: 'Chinese'
} as const;
export type GetApiUnitsLanguagesEnum = typeof GetApiUnitsLanguagesEnum[keyof typeof GetApiUnitsLanguagesEnum];
