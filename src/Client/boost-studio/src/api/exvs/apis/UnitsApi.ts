/* tslint:disable */
/* eslint-disable */
/**
 * BoostStudio.Web | exvs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PostApiUnitsBulkRequest,
  PostApiUnitsRequest,
  UnitDto,
} from '../models/index';
import {
    PostApiUnitsBulkRequestFromJSON,
    PostApiUnitsBulkRequestToJSON,
    PostApiUnitsRequestFromJSON,
    PostApiUnitsRequestToJSON,
    UnitDtoFromJSON,
    UnitDtoToJSON,
} from '../models/index';

export interface GetApiUnitsRequest {
    search?: string | null;
    unitIds?: Array<number> | null;
}

export interface GetApiUnitsByUnitIdRequest {
    unitId: number;
}

export interface PostApiUnitsOperationRequest {
    postApiUnitsRequest: PostApiUnitsRequest;
}

export interface PostApiUnitsBulkOperationRequest {
    postApiUnitsBulkRequest: PostApiUnitsBulkRequest;
}

export interface PostApiUnitsByUnitIdRequest {
    unitId: number;
    postApiUnitsRequest: PostApiUnitsRequest;
}

/**
 * 
 */
export class UnitsApi extends runtime.BaseAPI {

    /**
     */
    async getApiUnitsRaw(requestParameters: GetApiUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UnitDto>>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        if (requestParameters['unitIds'] != null) {
            queryParameters['UnitIds'] = requestParameters['unitIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/units`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UnitDtoFromJSON));
    }

    /**
     */
    async getApiUnits(requestParameters: GetApiUnitsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UnitDto>> {
        const response = await this.getApiUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiUnitsByUnitIdRaw(requestParameters: GetApiUnitsByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UnitDto>> {
        if (requestParameters['unitId'] == null) {
            throw new runtime.RequiredError(
                'unitId',
                'Required parameter "unitId" was null or undefined when calling getApiUnitsByUnitId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/units/{unitId}`.replace(`{${"unitId"}}`, encodeURIComponent(String(requestParameters['unitId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitDtoFromJSON(jsonValue));
    }

    /**
     */
    async getApiUnitsByUnitId(requestParameters: GetApiUnitsByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UnitDto> {
        const response = await this.getApiUnitsByUnitIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiUnitsRaw(requestParameters: PostApiUnitsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postApiUnitsRequest'] == null) {
            throw new runtime.RequiredError(
                'postApiUnitsRequest',
                'Required parameter "postApiUnitsRequest" was null or undefined when calling postApiUnits().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/units`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostApiUnitsRequestToJSON(requestParameters['postApiUnitsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnits(requestParameters: PostApiUnitsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitsBulkRaw(requestParameters: PostApiUnitsBulkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postApiUnitsBulkRequest'] == null) {
            throw new runtime.RequiredError(
                'postApiUnitsBulkRequest',
                'Required parameter "postApiUnitsBulkRequest" was null or undefined when calling postApiUnitsBulk().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/units/bulk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostApiUnitsBulkRequestToJSON(requestParameters['postApiUnitsBulkRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitsBulk(requestParameters: PostApiUnitsBulkOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitsBulkRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitsByUnitIdRaw(requestParameters: PostApiUnitsByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['unitId'] == null) {
            throw new runtime.RequiredError(
                'unitId',
                'Required parameter "unitId" was null or undefined when calling postApiUnitsByUnitId().'
            );
        }

        if (requestParameters['postApiUnitsRequest'] == null) {
            throw new runtime.RequiredError(
                'postApiUnitsRequest',
                'Required parameter "postApiUnitsRequest" was null or undefined when calling postApiUnitsByUnitId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/units/{unitId}`.replace(`{${"unitId"}}`, encodeURIComponent(String(requestParameters['unitId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostApiUnitsRequestToJSON(requestParameters['postApiUnitsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitsByUnitId(requestParameters: PostApiUnitsByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitsByUnitIdRaw(requestParameters, initOverrides);
    }

}
