/* tslint:disable */
/* eslint-disable */
/**
 * BoostStudio.Web | exvs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateSeriesCommand,
  ExportPlayableSeriesCommand,
  PaginatedListOfSeriesDto,
} from '../models/index';
import {
    CreateSeriesCommandFromJSON,
    CreateSeriesCommandToJSON,
    ExportPlayableSeriesCommandFromJSON,
    ExportPlayableSeriesCommandToJSON,
    PaginatedListOfSeriesDtoFromJSON,
    PaginatedListOfSeriesDtoToJSON,
} from '../models/index';

export interface GetApiPlayableSeriesRequest {
    page?: number;
    perPage?: number;
    search?: Array<string>;
}

export interface PostApiPlayableSeriesRequest {
    createSeriesCommand: CreateSeriesCommand;
}

export interface PostApiPlayableSeriesExportRequest {
    exportPlayableSeriesCommand: ExportPlayableSeriesCommand;
}

export interface PostApiPlayableSeriesImportRequest {
    file: Blob;
}

/**
 * 
 */
export class SeriesApi extends runtime.BaseAPI {

    /**
     */
    async getApiPlayableSeriesRaw(requestParameters: GetApiPlayableSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfSeriesDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['PerPage'] = requestParameters['perPage'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/playable-series`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfSeriesDtoFromJSON(jsonValue));
    }

    /**
     */
    async getApiPlayableSeries(requestParameters: GetApiPlayableSeriesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfSeriesDto> {
        const response = await this.getApiPlayableSeriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiPlayableSeriesRaw(requestParameters: PostApiPlayableSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createSeriesCommand'] == null) {
            throw new runtime.RequiredError(
                'createSeriesCommand',
                'Required parameter "createSeriesCommand" was null or undefined when calling postApiPlayableSeries().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/playable-series`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSeriesCommandToJSON(requestParameters['createSeriesCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiPlayableSeries(requestParameters: PostApiPlayableSeriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiPlayableSeriesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiPlayableSeriesExportRaw(requestParameters: PostApiPlayableSeriesExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['exportPlayableSeriesCommand'] == null) {
            throw new runtime.RequiredError(
                'exportPlayableSeriesCommand',
                'Required parameter "exportPlayableSeriesCommand" was null or undefined when calling postApiPlayableSeriesExport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/playable-series/export`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExportPlayableSeriesCommandToJSON(requestParameters['exportPlayableSeriesCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiPlayableSeriesExport(requestParameters: PostApiPlayableSeriesExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiPlayableSeriesExportRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiPlayableSeriesImportRaw(requestParameters: PostApiPlayableSeriesImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling postApiPlayableSeriesImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api/playable-series/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiPlayableSeriesImport(requestParameters: PostApiPlayableSeriesImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiPlayableSeriesImportRaw(requestParameters, initOverrides);
    }

}
