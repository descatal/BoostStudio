/* tslint:disable */
/* eslint-disable */
/**
 * BoostStudio.Web | exvs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetApiHitboxes200Response,
  GetApiHitboxesByHash200Response,
  PostApiHitboxesByHashRequest,
  PostApiHitboxesRequest,
} from '../models/index';
import {
    GetApiHitboxes200ResponseFromJSON,
    GetApiHitboxes200ResponseToJSON,
    GetApiHitboxesByHash200ResponseFromJSON,
    GetApiHitboxesByHash200ResponseToJSON,
    PostApiHitboxesByHashRequestFromJSON,
    PostApiHitboxesByHashRequestToJSON,
    PostApiHitboxesRequestFromJSON,
    PostApiHitboxesRequestToJSON,
} from '../models/index';

export interface DeleteApiHitboxesByHashRequest {
    hash: number;
}

export interface GetApiHitboxesRequest {
    page?: number;
    perPage?: number;
    hashes?: Array<number> | null;
    unitIds?: Array<number> | null;
    search?: string | null;
}

export interface GetApiHitboxesByHashRequest {
    hash: number;
}

export interface PostApiHitboxesOperationRequest {
    postApiHitboxesRequest: PostApiHitboxesRequest;
}

export interface PostApiHitboxesByHashOperationRequest {
    hash: number;
    postApiHitboxesByHashRequest: PostApiHitboxesByHashRequest;
}

/**
 * 
 */
export class HitboxesApi extends runtime.BaseAPI {

    /**
     */
    async deleteApiHitboxesByHashRaw(requestParameters: DeleteApiHitboxesByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling deleteApiHitboxesByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/hitboxes/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteApiHitboxesByHash(requestParameters: DeleteApiHitboxesByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiHitboxesByHashRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getApiHitboxesRaw(requestParameters: GetApiHitboxesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApiHitboxes200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['PerPage'] = requestParameters['perPage'];
        }

        if (requestParameters['hashes'] != null) {
            queryParameters['Hashes'] = requestParameters['hashes'];
        }

        if (requestParameters['unitIds'] != null) {
            queryParameters['UnitIds'] = requestParameters['unitIds'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/hitboxes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApiHitboxes200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getApiHitboxes(requestParameters: GetApiHitboxesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApiHitboxes200Response> {
        const response = await this.getApiHitboxesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiHitboxesByHashRaw(requestParameters: GetApiHitboxesByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApiHitboxesByHash200Response>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling getApiHitboxesByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/hitboxes/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApiHitboxesByHash200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getApiHitboxesByHash(requestParameters: GetApiHitboxesByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApiHitboxesByHash200Response> {
        const response = await this.getApiHitboxesByHashRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiHitboxesRaw(requestParameters: PostApiHitboxesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postApiHitboxesRequest'] == null) {
            throw new runtime.RequiredError(
                'postApiHitboxesRequest',
                'Required parameter "postApiHitboxesRequest" was null or undefined when calling postApiHitboxes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/hitboxes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostApiHitboxesRequestToJSON(requestParameters['postApiHitboxesRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiHitboxes(requestParameters: PostApiHitboxesOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiHitboxesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiHitboxesByHashRaw(requestParameters: PostApiHitboxesByHashOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling postApiHitboxesByHash().'
            );
        }

        if (requestParameters['postApiHitboxesByHashRequest'] == null) {
            throw new runtime.RequiredError(
                'postApiHitboxesByHashRequest',
                'Required parameter "postApiHitboxesByHashRequest" was null or undefined when calling postApiHitboxesByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/hitboxes/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostApiHitboxesByHashRequestToJSON(requestParameters['postApiHitboxesByHashRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiHitboxesByHash(requestParameters: PostApiHitboxesByHashOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiHitboxesByHashRaw(requestParameters, initOverrides);
    }

}
