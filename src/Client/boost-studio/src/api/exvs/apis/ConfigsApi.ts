/* tslint:disable */
/* eslint-disable */
/**
 * BoostStudio.Web | exvs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetApiConfigs200ResponseInner,
} from '../models/index';
import {
    GetApiConfigs200ResponseInnerFromJSON,
    GetApiConfigs200ResponseInnerToJSON,
} from '../models/index';

export interface DeleteApiConfigsByKeyRequest {
    key: string;
}

export interface GetApiConfigsRequest {
    keys: Array<string>;
}

export interface GetApiConfigsByKeyRequest {
    key: string;
}

export interface PostApiConfigsRequest {
    getApiConfigs200ResponseInner: GetApiConfigs200ResponseInner;
}

/**
 * 
 */
export class ConfigsApi extends runtime.BaseAPI {

    /**
     */
    async deleteApiConfigsByKeyRaw(requestParameters: DeleteApiConfigsByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling deleteApiConfigsByKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/configs/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteApiConfigsByKey(requestParameters: DeleteApiConfigsByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiConfigsByKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getApiConfigsRaw(requestParameters: GetApiConfigsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetApiConfigs200ResponseInner>>> {
        if (requestParameters['keys'] == null) {
            throw new runtime.RequiredError(
                'keys',
                'Required parameter "keys" was null or undefined when calling getApiConfigs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['keys'] != null) {
            queryParameters['Keys'] = requestParameters['keys'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/configs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetApiConfigs200ResponseInnerFromJSON));
    }

    /**
     */
    async getApiConfigs(requestParameters: GetApiConfigsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetApiConfigs200ResponseInner>> {
        const response = await this.getApiConfigsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiConfigsByKeyRaw(requestParameters: GetApiConfigsByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling getApiConfigsByKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/configs/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getApiConfigsByKey(requestParameters: GetApiConfigsByKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getApiConfigsByKeyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiConfigsRaw(requestParameters: PostApiConfigsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['getApiConfigs200ResponseInner'] == null) {
            throw new runtime.RequiredError(
                'getApiConfigs200ResponseInner',
                'Required parameter "getApiConfigs200ResponseInner" was null or undefined when calling postApiConfigs().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/configs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetApiConfigs200ResponseInnerToJSON(requestParameters['getApiConfigs200ResponseInner']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiConfigs(requestParameters: PostApiConfigsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiConfigsRaw(requestParameters, initOverrides);
    }

}
