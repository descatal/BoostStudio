/* tslint:disable */
/* eslint-disable */
/**
 * BoostStudio.Web | exvs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface GetApiFhmPackPathRequest {
    sourcePath: string;
    destinationPath: string;
    fileName?: string | null;
}

export interface GetApiFhmUnpackPathRequest {
    sourceFilePath: string;
    outputDirectoryPath: string;
    multipleFiles?: boolean;
}

export interface PostApiFhmPackRequest {
    file?: Blob;
}

export interface PostApiFhmUnpackRequest {
    file?: Blob;
}

/**
 * 
 */
export class FhmApi extends runtime.BaseAPI {

    /**
     */
    async getApiFhmPackPathRaw(requestParameters: GetApiFhmPackPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sourcePath'] == null) {
            throw new runtime.RequiredError(
                'sourcePath',
                'Required parameter "sourcePath" was null or undefined when calling getApiFhmPackPath().'
            );
        }

        if (requestParameters['destinationPath'] == null) {
            throw new runtime.RequiredError(
                'destinationPath',
                'Required parameter "destinationPath" was null or undefined when calling getApiFhmPackPath().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sourcePath'] != null) {
            queryParameters['SourcePath'] = requestParameters['sourcePath'];
        }

        if (requestParameters['destinationPath'] != null) {
            queryParameters['DestinationPath'] = requestParameters['destinationPath'];
        }

        if (requestParameters['fileName'] != null) {
            queryParameters['FileName'] = requestParameters['fileName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/fhm/pack-path`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getApiFhmPackPath(requestParameters: GetApiFhmPackPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getApiFhmPackPathRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getApiFhmUnpackPathRaw(requestParameters: GetApiFhmUnpackPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sourceFilePath'] == null) {
            throw new runtime.RequiredError(
                'sourceFilePath',
                'Required parameter "sourceFilePath" was null or undefined when calling getApiFhmUnpackPath().'
            );
        }

        if (requestParameters['outputDirectoryPath'] == null) {
            throw new runtime.RequiredError(
                'outputDirectoryPath',
                'Required parameter "outputDirectoryPath" was null or undefined when calling getApiFhmUnpackPath().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sourceFilePath'] != null) {
            queryParameters['SourceFilePath'] = requestParameters['sourceFilePath'];
        }

        if (requestParameters['outputDirectoryPath'] != null) {
            queryParameters['OutputDirectoryPath'] = requestParameters['outputDirectoryPath'];
        }

        if (requestParameters['multipleFiles'] != null) {
            queryParameters['MultipleFiles'] = requestParameters['multipleFiles'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/fhm/unpack-path`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getApiFhmUnpackPath(requestParameters: GetApiFhmUnpackPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getApiFhmUnpackPathRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiFhmPackRaw(requestParameters: PostApiFhmPackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api/fhm/pack`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiFhmPack(requestParameters: PostApiFhmPackRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiFhmPackRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiFhmUnpackRaw(requestParameters: PostApiFhmUnpackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api/fhm/unpack`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiFhmUnpack(requestParameters: PostApiFhmUnpackRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiFhmUnpackRaw(requestParameters, initOverrides);
    }

}
