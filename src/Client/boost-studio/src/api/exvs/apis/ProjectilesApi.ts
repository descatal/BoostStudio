/* tslint:disable */
/* eslint-disable */
/**
 * BoostStudio.Web | exvs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateProjectileCommand,
  ExportUnitProjectileByPathCommand,
  ExportUnitProjectileCommand,
  PaginatedListOfProjectileDto,
  ProjectileDto,
  UpdateProjectileByIdCommand,
} from '../models/index';
import {
    CreateProjectileCommandFromJSON,
    CreateProjectileCommandToJSON,
    ExportUnitProjectileByPathCommandFromJSON,
    ExportUnitProjectileByPathCommandToJSON,
    ExportUnitProjectileCommandFromJSON,
    ExportUnitProjectileCommandToJSON,
    PaginatedListOfProjectileDtoFromJSON,
    PaginatedListOfProjectileDtoToJSON,
    ProjectileDtoFromJSON,
    ProjectileDtoToJSON,
    UpdateProjectileByIdCommandFromJSON,
    UpdateProjectileByIdCommandToJSON,
} from '../models/index';

export interface DeleteApiProjectilesByHashRequest {
    hash: number;
}

export interface GetApiProjectilesRequest {
    page?: number;
    perPage?: number;
    hashes?: Array<number>;
    unitIds?: Array<number>;
    search?: string;
}

export interface GetApiProjectilesByHashRequest {
    hash: number;
}

export interface GetApiUnitProjectilesRequest {
    page?: number;
    perPage?: number;
    unitIds?: Array<number>;
    search?: string;
}

export interface GetApiUnitProjectilesByUnitIdRequest {
    unitId: number;
}

export interface PostApiProjectilesRequest {
    createProjectileCommand: CreateProjectileCommand;
}

export interface PostApiProjectilesByHashRequest {
    hash: number;
    updateProjectileByIdCommand: UpdateProjectileByIdCommand;
}

export interface PostApiUnitProjectilesExportRequest {
    exportUnitProjectileCommand: ExportUnitProjectileCommand;
}

export interface PostApiUnitProjectilesExportPathRequest {
    exportUnitProjectileByPathCommand: ExportUnitProjectileByPathCommand;
}

export interface PostApiUnitProjectilesImportRequest {
    files: Array<Blob>;
}

export interface PostApiUnitProjectilesImportPathRequest {
    directoryPath: string;
}

/**
 * 
 */
export class ProjectilesApi extends runtime.BaseAPI {

    /**
     */
    async deleteApiProjectilesByHashRaw(requestParameters: DeleteApiProjectilesByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling deleteApiProjectilesByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/projectiles/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteApiProjectilesByHash(requestParameters: DeleteApiProjectilesByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiProjectilesByHashRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getApiProjectilesRaw(requestParameters: GetApiProjectilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedListOfProjectileDto>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['PerPage'] = requestParameters['perPage'];
        }

        if (requestParameters['hashes'] != null) {
            queryParameters['Hashes'] = requestParameters['hashes'];
        }

        if (requestParameters['unitIds'] != null) {
            queryParameters['UnitIds'] = requestParameters['unitIds'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/projectiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedListOfProjectileDtoFromJSON(jsonValue));
    }

    /**
     */
    async getApiProjectiles(requestParameters: GetApiProjectilesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedListOfProjectileDto> {
        const response = await this.getApiProjectilesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiProjectilesByHashRaw(requestParameters: GetApiProjectilesByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectileDto>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling getApiProjectilesByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/projectiles/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectileDtoFromJSON(jsonValue));
    }

    /**
     */
    async getApiProjectilesByHash(requestParameters: GetApiProjectilesByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectileDto> {
        const response = await this.getApiProjectilesByHashRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiUnitProjectilesRaw(requestParameters: GetApiUnitProjectilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['PerPage'] = requestParameters['perPage'];
        }

        if (requestParameters['unitIds'] != null) {
            queryParameters['UnitIds'] = requestParameters['unitIds'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/unit-projectiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getApiUnitProjectiles(requestParameters: GetApiUnitProjectilesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getApiUnitProjectilesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getApiUnitProjectilesByUnitIdRaw(requestParameters: GetApiUnitProjectilesByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['unitId'] == null) {
            throw new runtime.RequiredError(
                'unitId',
                'Required parameter "unitId" was null or undefined when calling getApiUnitProjectilesByUnitId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/unit-projectiles/{unitId}`.replace(`{${"unitId"}}`, encodeURIComponent(String(requestParameters['unitId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getApiUnitProjectilesByUnitId(requestParameters: GetApiUnitProjectilesByUnitIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getApiUnitProjectilesByUnitIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiProjectilesRaw(requestParameters: PostApiProjectilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['createProjectileCommand'] == null) {
            throw new runtime.RequiredError(
                'createProjectileCommand',
                'Required parameter "createProjectileCommand" was null or undefined when calling postApiProjectiles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/projectiles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectileCommandToJSON(requestParameters['createProjectileCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiProjectiles(requestParameters: PostApiProjectilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiProjectilesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiProjectilesByHashRaw(requestParameters: PostApiProjectilesByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling postApiProjectilesByHash().'
            );
        }

        if (requestParameters['updateProjectileByIdCommand'] == null) {
            throw new runtime.RequiredError(
                'updateProjectileByIdCommand',
                'Required parameter "updateProjectileByIdCommand" was null or undefined when calling postApiProjectilesByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/projectiles/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProjectileByIdCommandToJSON(requestParameters['updateProjectileByIdCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiProjectilesByHash(requestParameters: PostApiProjectilesByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiProjectilesByHashRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitProjectilesExportRaw(requestParameters: PostApiUnitProjectilesExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['exportUnitProjectileCommand'] == null) {
            throw new runtime.RequiredError(
                'exportUnitProjectileCommand',
                'Required parameter "exportUnitProjectileCommand" was null or undefined when calling postApiUnitProjectilesExport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/unit-projectiles/export`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExportUnitProjectileCommandToJSON(requestParameters['exportUnitProjectileCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitProjectilesExport(requestParameters: PostApiUnitProjectilesExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitProjectilesExportRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitProjectilesExportPathRaw(requestParameters: PostApiUnitProjectilesExportPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['exportUnitProjectileByPathCommand'] == null) {
            throw new runtime.RequiredError(
                'exportUnitProjectileByPathCommand',
                'Required parameter "exportUnitProjectileByPathCommand" was null or undefined when calling postApiUnitProjectilesExportPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/unit-projectiles/export/path`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExportUnitProjectileByPathCommandToJSON(requestParameters['exportUnitProjectileByPathCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitProjectilesExportPath(requestParameters: PostApiUnitProjectilesExportPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitProjectilesExportPathRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitProjectilesImportRaw(requestParameters: PostApiUnitProjectilesImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['files'] == null) {
            throw new runtime.RequiredError(
                'files',
                'Required parameter "files" was null or undefined when calling postApiUnitProjectilesImport().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['files'] != null) {
            requestParameters['files'].forEach((element) => {
                formParams.append('files', element as any);
            })
        }

        const response = await this.request({
            path: `/api/unit-projectiles/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitProjectilesImport(requestParameters: PostApiUnitProjectilesImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitProjectilesImportRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiUnitProjectilesImportPathRaw(requestParameters: PostApiUnitProjectilesImportPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['directoryPath'] == null) {
            throw new runtime.RequiredError(
                'directoryPath',
                'Required parameter "directoryPath" was null or undefined when calling postApiUnitProjectilesImportPath().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['directoryPath'] != null) {
            queryParameters['directoryPath'] = requestParameters['directoryPath'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/unit-projectiles/import/path`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiUnitProjectilesImportPath(requestParameters: PostApiUnitProjectilesImportPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiUnitProjectilesImportPathRaw(requestParameters, initOverrides);
    }

}
