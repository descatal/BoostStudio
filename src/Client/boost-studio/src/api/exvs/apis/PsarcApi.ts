/* tslint:disable */
/* eslint-disable */
/**
 * BoostStudio.Web | exvs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface GetApiPsarcPackRequest {
    sourcePath: string;
    destinationPath: string;
    filename?: string | null;
    compressionType?: GetApiPsarcPackCompressionTypeEnum;
    compressionLevel?: number | null;
}

export interface GetApiPsarcUnpackRequest {
    sourceFilePath: string;
    outputDirectoryPath: string;
}

/**
 * 
 */
export class PsarcApi extends runtime.BaseAPI {

    /**
     */
    async getApiPsarcPackRaw(requestParameters: GetApiPsarcPackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sourcePath'] == null) {
            throw new runtime.RequiredError(
                'sourcePath',
                'Required parameter "sourcePath" was null or undefined when calling getApiPsarcPack().'
            );
        }

        if (requestParameters['destinationPath'] == null) {
            throw new runtime.RequiredError(
                'destinationPath',
                'Required parameter "destinationPath" was null or undefined when calling getApiPsarcPack().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sourcePath'] != null) {
            queryParameters['SourcePath'] = requestParameters['sourcePath'];
        }

        if (requestParameters['destinationPath'] != null) {
            queryParameters['DestinationPath'] = requestParameters['destinationPath'];
        }

        if (requestParameters['filename'] != null) {
            queryParameters['Filename'] = requestParameters['filename'];
        }

        if (requestParameters['compressionType'] != null) {
            queryParameters['CompressionType'] = requestParameters['compressionType'];
        }

        if (requestParameters['compressionLevel'] != null) {
            queryParameters['CompressionLevel'] = requestParameters['compressionLevel'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/psarc/pack`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getApiPsarcPack(requestParameters: GetApiPsarcPackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getApiPsarcPackRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getApiPsarcUnpackRaw(requestParameters: GetApiPsarcUnpackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sourceFilePath'] == null) {
            throw new runtime.RequiredError(
                'sourceFilePath',
                'Required parameter "sourceFilePath" was null or undefined when calling getApiPsarcUnpack().'
            );
        }

        if (requestParameters['outputDirectoryPath'] == null) {
            throw new runtime.RequiredError(
                'outputDirectoryPath',
                'Required parameter "outputDirectoryPath" was null or undefined when calling getApiPsarcUnpack().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sourceFilePath'] != null) {
            queryParameters['SourceFilePath'] = requestParameters['sourceFilePath'];
        }

        if (requestParameters['outputDirectoryPath'] != null) {
            queryParameters['OutputDirectoryPath'] = requestParameters['outputDirectoryPath'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/psarc/unpack`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getApiPsarcUnpack(requestParameters: GetApiPsarcUnpackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getApiPsarcUnpackRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const GetApiPsarcPackCompressionTypeEnum = {
    None: 'None',
    Zlib: 'Zlib',
    Lzma: 'Lzma',
    Null: 'null'
} as const;
export type GetApiPsarcPackCompressionTypeEnum = typeof GetApiPsarcPackCompressionTypeEnum[keyof typeof GetApiPsarcPackCompressionTypeEnum];
