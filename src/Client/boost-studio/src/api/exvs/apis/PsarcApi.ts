/* tslint:disable */
/* eslint-disable */
/**
 * BoostStudio.Web | exvs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PackPsarcByPatchFilesCommand,
  PackPsarcByPathCommand,
  UnpackPsarcByPatchFilesCommand,
  UnpackPsarcByPathCommand,
} from '../models/index';
import {
    PackPsarcByPatchFilesCommandFromJSON,
    PackPsarcByPatchFilesCommandToJSON,
    PackPsarcByPathCommandFromJSON,
    PackPsarcByPathCommandToJSON,
    UnpackPsarcByPatchFilesCommandFromJSON,
    UnpackPsarcByPatchFilesCommandToJSON,
    UnpackPsarcByPathCommandFromJSON,
    UnpackPsarcByPathCommandToJSON,
} from '../models/index';

export interface PostApiPsarcPackPatchFilesRequest {
    packPsarcByPatchFilesCommand: PackPsarcByPatchFilesCommand;
}

export interface PostApiPsarcPackPathRequest {
    packPsarcByPathCommand: PackPsarcByPathCommand;
}

export interface PostApiPsarcUnpackPatchFilesRequest {
    unpackPsarcByPatchFilesCommand: UnpackPsarcByPatchFilesCommand;
}

export interface PostApiPsarcUnpackPathRequest {
    unpackPsarcByPathCommand: UnpackPsarcByPathCommand;
}

/**
 * 
 */
export class PsarcApi extends runtime.BaseAPI {

    /**
     */
    async postApiPsarcPackPatchFilesRaw(requestParameters: PostApiPsarcPackPatchFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['packPsarcByPatchFilesCommand'] == null) {
            throw new runtime.RequiredError(
                'packPsarcByPatchFilesCommand',
                'Required parameter "packPsarcByPatchFilesCommand" was null or undefined when calling postApiPsarcPackPatchFiles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/psarc/pack/patch-files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PackPsarcByPatchFilesCommandToJSON(requestParameters['packPsarcByPatchFilesCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiPsarcPackPatchFiles(requestParameters: PostApiPsarcPackPatchFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiPsarcPackPatchFilesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiPsarcPackPathRaw(requestParameters: PostApiPsarcPackPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['packPsarcByPathCommand'] == null) {
            throw new runtime.RequiredError(
                'packPsarcByPathCommand',
                'Required parameter "packPsarcByPathCommand" was null or undefined when calling postApiPsarcPackPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/psarc/pack/path`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PackPsarcByPathCommandToJSON(requestParameters['packPsarcByPathCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiPsarcPackPath(requestParameters: PostApiPsarcPackPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiPsarcPackPathRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiPsarcUnpackPatchFilesRaw(requestParameters: PostApiPsarcUnpackPatchFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['unpackPsarcByPatchFilesCommand'] == null) {
            throw new runtime.RequiredError(
                'unpackPsarcByPatchFilesCommand',
                'Required parameter "unpackPsarcByPatchFilesCommand" was null or undefined when calling postApiPsarcUnpackPatchFiles().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/psarc/unpack/patch-files`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnpackPsarcByPatchFilesCommandToJSON(requestParameters['unpackPsarcByPatchFilesCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiPsarcUnpackPatchFiles(requestParameters: PostApiPsarcUnpackPatchFilesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiPsarcUnpackPatchFilesRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiPsarcUnpackPathRaw(requestParameters: PostApiPsarcUnpackPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['unpackPsarcByPathCommand'] == null) {
            throw new runtime.RequiredError(
                'unpackPsarcByPathCommand',
                'Required parameter "unpackPsarcByPathCommand" was null or undefined when calling postApiPsarcUnpackPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/psarc/unpack/path`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UnpackPsarcByPathCommandToJSON(requestParameters['unpackPsarcByPathCommand']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiPsarcUnpackPath(requestParameters: PostApiPsarcUnpackPathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiPsarcUnpackPathRaw(requestParameters, initOverrides);
    }

}
