/* tslint:disable */
/* eslint-disable */
/**
 * BoostStudio.Web | exvs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HotReloadScex,
} from '../models/index';
import {
    HotReloadScexFromJSON,
    HotReloadScexToJSON,
} from '../models/index';

export interface GetApiScexCompileRequest {
    sourcePath: string;
    destinationPath: string;
    fileName?: string;
    hotReload?: boolean;
}

export interface PostApiScexHotReloadRequest {
    hotReloadScex: HotReloadScex;
}

/**
 * 
 */
export class ScexApi extends runtime.BaseAPI {

    /**
     */
    async getApiScexCompileRaw(requestParameters: GetApiScexCompileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['sourcePath'] == null) {
            throw new runtime.RequiredError(
                'sourcePath',
                'Required parameter "sourcePath" was null or undefined when calling getApiScexCompile().'
            );
        }

        if (requestParameters['destinationPath'] == null) {
            throw new runtime.RequiredError(
                'destinationPath',
                'Required parameter "destinationPath" was null or undefined when calling getApiScexCompile().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['sourcePath'] != null) {
            queryParameters['SourcePath'] = requestParameters['sourcePath'];
        }

        if (requestParameters['destinationPath'] != null) {
            queryParameters['DestinationPath'] = requestParameters['destinationPath'];
        }

        if (requestParameters['fileName'] != null) {
            queryParameters['FileName'] = requestParameters['fileName'];
        }

        if (requestParameters['hotReload'] != null) {
            queryParameters['HotReload'] = requestParameters['hotReload'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/scex/compile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getApiScexCompile(requestParameters: GetApiScexCompileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getApiScexCompileRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiScexHotReloadRaw(requestParameters: PostApiScexHotReloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['hotReloadScex'] == null) {
            throw new runtime.RequiredError(
                'hotReloadScex',
                'Required parameter "hotReloadScex" was null or undefined when calling postApiScexHotReload().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/scex/hot-reload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HotReloadScexToJSON(requestParameters['hotReloadScex']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiScexHotReload(requestParameters: PostApiScexHotReloadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiScexHotReloadRaw(requestParameters, initOverrides);
    }

}
