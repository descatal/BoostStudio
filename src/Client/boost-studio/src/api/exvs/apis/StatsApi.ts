/* tslint:disable */
/* eslint-disable */
/**
 * BoostStudio.Web | exvs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetApiStats200Response,
  GetApiStats200ResponseItemsInner,
  PostApiStatsByIdRequest,
  PostApiStatsRequest,
} from '../models/index';
import {
    GetApiStats200ResponseFromJSON,
    GetApiStats200ResponseToJSON,
    GetApiStats200ResponseItemsInnerFromJSON,
    GetApiStats200ResponseItemsInnerToJSON,
    PostApiStatsByIdRequestFromJSON,
    PostApiStatsByIdRequestToJSON,
    PostApiStatsRequestFromJSON,
    PostApiStatsRequestToJSON,
} from '../models/index';

export interface DeleteApiStatsByIdRequest {
    id: string;
}

export interface GetApiStatsRequest {
    page?: number;
    perPage?: number;
    ids?: Array<string> | null;
    unitIds?: Array<number> | null;
}

export interface GetApiStatsByIdRequest {
    id: string;
}

export interface PostApiStatsOperationRequest {
    postApiStatsRequest: PostApiStatsRequest;
}

export interface PostApiStatsByIdOperationRequest {
    id: string;
    postApiStatsByIdRequest: PostApiStatsByIdRequest;
}

/**
 * 
 */
export class StatsApi extends runtime.BaseAPI {

    /**
     */
    async deleteApiStatsByIdRaw(requestParameters: DeleteApiStatsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteApiStatsById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/stats/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteApiStatsById(requestParameters: DeleteApiStatsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiStatsByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getApiStatsRaw(requestParameters: GetApiStatsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApiStats200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['PerPage'] = requestParameters['perPage'];
        }

        if (requestParameters['ids'] != null) {
            queryParameters['Ids'] = requestParameters['ids'];
        }

        if (requestParameters['unitIds'] != null) {
            queryParameters['UnitIds'] = requestParameters['unitIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApiStats200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getApiStats(requestParameters: GetApiStatsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApiStats200Response> {
        const response = await this.getApiStatsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiStatsByIdRaw(requestParameters: GetApiStatsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApiStats200ResponseItemsInner>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getApiStatsById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/stats/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApiStats200ResponseItemsInnerFromJSON(jsonValue));
    }

    /**
     */
    async getApiStatsById(requestParameters: GetApiStatsByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApiStats200ResponseItemsInner> {
        const response = await this.getApiStatsByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiStatsRaw(requestParameters: PostApiStatsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postApiStatsRequest'] == null) {
            throw new runtime.RequiredError(
                'postApiStatsRequest',
                'Required parameter "postApiStatsRequest" was null or undefined when calling postApiStats().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/stats`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostApiStatsRequestToJSON(requestParameters['postApiStatsRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiStats(requestParameters: PostApiStatsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiStatsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiStatsByIdRaw(requestParameters: PostApiStatsByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling postApiStatsById().'
            );
        }

        if (requestParameters['postApiStatsByIdRequest'] == null) {
            throw new runtime.RequiredError(
                'postApiStatsByIdRequest',
                'Required parameter "postApiStatsByIdRequest" was null or undefined when calling postApiStatsById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/stats/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostApiStatsByIdRequestToJSON(requestParameters['postApiStatsByIdRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiStatsById(requestParameters: PostApiStatsByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiStatsByIdRaw(requestParameters, initOverrides);
    }

}
