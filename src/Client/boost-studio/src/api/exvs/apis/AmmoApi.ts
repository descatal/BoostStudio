/* tslint:disable */
/* eslint-disable */
/**
 * BoostStudio.Web | exvs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetApiAmmo200Response,
  PostApiAmmoByHashRequest,
  PostApiAmmoExportPathRequest,
  PostApiAmmoRequest,
} from '../models/index';
import {
    GetApiAmmo200ResponseFromJSON,
    GetApiAmmo200ResponseToJSON,
    PostApiAmmoByHashRequestFromJSON,
    PostApiAmmoByHashRequestToJSON,
    PostApiAmmoExportPathRequestFromJSON,
    PostApiAmmoExportPathRequestToJSON,
    PostApiAmmoRequestFromJSON,
    PostApiAmmoRequestToJSON,
} from '../models/index';

export interface DeleteApiAmmoByHashRequest {
    hash: number;
}

export interface GetApiAmmoRequest {
    page?: number;
    perPage?: number;
    hash?: Array<number> | null;
    unitIds?: Array<number> | null;
    search?: string | null;
}

export interface GetApiAmmoByHashRequest {
    hash: number;
}

export interface GetApiAmmoOptionsRequest {
    unitIds?: Array<number> | null;
}

export interface PostApiAmmoOperationRequest {
    postApiAmmoRequest: PostApiAmmoRequest;
}

export interface PostApiAmmoByHashOperationRequest {
    hash: number;
    postApiAmmoByHashRequest: PostApiAmmoByHashRequest;
}

export interface PostApiAmmoExportPathOperationRequest {
    postApiAmmoExportPathRequest: PostApiAmmoExportPathRequest;
}

export interface PostApiAmmoImportRequest {
    formFile?: Blob;
}

/**
 * 
 */
export class AmmoApi extends runtime.BaseAPI {

    /**
     */
    async deleteApiAmmoByHashRaw(requestParameters: DeleteApiAmmoByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling deleteApiAmmoByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/ammo/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteApiAmmoByHash(requestParameters: DeleteApiAmmoByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiAmmoByHashRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getApiAmmoRaw(requestParameters: GetApiAmmoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetApiAmmo200Response>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['perPage'] != null) {
            queryParameters['PerPage'] = requestParameters['perPage'];
        }

        if (requestParameters['hash'] != null) {
            queryParameters['Hash'] = requestParameters['hash'];
        }

        if (requestParameters['unitIds'] != null) {
            queryParameters['UnitIds'] = requestParameters['unitIds'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/ammo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApiAmmo200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getApiAmmo(requestParameters: GetApiAmmoRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetApiAmmo200Response> {
        const response = await this.getApiAmmoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiAmmoByHashRaw(requestParameters: GetApiAmmoByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling getApiAmmoByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/ammo/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getApiAmmoByHash(requestParameters: GetApiAmmoByHashRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getApiAmmoByHashRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getApiAmmoOptionsRaw(requestParameters: GetApiAmmoOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: any = {};

        if (requestParameters['unitIds'] != null) {
            queryParameters['UnitIds'] = requestParameters['unitIds'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/ammo/options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getApiAmmoOptions(requestParameters: GetApiAmmoOptionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<number>> {
        const response = await this.getApiAmmoOptionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiAmmoRaw(requestParameters: PostApiAmmoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postApiAmmoRequest'] == null) {
            throw new runtime.RequiredError(
                'postApiAmmoRequest',
                'Required parameter "postApiAmmoRequest" was null or undefined when calling postApiAmmo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/ammo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostApiAmmoRequestToJSON(requestParameters['postApiAmmoRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiAmmo(requestParameters: PostApiAmmoOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiAmmoRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiAmmoByHashRaw(requestParameters: PostApiAmmoByHashOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['hash'] == null) {
            throw new runtime.RequiredError(
                'hash',
                'Required parameter "hash" was null or undefined when calling postApiAmmoByHash().'
            );
        }

        if (requestParameters['postApiAmmoByHashRequest'] == null) {
            throw new runtime.RequiredError(
                'postApiAmmoByHashRequest',
                'Required parameter "postApiAmmoByHashRequest" was null or undefined when calling postApiAmmoByHash().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/ammo/{hash}`.replace(`{${"hash"}}`, encodeURIComponent(String(requestParameters['hash']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostApiAmmoByHashRequestToJSON(requestParameters['postApiAmmoByHashRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiAmmoByHash(requestParameters: PostApiAmmoByHashOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiAmmoByHashRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiAmmoExportRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/ammo/export`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiAmmoExport(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiAmmoExportRaw(initOverrides);
    }

    /**
     */
    async postApiAmmoExportPathRaw(requestParameters: PostApiAmmoExportPathOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postApiAmmoExportPathRequest'] == null) {
            throw new runtime.RequiredError(
                'postApiAmmoExportPathRequest',
                'Required parameter "postApiAmmoExportPathRequest" was null or undefined when calling postApiAmmoExportPath().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/ammo/export/path`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostApiAmmoExportPathRequestToJSON(requestParameters['postApiAmmoExportPathRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiAmmoExportPath(requestParameters: PostApiAmmoExportPathOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiAmmoExportPathRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiAmmoImportRaw(requestParameters: PostApiAmmoImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['formFile'] != null) {
            formParams.append('formFile', requestParameters['formFile'] as any);
        }

        const response = await this.request({
            path: `/api/ammo/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiAmmoImport(requestParameters: PostApiAmmoImportRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiAmmoImportRaw(requestParameters, initOverrides);
    }

}
