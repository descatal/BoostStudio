/* tslint:disable */
/* eslint-disable */
/**
 * BoostStudio.Web | exvs
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PostApiTblDeserialize200Response,
  TblMetadata2,
} from '../models/index';
import {
    PostApiTblDeserialize200ResponseFromJSON,
    PostApiTblDeserialize200ResponseToJSON,
    TblMetadata2FromJSON,
    TblMetadata2ToJSON,
} from '../models/index';

export interface GetApiTblDeserializePathRequest {
    filePath: string;
}

export interface GetApiTblSerializePathRequest {
    filePath: string;
}

export interface PostApiTblDeserializeRequest {
    file?: Blob;
}

export interface PostApiTblSerializeRequest {
    postApiTblDeserialize200Response: PostApiTblDeserialize200Response;
}

/**
 * 
 */
export class TblApi extends runtime.BaseAPI {

    /**
     */
    async getApiTblDeserializePathRaw(requestParameters: GetApiTblDeserializePathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TblMetadata2>> {
        if (requestParameters['filePath'] == null) {
            throw new runtime.RequiredError(
                'filePath',
                'Required parameter "filePath" was null or undefined when calling getApiTblDeserializePath().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filePath'] != null) {
            queryParameters['filePath'] = requestParameters['filePath'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tbl/deserialize-path`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TblMetadata2FromJSON(jsonValue));
    }

    /**
     */
    async getApiTblDeserializePath(requestParameters: GetApiTblDeserializePathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TblMetadata2> {
        const response = await this.getApiTblDeserializePathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApiTblSerializePathRaw(requestParameters: GetApiTblSerializePathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['filePath'] == null) {
            throw new runtime.RequiredError(
                'filePath',
                'Required parameter "filePath" was null or undefined when calling getApiTblSerializePath().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filePath'] != null) {
            queryParameters['filePath'] = requestParameters['filePath'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tbl/serialize-path`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getApiTblSerializePath(requestParameters: GetApiTblSerializePathRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getApiTblSerializePathRaw(requestParameters, initOverrides);
    }

    /**
     */
    async postApiTblDeserializeRaw(requestParameters: PostApiTblDeserializeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostApiTblDeserialize200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api/tbl/deserialize`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostApiTblDeserialize200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async postApiTblDeserialize(requestParameters: PostApiTblDeserializeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostApiTblDeserialize200Response> {
        const response = await this.postApiTblDeserializeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async postApiTblSerializeRaw(requestParameters: PostApiTblSerializeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postApiTblDeserialize200Response'] == null) {
            throw new runtime.RequiredError(
                'postApiTblDeserialize200Response',
                'Required parameter "postApiTblDeserialize200Response" was null or undefined when calling postApiTblSerialize().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/tbl/serialize`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostApiTblDeserialize200ResponseToJSON(requestParameters['postApiTblDeserialize200Response']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApiTblSerialize(requestParameters: PostApiTblSerializeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postApiTblSerializeRaw(requestParameters, initOverrides);
    }

}
