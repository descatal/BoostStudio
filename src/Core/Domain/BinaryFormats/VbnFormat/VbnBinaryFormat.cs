
//----------------------
// <auto-generated>
//     This is a generated file! Please edit source .ksy file and use kaitai-struct-compiler to rebuild
// </auto-generated>
//----------------------
using Kaitai;
using System.Collections.Generic;

namespace BoostStudio.Formats
{
    public partial class VbnBinaryFormat : KaitaiStruct
    {
        public static VbnBinaryFormat FromFile(string fileName)
        {
            return new VbnBinaryFormat(new KaitaiStream(fileName));
        }

        public VbnBinaryFormat(KaitaiStream p__io, KaitaiStruct p__parent = null, VbnBinaryFormat p__root = null, bool write = false) : base(p__io)
        {
            m_parent = p__parent;
            m_root = p__root ?? this;
            if (!write)
                _read();
        }
        private void _read()
        {
            _header = new HeaderData(m_io, this, m_root);
            _bones = new List<BoneData>();
            for (var i = 0; i < Header.NumBones; i++)
            {
                _bones.Add(new BoneData(i, m_io, this, m_root));
            }
            _transformationMatrix = new List<TransformationMatrixData>();
            for (var i = 0; i < Header.NumBones; i++)
            {
                _transformationMatrix.Add(new TransformationMatrixData(m_io, this, m_root));
            }
            _padding = m_io.ReadBytes(KaitaiStream.Mod(-(M_Io.Pos), 8));
            _inverseBoneTransformationMatrix = new List<TransformMatrixData>();
            for (var i = 0; i < Header.NumBones; i++)
            {
                _inverseBoneTransformationMatrix.Add(new TransformMatrixData(m_io, this, m_root));
            }
            _boneTransformationMatrix = new List<TransformMatrixData>();
            for (var i = 0; i < Header.NumBones; i++)
            {
                _boneTransformationMatrix.Add(new TransformMatrixData(m_io, this, m_root));
            }
        }
        public partial class BoneData : KaitaiStruct
        {
            public BoneData(int p_i, KaitaiStream p__io, VbnBinaryFormat p__parent = null, VbnBinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                _i = p_i;
                f_boneTransformationMatrix = write;
                f_inverseBoneTransformationMatrix = write;
                f_parentBone = write;
                f_transformationMatrix = write;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _name = System.Text.Encoding.GetEncoding("UTF-8").GetString(m_io.ReadBytes(16));
                _type = m_io.ReadU4be();
                _parentBoneIndex = m_io.ReadS4be();
            }
            private bool f_boneTransformationMatrix;
            private TransformMatrixData _boneTransformationMatrix;
            public TransformMatrixData BoneTransformationMatrix
            {
                get
                {
                    if (f_boneTransformationMatrix)
                        return _boneTransformationMatrix;
                    f_boneTransformationMatrix = true;
                    _boneTransformationMatrix = (TransformMatrixData)(M_Parent.BoneTransformationMatrix[I]);
                    return _boneTransformationMatrix;
                }

                set
                {
                    _boneTransformationMatrix = value;
                }
            }
            private bool f_inverseBoneTransformationMatrix;
            private TransformMatrixData _inverseBoneTransformationMatrix;
            public TransformMatrixData InverseBoneTransformationMatrix
            {
                get
                {
                    if (f_inverseBoneTransformationMatrix)
                        return _inverseBoneTransformationMatrix;
                    f_inverseBoneTransformationMatrix = true;
                    _inverseBoneTransformationMatrix = (TransformMatrixData)(M_Parent.InverseBoneTransformationMatrix[I]);
                    return _inverseBoneTransformationMatrix;
                }

                set
                {
                    _inverseBoneTransformationMatrix = value;
                }
            }
            private bool f_parentBone;
            private BoneData _parentBone;
            public BoneData ParentBone
            {
                get
                {
                    if (f_parentBone)
                        return _parentBone;
                    f_parentBone = true;
                    _parentBone = (BoneData)(M_Parent.Bones[ParentBoneIndex]);
                    return _parentBone;
                }

                set
                {
                    _parentBone = value;
                }
            }
            private bool f_transformationMatrix;
            private TransformationMatrixData _transformationMatrix;
            public TransformationMatrixData TransformationMatrix
            {
                get
                {
                    if (f_transformationMatrix)
                        return _transformationMatrix;
                    f_transformationMatrix = true;
                    _transformationMatrix = (TransformationMatrixData)(M_Parent.TransformationMatrix[I]);
                    return _transformationMatrix;
                }

                set
                {
                    _transformationMatrix = value;
                }
            }
            private string _name;
            private uint _type;
            private int _parentBoneIndex;
            private int _i;
            private VbnBinaryFormat m_root;
            private VbnBinaryFormat m_parent;
            public string Name
            {
                get { return _name; }

                set
                {
                    _name = value;
                }
            }
            public uint Type
            {
                get { return _type; }

                set
                {
                    _type = value;
                }
            }
            public int ParentBoneIndex
            {
                get { return _parentBoneIndex; }

                set
                {
                    _parentBoneIndex = value;
                }
            }
            public int I
            {
                get { return _i; }

                set
                {
                    _i = value;
                }
            }
            public VbnBinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public VbnBinaryFormat M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class FloatV4 : KaitaiStruct
        {
            public static FloatV4 FromFile(string fileName)
            {
                return new FloatV4(new KaitaiStream(fileName));
            }

            public FloatV4(KaitaiStream p__io, VbnBinaryFormat.TransformMatrixData p__parent = null, VbnBinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _x = m_io.ReadF4be();
                _y = m_io.ReadF4be();
                _z = m_io.ReadF4be();
                _w = m_io.ReadF4be();
            }
            private float _x;
            private float _y;
            private float _z;
            private float _w;
            private VbnBinaryFormat m_root;
            private VbnBinaryFormat.TransformMatrixData m_parent;
            public float X
            {
                get { return _x; }

                set
                {
                    _x = value;
                }
            }
            public float Y
            {
                get { return _y; }

                set
                {
                    _y = value;
                }
            }
            public float Z
            {
                get { return _z; }

                set
                {
                    _z = value;
                }
            }
            public float W
            {
                get { return _w; }

                set
                {
                    _w = value;
                }
            }
            public VbnBinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public VbnBinaryFormat.TransformMatrixData M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class HeaderData : KaitaiStruct
        {
            public static HeaderData FromFile(string fileName)
            {
                return new HeaderData(new KaitaiStream(fileName));
            }

            public HeaderData(KaitaiStream p__io, VbnBinaryFormat p__parent = null, VbnBinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _magic = m_io.ReadBytes(4);
                if (!((KaitaiStream.ByteArrayCompare(_magic, new byte[] { 86, 66, 78, 32 }) == 0)))
                {
                    throw new ValidationNotEqualError(new byte[] { 86, 66, 78, 32 }, _magic, m_io, "/types/header_data/seq/0");
                }
                _version = m_io.ReadU2be();
                _unk6 = m_io.ReadU2be();
                _flags = m_io.ReadU4be();
                _numBones = m_io.ReadU4be();
                _numAnimationBones = m_io.ReadU4be();
                _numAttachmentBones = m_io.ReadU4be();
                _alignment = m_io.ReadBytes(8);
            }
            private byte[] _magic;
            private ushort _version;
            private ushort _unk6;
            private uint _flags;
            private uint _numBones;
            private uint _numAnimationBones;
            private uint _numAttachmentBones;
            private byte[] _alignment;
            private VbnBinaryFormat m_root;
            private VbnBinaryFormat m_parent;
            public byte[] Magic
            {
                get { return _magic; }

                set
                {
                    _magic = value;
                }
            }
            public ushort Version
            {
                get { return _version; }

                set
                {
                    _version = value;
                }
            }
            public ushort Unk6
            {
                get { return _unk6; }

                set
                {
                    _unk6 = value;
                }
            }

            /// <summary>
            /// 0x1 for main body
            /// 0x190 for T-Pose for guns and other parts
            /// 0x191 is also observed
            /// </summary>
            public uint Flags
            {
                get { return _flags; }

                set
                {
                    _flags = value;
                }
            }
            public uint NumBones
            {
                get { return _numBones; }

                set
                {
                    _numBones = value;
                }
            }

            /// <summary>
            /// Number of main bones (type 0) that'll be used in animations
            /// </summary>
            public uint NumAnimationBones
            {
                get { return _numAnimationBones; }

                set
                {
                    _numAnimationBones = value;
                }
            }

            /// <summary>
            /// Number of attachment bones (type 1) that are not used in animations
            /// </summary>
            public uint NumAttachmentBones
            {
                get { return _numAttachmentBones; }

                set
                {
                    _numAttachmentBones = value;
                }
            }
            public byte[] Alignment
            {
                get { return _alignment; }

                set
                {
                    _alignment = value;
                }
            }
            public VbnBinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public VbnBinaryFormat M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class TransformMatrixData : KaitaiStruct
        {
            public static TransformMatrixData FromFile(string fileName)
            {
                return new TransformMatrixData(new KaitaiStream(fileName));
            }

            public TransformMatrixData(KaitaiStream p__io, VbnBinaryFormat p__parent = null, VbnBinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _row0 = new FloatV4(m_io, this, m_root);
                _row1 = new FloatV4(m_io, this, m_root);
                _row2 = new FloatV4(m_io, this, m_root);
                _row3 = new FloatV4(m_io, this, m_root);
            }
            private FloatV4 _row0;
            private FloatV4 _row1;
            private FloatV4 _row2;
            private FloatV4 _row3;
            private VbnBinaryFormat m_root;
            private VbnBinaryFormat m_parent;
            public FloatV4 Row0
            {
                get { return _row0; }

                set
                {
                    _row0 = value;
                }
            }
            public FloatV4 Row1
            {
                get { return _row1; }

                set
                {
                    _row1 = value;
                }
            }
            public FloatV4 Row2
            {
                get { return _row2; }

                set
                {
                    _row2 = value;
                }
            }
            public FloatV4 Row3
            {
                get { return _row3; }

                set
                {
                    _row3 = value;
                }
            }
            public VbnBinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public VbnBinaryFormat M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class TransformationMatrixData : KaitaiStruct
        {
            public static TransformationMatrixData FromFile(string fileName)
            {
                return new TransformationMatrixData(new KaitaiStream(fileName));
            }

            public TransformationMatrixData(KaitaiStream p__io, VbnBinaryFormat p__parent = null, VbnBinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _translationX = m_io.ReadF4be();
                _translationY = m_io.ReadF4be();
                _translationZ = m_io.ReadF4be();
                _rotationX = m_io.ReadF4be();
                _rotationY = m_io.ReadF4be();
                _rotationZ = m_io.ReadF4be();
                _scaleX = m_io.ReadF4be();
                _scaleY = m_io.ReadF4be();
                _scaleZ = m_io.ReadF4be();
            }
            private float _translationX;
            private float _translationY;
            private float _translationZ;
            private float _rotationX;
            private float _rotationY;
            private float _rotationZ;
            private float _scaleX;
            private float _scaleY;
            private float _scaleZ;
            private VbnBinaryFormat m_root;
            private VbnBinaryFormat m_parent;
            public float TranslationX
            {
                get { return _translationX; }

                set
                {
                    _translationX = value;
                }
            }
            public float TranslationY
            {
                get { return _translationY; }

                set
                {
                    _translationY = value;
                }
            }
            public float TranslationZ
            {
                get { return _translationZ; }

                set
                {
                    _translationZ = value;
                }
            }
            public float RotationX
            {
                get { return _rotationX; }

                set
                {
                    _rotationX = value;
                }
            }
            public float RotationY
            {
                get { return _rotationY; }

                set
                {
                    _rotationY = value;
                }
            }
            public float RotationZ
            {
                get { return _rotationZ; }

                set
                {
                    _rotationZ = value;
                }
            }
            public float ScaleX
            {
                get { return _scaleX; }

                set
                {
                    _scaleX = value;
                }
            }
            public float ScaleY
            {
                get { return _scaleY; }

                set
                {
                    _scaleY = value;
                }
            }
            public float ScaleZ
            {
                get { return _scaleZ; }

                set
                {
                    _scaleZ = value;
                }
            }
            public VbnBinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public VbnBinaryFormat M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        private HeaderData _header;
        private List<BoneData> _bones;
        private List<TransformationMatrixData> _transformationMatrix;
        private byte[] _padding;
        private List<TransformMatrixData> _inverseBoneTransformationMatrix;
        private List<TransformMatrixData> _boneTransformationMatrix;
        private VbnBinaryFormat m_root;
        private KaitaiStruct m_parent;
        public HeaderData Header
        {
            get { return _header; }

            set
            {
                _header = value;
            }
        }
        public List<BoneData> Bones
        {
            get { return _bones; }

            set
            {
                _bones = value;
            }
        }
        public List<TransformationMatrixData> TransformationMatrix
        {
            get { return _transformationMatrix; }

            set
            {
                _transformationMatrix = value;
            }
        }
        public byte[] Padding
        {
            get { return _padding; }

            set
            {
                _padding = value;
            }
        }
        public List<TransformMatrixData> InverseBoneTransformationMatrix
        {
            get { return _inverseBoneTransformationMatrix; }

            set
            {
                _inverseBoneTransformationMatrix = value;
            }
        }
        public List<TransformMatrixData> BoneTransformationMatrix
        {
            get { return _boneTransformationMatrix; }

            set
            {
                _boneTransformationMatrix = value;
            }
        }
        public VbnBinaryFormat M_Root
        {
            get { return m_root; }

            set
            {
                m_root = value;
            }
        }
        public KaitaiStruct M_Parent
        {
            get { return m_parent; }

            set
            {
                m_parent = value;
            }
        }
    }
}
