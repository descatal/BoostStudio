
//----------------------
// <auto-generated>
//     This is a generated file! Please edit source .ksy file and use kaitai-struct-compiler to rebuild
// </auto-generated>
//----------------------
using Kaitai;
using System.Collections.Generic;

namespace BoostStudio.Formats
{
    public partial class VbnBinaryFormat : KaitaiStruct
    {
        public static VbnBinaryFormat FromFile(string fileName)
        {
            return new VbnBinaryFormat(new KaitaiStream(fileName));
        }

        public VbnBinaryFormat(KaitaiStream p__io, KaitaiStruct p__parent = null, VbnBinaryFormat p__root = null, bool write = false) : base(p__io)
        {
            m_parent = p__parent;
            m_root = p__root ?? this;
            if (!write)
                _read();
        }
        private void _read()
        {
            _header = new HeaderData(m_io, this, m_root);
            _bones = new List<BoneData>();
            for (var i = 0; i < Header.NumBones; i++)
            {
                _bones.Add(new BoneData(i, m_io, this, m_root));
            }
            _localTransforms = new List<LocalTransformData>();
            for (var i = 0; i < Header.NumBones; i++)
            {
                _localTransforms.Add(new LocalTransformData(m_io, this, m_root));
            }
            _padding = m_io.ReadBytes(KaitaiStream.Mod(-(M_Io.Pos), 8));
            _inverseBindMatrices = new List<Matrix4x4>();
            for (var i = 0; i < Header.NumBones; i++)
            {
                _inverseBindMatrices.Add(new Matrix4x4(m_io, this, m_root));
            }
            _bindMatrices = new List<Matrix4x4>();
            for (var i = 0; i < Header.NumBones; i++)
            {
                _bindMatrices.Add(new Matrix4x4(m_io, this, m_root));
            }
        }
        public partial class BoneData : KaitaiStruct
        {
            public BoneData(int p_i, KaitaiStream p__io, VbnBinaryFormat p__parent = null, VbnBinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                _i = p_i;
                f_bindMatrix = write;
                f_inverseBindMatrix = write;
                f_localTransform = write;
                f_parentBone = write;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _name = System.Text.Encoding.GetEncoding("UTF-8").GetString(m_io.ReadBytes(16));
                _type = m_io.ReadU4be();
                _parentBoneIndex = m_io.ReadS4be();
            }
            private bool f_bindMatrix;
            private Matrix4x4 _bindMatrix;
            public Matrix4x4 BindMatrix
            {
                get
                {
                    if (f_bindMatrix)
                        return _bindMatrix;
                    f_bindMatrix = true;
                    _bindMatrix = (Matrix4x4)(M_Parent.BindMatrices[I]);
                    return _bindMatrix;
                }

                set
                {
                    _bindMatrix = value;
                }
            }
            private bool f_inverseBindMatrix;
            private Matrix4x4 _inverseBindMatrix;
            public Matrix4x4 InverseBindMatrix
            {
                get
                {
                    if (f_inverseBindMatrix)
                        return _inverseBindMatrix;
                    f_inverseBindMatrix = true;
                    _inverseBindMatrix = (Matrix4x4)(M_Parent.InverseBindMatrices[I]);
                    return _inverseBindMatrix;
                }

                set
                {
                    _inverseBindMatrix = value;
                }
            }
            private bool f_localTransform;
            private LocalTransformData _localTransform;
            public LocalTransformData LocalTransform
            {
                get
                {
                    if (f_localTransform)
                        return _localTransform;
                    f_localTransform = true;
                    _localTransform = (LocalTransformData)(M_Parent.LocalTransforms[I]);
                    return _localTransform;
                }

                set
                {
                    _localTransform = value;
                }
            }
            private bool f_parentBone;
            private BoneData _parentBone;
            public BoneData ParentBone
            {
                get
                {
                    if (f_parentBone)
                        return _parentBone;
                    f_parentBone = true;
                    _parentBone = (BoneData)(M_Parent.Bones[ParentBoneIndex]);
                    return _parentBone;
                }

                set
                {
                    _parentBone = value;
                }
            }
            private string _name;
            private uint _type;
            private int _parentBoneIndex;
            private int _i;
            private VbnBinaryFormat m_root;
            private VbnBinaryFormat m_parent;
            public string Name
            {
                get { return _name; }

                set
                {
                    _name = value;
                }
            }
            public uint Type
            {
                get { return _type; }

                set
                {
                    _type = value;
                }
            }
            public int ParentBoneIndex
            {
                get { return _parentBoneIndex; }

                set
                {
                    _parentBoneIndex = value;
                }
            }
            public int I
            {
                get { return _i; }

                set
                {
                    _i = value;
                }
            }
            public VbnBinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public VbnBinaryFormat M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class HeaderData : KaitaiStruct
        {
            public static HeaderData FromFile(string fileName)
            {
                return new HeaderData(new KaitaiStream(fileName));
            }

            public HeaderData(KaitaiStream p__io, VbnBinaryFormat p__parent = null, VbnBinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _magic = m_io.ReadBytes(4);
                if (!((KaitaiStream.ByteArrayCompare(_magic, new byte[] { 86, 66, 78, 32 }) == 0)))
                {
                    throw new ValidationNotEqualError(new byte[] { 86, 66, 78, 32 }, _magic, m_io, "/types/header_data/seq/0");
                }
                _version = m_io.ReadU2be();
                _unk6 = m_io.ReadU2be();
                _flags = m_io.ReadU4be();
                _numBones = m_io.ReadU4be();
                _numAnimationBones = m_io.ReadU4be();
                _numAttachmentBones = m_io.ReadU4be();
                _alignment = m_io.ReadBytes(8);
            }
            private byte[] _magic;
            private ushort _version;
            private ushort _unk6;
            private uint _flags;
            private uint _numBones;
            private uint _numAnimationBones;
            private uint _numAttachmentBones;
            private byte[] _alignment;
            private VbnBinaryFormat m_root;
            private VbnBinaryFormat m_parent;
            public byte[] Magic
            {
                get { return _magic; }

                set
                {
                    _magic = value;
                }
            }
            public ushort Version
            {
                get { return _version; }

                set
                {
                    _version = value;
                }
            }
            public ushort Unk6
            {
                get { return _unk6; }

                set
                {
                    _unk6 = value;
                }
            }

            /// <summary>
            /// 0x1 for main body
            /// 0x190 for T-Pose for guns and other parts
            /// 0x191 is also observed
            /// </summary>
            public uint Flags
            {
                get { return _flags; }

                set
                {
                    _flags = value;
                }
            }
            public uint NumBones
            {
                get { return _numBones; }

                set
                {
                    _numBones = value;
                }
            }

            /// <summary>
            /// Number of main bones (type 0) that'll be used in animations
            /// </summary>
            public uint NumAnimationBones
            {
                get { return _numAnimationBones; }

                set
                {
                    _numAnimationBones = value;
                }
            }

            /// <summary>
            /// Number of attachment bones (type 1) that are not used in animations
            /// </summary>
            public uint NumAttachmentBones
            {
                get { return _numAttachmentBones; }

                set
                {
                    _numAttachmentBones = value;
                }
            }
            public byte[] Alignment
            {
                get { return _alignment; }

                set
                {
                    _alignment = value;
                }
            }
            public VbnBinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public VbnBinaryFormat M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class LocalTransformData : KaitaiStruct
        {
            public static LocalTransformData FromFile(string fileName)
            {
                return new LocalTransformData(new KaitaiStream(fileName));
            }

            public LocalTransformData(KaitaiStream p__io, VbnBinaryFormat p__parent = null, VbnBinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _translation = new Vector3(m_io, this, m_root);
                _rotation = new Vector3(m_io, this, m_root);
                _scale = new Vector3(m_io, this, m_root);
            }
            private Vector3 _translation;
            private Vector3 _rotation;
            private Vector3 _scale;
            private VbnBinaryFormat m_root;
            private VbnBinaryFormat m_parent;
            public Vector3 Translation
            {
                get { return _translation; }

                set
                {
                    _translation = value;
                }
            }
            public Vector3 Rotation
            {
                get { return _rotation; }

                set
                {
                    _rotation = value;
                }
            }
            public Vector3 Scale
            {
                get { return _scale; }

                set
                {
                    _scale = value;
                }
            }
            public VbnBinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public VbnBinaryFormat M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class Matrix4x4 : KaitaiStruct
        {
            public static Matrix4x4 FromFile(string fileName)
            {
                return new Matrix4x4(new KaitaiStream(fileName));
            }

            public Matrix4x4(KaitaiStream p__io, VbnBinaryFormat p__parent = null, VbnBinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _row0 = new Vector4(m_io, this, m_root);
                _row1 = new Vector4(m_io, this, m_root);
                _row2 = new Vector4(m_io, this, m_root);
                _row3 = new Vector4(m_io, this, m_root);
            }
            private Vector4 _row0;
            private Vector4 _row1;
            private Vector4 _row2;
            private Vector4 _row3;
            private VbnBinaryFormat m_root;
            private VbnBinaryFormat m_parent;
            public Vector4 Row0
            {
                get { return _row0; }

                set
                {
                    _row0 = value;
                }
            }
            public Vector4 Row1
            {
                get { return _row1; }

                set
                {
                    _row1 = value;
                }
            }
            public Vector4 Row2
            {
                get { return _row2; }

                set
                {
                    _row2 = value;
                }
            }
            public Vector4 Row3
            {
                get { return _row3; }

                set
                {
                    _row3 = value;
                }
            }
            public VbnBinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public VbnBinaryFormat M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class Vector3 : KaitaiStruct
        {
            public static Vector3 FromFile(string fileName)
            {
                return new Vector3(new KaitaiStream(fileName));
            }

            public Vector3(KaitaiStream p__io, VbnBinaryFormat.LocalTransformData p__parent = null, VbnBinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _x = m_io.ReadF4be();
                _y = m_io.ReadF4be();
                _z = m_io.ReadF4be();
            }
            private float _x;
            private float _y;
            private float _z;
            private VbnBinaryFormat m_root;
            private VbnBinaryFormat.LocalTransformData m_parent;
            public float X
            {
                get { return _x; }

                set
                {
                    _x = value;
                }
            }
            public float Y
            {
                get { return _y; }

                set
                {
                    _y = value;
                }
            }
            public float Z
            {
                get { return _z; }

                set
                {
                    _z = value;
                }
            }
            public VbnBinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public VbnBinaryFormat.LocalTransformData M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class Vector4 : KaitaiStruct
        {
            public static Vector4 FromFile(string fileName)
            {
                return new Vector4(new KaitaiStream(fileName));
            }

            public Vector4(KaitaiStream p__io, VbnBinaryFormat.Matrix4x4 p__parent = null, VbnBinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _x = m_io.ReadF4be();
                _y = m_io.ReadF4be();
                _z = m_io.ReadF4be();
                _w = m_io.ReadF4be();
            }
            private float _x;
            private float _y;
            private float _z;
            private float _w;
            private VbnBinaryFormat m_root;
            private VbnBinaryFormat.Matrix4x4 m_parent;
            public float X
            {
                get { return _x; }

                set
                {
                    _x = value;
                }
            }
            public float Y
            {
                get { return _y; }

                set
                {
                    _y = value;
                }
            }
            public float Z
            {
                get { return _z; }

                set
                {
                    _z = value;
                }
            }
            public float W
            {
                get { return _w; }

                set
                {
                    _w = value;
                }
            }
            public VbnBinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public VbnBinaryFormat.Matrix4x4 M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        private HeaderData _header;
        private List<BoneData> _bones;
        private List<LocalTransformData> _localTransforms;
        private byte[] _padding;
        private List<Matrix4x4> _inverseBindMatrices;
        private List<Matrix4x4> _bindMatrices;
        private VbnBinaryFormat m_root;
        private KaitaiStruct m_parent;
        public HeaderData Header
        {
            get { return _header; }

            set
            {
                _header = value;
            }
        }
        public List<BoneData> Bones
        {
            get { return _bones; }

            set
            {
                _bones = value;
            }
        }
        public List<LocalTransformData> LocalTransforms
        {
            get { return _localTransforms; }

            set
            {
                _localTransforms = value;
            }
        }
        public byte[] Padding
        {
            get { return _padding; }

            set
            {
                _padding = value;
            }
        }
        public List<Matrix4x4> InverseBindMatrices
        {
            get { return _inverseBindMatrices; }

            set
            {
                _inverseBindMatrices = value;
            }
        }
        public List<Matrix4x4> BindMatrices
        {
            get { return _bindMatrices; }

            set
            {
                _bindMatrices = value;
            }
        }
        public VbnBinaryFormat M_Root
        {
            get { return m_root; }

            set
            {
                m_root = value;
            }
        }
        public KaitaiStruct M_Parent
        {
            get { return m_parent; }

            set
            {
                m_parent = value;
            }
        }
    }
}
