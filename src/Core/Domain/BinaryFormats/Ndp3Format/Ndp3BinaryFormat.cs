
//----------------------
// <auto-generated>
//     This is a generated file! Please edit source .ksy file and use kaitai-struct-compiler to rebuild
// </auto-generated>
//----------------------
using Kaitai;
using System.Collections.Generic;

namespace BoostStudio.Formats
{
    public partial class Ndp3BinaryFormat : KaitaiStruct
    {
        public static Ndp3BinaryFormat FromFile(string fileName)
        {
            return new Ndp3BinaryFormat(new KaitaiStream(fileName));
        }

        public Ndp3BinaryFormat(KaitaiStream p__io, KaitaiStruct p__parent = null, Ndp3BinaryFormat p__root = null, bool write = false) : base(p__io)
        {
            m_parent = p__parent;
            m_root = p__root ?? this;
            if (!write)
                _read();
        }
        private void _read()
        {
            _header = new HeaderData(m_io, this, m_root);
            _boundingSphere1 = new BoundingSphere(m_io, this, m_root);
            _boundingSphere2 = new BoundingSphere(m_io, this, m_root);
            _boundingSphere3 = new BoundingSphere(m_io, this, m_root);
            _meshes = new List<MeshData>();
            for (var i = 0; i < Header.PolysetsCount; i++)
            {
                _meshes.Add(new MeshData(m_io, this, m_root));
            }
        }
        public partial class BoneData : KaitaiStruct
        {
            public static BoneData FromFile(string fileName)
            {
                return new BoneData(new KaitaiStream(fileName));
            }

            public BoneData(KaitaiStream p__io, Ndp3BinaryFormat.PosData p__parent = null, Ndp3BinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _ids = new List<uint>();
                for (var i = 0; i < 4; i++)
                {
                    _ids.Add(m_io.ReadU4be());
                }
                _weights = new List<float>();
                for (var i = 0; i < 4; i++)
                {
                    _weights.Add(m_io.ReadF4be());
                }
            }
            private List<uint> _ids;
            private List<float> _weights;
            private Ndp3BinaryFormat m_root;
            private Ndp3BinaryFormat.PosData m_parent;
            public List<uint> Ids
            {
                get { return _ids; }

                set
                {
                    _ids = value;
                }
            }
            public List<float> Weights
            {
                get { return _weights; }

                set
                {
                    _weights = value;
                }
            }
            public Ndp3BinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public Ndp3BinaryFormat.PosData M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class BoundingSphere : KaitaiStruct
        {
            public static BoundingSphere FromFile(string fileName)
            {
                return new BoundingSphere(new KaitaiStream(fileName));
            }

            public BoundingSphere(KaitaiStream p__io, Ndp3BinaryFormat p__parent = null, Ndp3BinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _centerX = m_io.ReadF4be();
                _centerY = m_io.ReadF4be();
                _centerZ = m_io.ReadF4be();
                _radius = m_io.ReadF4be();
            }
            private float _centerX;
            private float _centerY;
            private float _centerZ;
            private float _radius;
            private Ndp3BinaryFormat m_root;
            private Ndp3BinaryFormat m_parent;
            public float CenterX
            {
                get { return _centerX; }

                set
                {
                    _centerX = value;
                }
            }
            public float CenterY
            {
                get { return _centerY; }

                set
                {
                    _centerY = value;
                }
            }
            public float CenterZ
            {
                get { return _centerZ; }

                set
                {
                    _centerZ = value;
                }
            }
            public float Radius
            {
                get { return _radius; }

                set
                {
                    _radius = value;
                }
            }
            public Ndp3BinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public Ndp3BinaryFormat M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class FloatPos : KaitaiStruct
        {
            public static FloatPos FromFile(string fileName)
            {
                return new FloatPos(new KaitaiStream(fileName));
            }

            public FloatPos(KaitaiStream p__io, Ndp3BinaryFormat.PosData p__parent = null, Ndp3BinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _x = m_io.ReadF4be();
                _y = m_io.ReadF4be();
                _z = m_io.ReadF4be();
                _w = m_io.ReadF4be();
            }
            private float _x;
            private float _y;
            private float _z;
            private float _w;
            private Ndp3BinaryFormat m_root;
            private Ndp3BinaryFormat.PosData m_parent;
            public float X
            {
                get { return _x; }

                set
                {
                    _x = value;
                }
            }
            public float Y
            {
                get { return _y; }

                set
                {
                    _y = value;
                }
            }
            public float Z
            {
                get { return _z; }

                set
                {
                    _z = value;
                }
            }
            public float W
            {
                get { return _w; }

                set
                {
                    _w = value;
                }
            }
            public Ndp3BinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public Ndp3BinaryFormat.PosData M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class HeaderData : KaitaiStruct
        {
            public static HeaderData FromFile(string fileName)
            {
                return new HeaderData(new KaitaiStream(fileName));
            }

            public HeaderData(KaitaiStream p__io, Ndp3BinaryFormat p__parent = null, Ndp3BinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                f_nameclumpPointer = write;
                f_polyclumpPointer = write;
                f_vertaddclumpPointer = write;
                f_vertclumpPointer = write;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _magic = m_io.ReadBytes(4);
                if (!((KaitaiStream.ByteArrayCompare(_magic, new byte[] { 78, 68, 80, 51 }) == 0)))
                {
                    throw new ValidationNotEqualError(new byte[] { 78, 68, 80, 51 }, _magic, m_io, "/types/header_data/seq/0");
                }
                _length = m_io.ReadU4be();
                _version = m_io.ReadU2be();
                _polysetsCount = m_io.ReadU2be();
                _boneIndexStart = m_io.ReadU2be();
                _boneIndexEnd = m_io.ReadU2be();
                _polyclumpStart = m_io.ReadU4be();
                _polyclumpSize = m_io.ReadU4be();
                _vertclumpSize = m_io.ReadU4be();
                _vertaddclumpSize = m_io.ReadU4be();
            }
            private bool f_nameclumpPointer;
            private int _nameclumpPointer;
            public int NameclumpPointer
            {
                get
                {
                    if (f_nameclumpPointer)
                        return _nameclumpPointer;
                    f_nameclumpPointer = true;
                    _nameclumpPointer = (int)(VertaddclumpPointer + VertaddclumpSize);
                    return _nameclumpPointer;
                }

                set
                {
                    _nameclumpPointer = value;
                }
            }
            private bool f_polyclumpPointer;
            private int _polyclumpPointer;
            public int PolyclumpPointer
            {
                get
                {
                    if (f_polyclumpPointer)
                        return _polyclumpPointer;
                    f_polyclumpPointer = true;
                    _polyclumpPointer = (int)(48 + PolyclumpStart);
                    return _polyclumpPointer;
                }

                set
                {
                    _polyclumpPointer = value;
                }
            }
            private bool f_vertaddclumpPointer;
            private int _vertaddclumpPointer;
            public int VertaddclumpPointer
            {
                get
                {
                    if (f_vertaddclumpPointer)
                        return _vertaddclumpPointer;
                    f_vertaddclumpPointer = true;
                    _vertaddclumpPointer = (int)(VertclumpPointer + VertclumpSize);
                    return _vertaddclumpPointer;
                }

                set
                {
                    _vertaddclumpPointer = value;
                }
            }
            private bool f_vertclumpPointer;
            private int _vertclumpPointer;
            public int VertclumpPointer
            {
                get
                {
                    if (f_vertclumpPointer)
                        return _vertclumpPointer;
                    f_vertclumpPointer = true;
                    _vertclumpPointer = (int)(PolyclumpPointer + PolyclumpSize);
                    return _vertclumpPointer;
                }

                set
                {
                    _vertclumpPointer = value;
                }
            }
            private byte[] _magic;
            private uint _length;
            private ushort _version;
            private ushort _polysetsCount;
            private ushort _boneIndexStart;
            private ushort _boneIndexEnd;
            private uint _polyclumpStart;
            private uint _polyclumpSize;
            private uint _vertclumpSize;
            private uint _vertaddclumpSize;
            private Ndp3BinaryFormat m_root;
            private Ndp3BinaryFormat m_parent;
            public byte[] Magic
            {
                get { return _magic; }

                set
                {
                    _magic = value;
                }
            }

            /// <summary>
            /// Total length of the Binary ndp3, including Header and all Chunks, in bytes.
            /// </summary>
            public uint Length
            {
                get { return _length; }

                set
                {
                    _length = value;
                }
            }

            /// <summary>
            /// Indicates the version of the Binary ndp3 container format.
            /// For this specification, should be set to 2.
            /// </summary>
            public ushort Version
            {
                get { return _version; }

                set
                {
                    _version = value;
                }
            }

            /// <summary>
            /// Number of polysets
            /// </summary>
            public ushort PolysetsCount
            {
                get { return _polysetsCount; }

                set
                {
                    _polysetsCount = value;
                }
            }

            /// <summary>
            /// The lowest bone index referenced by the objects and vertices in this ndp3.
            /// </summary>
            public ushort BoneIndexStart
            {
                get { return _boneIndexStart; }

                set
                {
                    _boneIndexStart = value;
                }
            }

            /// <summary>
            /// The highest bone index referenced by the objects and vertices in this ndp3.
            /// </summary>
            public ushort BoneIndexEnd
            {
                get { return _boneIndexEnd; }

                set
                {
                    _boneIndexEnd = value;
                }
            }
            public uint PolyclumpStart
            {
                get { return _polyclumpStart; }

                set
                {
                    _polyclumpStart = value;
                }
            }
            public uint PolyclumpSize
            {
                get { return _polyclumpSize; }

                set
                {
                    _polyclumpSize = value;
                }
            }
            public uint VertclumpSize
            {
                get { return _vertclumpSize; }

                set
                {
                    _vertclumpSize = value;
                }
            }
            public uint VertaddclumpSize
            {
                get { return _vertaddclumpSize; }

                set
                {
                    _vertaddclumpSize = value;
                }
            }
            public Ndp3BinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public Ndp3BinaryFormat M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class MaterialData : KaitaiStruct
        {
            public MaterialData(int p_i, KaitaiStream p__io, Ndp3BinaryFormat.PolyData p__parent = null, Ndp3BinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                _i = p_i;
                f_body = write;
                if (!write)
                    _read();
            }
            private void _read()
            {
            }
            private bool f_body;
            private MaterialInstance _body;
            public MaterialInstance Body
            {
                get
                {
                    if (f_body)
                        return _body;
                    f_body = true;
                    if (M_Parent.TextProps[I] != 0)
                    {
                        long _pos = m_io.Pos;
                        m_io.Seek(M_Parent.TextProps[I]);
                        _body = new MaterialInstance(m_io, this, m_root);
                        m_io.Seek(_pos);
                    }
                    return _body;
                }

                set
                {
                    _body = value;
                }
            }
            private int _i;
            private Ndp3BinaryFormat m_root;
            private Ndp3BinaryFormat.PolyData m_parent;
            public int I
            {
                get { return _i; }

                set
                {
                    _i = value;
                }
            }
            public Ndp3BinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public Ndp3BinaryFormat.PolyData M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class MaterialInstance : KaitaiStruct
        {
            public static MaterialInstance FromFile(string fileName)
            {
                return new MaterialInstance(new KaitaiStream(fileName));
            }

            public MaterialInstance(KaitaiStream p__io, Ndp3BinaryFormat.MaterialData p__parent = null, Ndp3BinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _flag = m_io.ReadU4be();
                _unk4 = m_io.ReadU4be();
                _srcFactor = m_io.ReadU2be();
                _numTextures = m_io.ReadU2be();
                _dstFactor = m_io.ReadU2be();
                _alphaTest = m_io.ReadS1();
                _alphaFunction = m_io.ReadS1();
                _refAlpha = m_io.ReadU2be();
                _cullMode = m_io.ReadU2be();
                _unk20 = m_io.ReadU4be();
                _unk24 = m_io.ReadU4be();
                _zBufferOffset = m_io.ReadU4be();
                _textures = new List<TextureData>();
                for (var i = 0; i < NumTextures; i++)
                {
                    _textures.Add(new TextureData(m_io, this, m_root));
                }
            }
            private uint _flag;
            private uint _unk4;
            private ushort _srcFactor;
            private ushort _numTextures;
            private ushort _dstFactor;
            private sbyte _alphaTest;
            private sbyte _alphaFunction;
            private ushort _refAlpha;
            private ushort _cullMode;
            private uint _unk20;
            private uint _unk24;
            private uint _zBufferOffset;
            private List<TextureData> _textures;
            private Ndp3BinaryFormat m_root;
            private Ndp3BinaryFormat.MaterialData m_parent;
            public uint Flag
            {
                get { return _flag; }

                set
                {
                    _flag = value;
                }
            }
            public uint Unk4
            {
                get { return _unk4; }

                set
                {
                    _unk4 = value;
                }
            }
            public ushort SrcFactor
            {
                get { return _srcFactor; }

                set
                {
                    _srcFactor = value;
                }
            }
            public ushort NumTextures
            {
                get { return _numTextures; }

                set
                {
                    _numTextures = value;
                }
            }
            public ushort DstFactor
            {
                get { return _dstFactor; }

                set
                {
                    _dstFactor = value;
                }
            }
            public sbyte AlphaTest
            {
                get { return _alphaTest; }

                set
                {
                    _alphaTest = value;
                }
            }
            public sbyte AlphaFunction
            {
                get { return _alphaFunction; }

                set
                {
                    _alphaFunction = value;
                }
            }
            public ushort RefAlpha
            {
                get { return _refAlpha; }

                set
                {
                    _refAlpha = value;
                }
            }
            public ushort CullMode
            {
                get { return _cullMode; }

                set
                {
                    _cullMode = value;
                }
            }
            public uint Unk20
            {
                get { return _unk20; }

                set
                {
                    _unk20 = value;
                }
            }
            public uint Unk24
            {
                get { return _unk24; }

                set
                {
                    _unk24 = value;
                }
            }
            public uint ZBufferOffset
            {
                get { return _zBufferOffset; }

                set
                {
                    _zBufferOffset = value;
                }
            }
            public List<TextureData> Textures
            {
                get { return _textures; }

                set
                {
                    _textures = value;
                }
            }
            public Ndp3BinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public Ndp3BinaryFormat.MaterialData M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class MeshData : KaitaiStruct
        {
            public static MeshData FromFile(string fileName)
            {
                return new MeshData(new KaitaiStream(fileName));
            }

            public MeshData(KaitaiStream p__io, Ndp3BinaryFormat p__parent = null, Ndp3BinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _nameOffset = m_io.ReadU4be();
                _unk6 = m_io.ReadU2be();
                _boneFlag = m_io.ReadS2be();
                _singleBoundFlag = m_io.ReadS2be();
                _numPolygons = m_io.ReadU2be();
                _positionB = m_io.ReadU4be();
                _polygons = new List<PolyData>();
                for (var i = 0; i < NumPolygons; i++)
                {
                    _polygons.Add(new PolyData(m_io, this, m_root));
                }
            }
            private uint _nameOffset;
            private ushort _unk6;
            private short _boneFlag;
            private short _singleBoundFlag;
            private ushort _numPolygons;
            private uint _positionB;
            private List<PolyData> _polygons;
            private Ndp3BinaryFormat m_root;
            private Ndp3BinaryFormat m_parent;
            public uint NameOffset
            {
                get { return _nameOffset; }

                set
                {
                    _nameOffset = value;
                }
            }
            public ushort Unk6
            {
                get { return _unk6; }

                set
                {
                    _unk6 = value;
                }
            }
            public short BoneFlag
            {
                get { return _boneFlag; }

                set
                {
                    _boneFlag = value;
                }
            }
            public short SingleBoundFlag
            {
                get { return _singleBoundFlag; }

                set
                {
                    _singleBoundFlag = value;
                }
            }
            public ushort NumPolygons
            {
                get { return _numPolygons; }

                set
                {
                    _numPolygons = value;
                }
            }
            public uint PositionB
            {
                get { return _positionB; }

                set
                {
                    _positionB = value;
                }
            }
            public List<PolyData> Polygons
            {
                get { return _polygons; }

                set
                {
                    _polygons = value;
                }
            }
            public Ndp3BinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public Ndp3BinaryFormat M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class PolyData : KaitaiStruct
        {
            public static PolyData FromFile(string fileName)
            {
                return new PolyData(new KaitaiStream(fileName));
            }

            public PolyData(KaitaiStream p__io, Ndp3BinaryFormat.MeshData p__parent = null, Ndp3BinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                f_materials = write;
                f_vertexIndices = write;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _polyStart = m_io.ReadU4be();
                _vertStart = m_io.ReadU4be();
                _vertAddStart = m_io.ReadU4be();
                _numVertices = m_io.ReadU2be();
                _vertSize = m_io.ReadU1();
                _uvSize = m_io.ReadU1();
                _textProps = new List<uint>();
                for (var i = 0; i < 4; i++)
                {
                    _textProps.Add(m_io.ReadU4be());
                }
                _numVertexIndices = m_io.ReadU2be();
                _polySize = m_io.ReadU1();
                _polyFlag = m_io.ReadU1();
                _align = m_io.ReadBytes(12);
                _vertices = new List<VertexData>();
                for (var i = 0; i < NumVertices; i++)
                {
                    _vertices.Add(new VertexData(m_io, this, m_root));
                }
            }
            private bool f_materials;
            private List<MaterialData> _materials;
            public List<MaterialData> Materials
            {
                get
                {
                    if (f_materials)
                        return _materials;
                    f_materials = true;
                    _materials = new List<MaterialData>();
                    for (var i = 0; i < 4; i++)
                    {
                        _materials.Add(new MaterialData(i, m_io, this, m_root));
                    }
                    return _materials;
                }

                set
                {
                    _materials = value;
                }
            }
            private bool f_vertexIndices;
            private List<ushort> _vertexIndices;
            public List<ushort> VertexIndices
            {
                get
                {
                    if (f_vertexIndices)
                        return _vertexIndices;
                    f_vertexIndices = true;
                    long _pos = m_io.Pos;
                    m_io.Seek(M_Parent.M_Parent.Header.PolyclumpPointer);
                    _vertexIndices = new List<ushort>();
                    for (var i = 0; i < NumVertexIndices; i++)
                    {
                        _vertexIndices.Add(m_io.ReadU2be());
                    }
                    m_io.Seek(_pos);
                    return _vertexIndices;
                }

                set
                {
                    _vertexIndices = value;
                }
            }
            private uint _polyStart;
            private uint _vertStart;
            private uint _vertAddStart;
            private ushort _numVertices;
            private byte _vertSize;
            private byte _uvSize;
            private List<uint> _textProps;
            private ushort _numVertexIndices;
            private byte _polySize;
            private byte _polyFlag;
            private byte[] _align;
            private List<VertexData> _vertices;
            private Ndp3BinaryFormat m_root;
            private Ndp3BinaryFormat.MeshData m_parent;
            public uint PolyStart
            {
                get { return _polyStart; }

                set
                {
                    _polyStart = value;
                }
            }
            public uint VertStart
            {
                get { return _vertStart; }

                set
                {
                    _vertStart = value;
                }
            }
            public uint VertAddStart
            {
                get { return _vertAddStart; }

                set
                {
                    _vertAddStart = value;
                }
            }
            public ushort NumVertices
            {
                get { return _numVertices; }

                set
                {
                    _numVertices = value;
                }
            }
            public byte VertSize
            {
                get { return _vertSize; }

                set
                {
                    _vertSize = value;
                }
            }
            public byte UvSize
            {
                get { return _uvSize; }

                set
                {
                    _uvSize = value;
                }
            }
            public List<uint> TextProps
            {
                get { return _textProps; }

                set
                {
                    _textProps = value;
                }
            }
            public ushort NumVertexIndices
            {
                get { return _numVertexIndices; }

                set
                {
                    _numVertexIndices = value;
                }
            }
            public byte PolySize
            {
                get { return _polySize; }

                set
                {
                    _polySize = value;
                }
            }
            public byte PolyFlag
            {
                get { return _polyFlag; }

                set
                {
                    _polyFlag = value;
                }
            }
            public byte[] Align
            {
                get { return _align; }

                set
                {
                    _align = value;
                }
            }
            public List<VertexData> Vertices
            {
                get { return _vertices; }

                set
                {
                    _vertices = value;
                }
            }
            public Ndp3BinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public Ndp3BinaryFormat.MeshData M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class PosData : KaitaiStruct
        {
            public static PosData FromFile(string fileName)
            {
                return new PosData(new KaitaiStream(fileName));
            }

            public PosData(KaitaiStream p__io, Ndp3BinaryFormat.VertexData p__parent = null, Ndp3BinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _pos = new FloatPos(m_io, this, m_root);
                _nrm = new FloatPos(m_io, this, m_root);
                _bitan = new FloatPos(m_io, this, m_root);
                _tan = new FloatPos(m_io, this, m_root);
                _bone = new BoneData(m_io, this, m_root);
            }
            private FloatPos _pos;
            private FloatPos _nrm;
            private FloatPos _bitan;
            private FloatPos _tan;
            private BoneData _bone;
            private Ndp3BinaryFormat m_root;
            private Ndp3BinaryFormat.VertexData m_parent;
            public FloatPos Pos
            {
                get { return _pos; }

                set
                {
                    _pos = value;
                }
            }
            public FloatPos Nrm
            {
                get { return _nrm; }

                set
                {
                    _nrm = value;
                }
            }
            public FloatPos Bitan
            {
                get { return _bitan; }

                set
                {
                    _bitan = value;
                }
            }
            public FloatPos Tan
            {
                get { return _tan; }

                set
                {
                    _tan = value;
                }
            }
            public BoneData Bone
            {
                get { return _bone; }

                set
                {
                    _bone = value;
                }
            }
            public Ndp3BinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public Ndp3BinaryFormat.VertexData M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class TextureData : KaitaiStruct
        {
            public static TextureData FromFile(string fileName)
            {
                return new TextureData(new KaitaiStream(fileName));
            }

            public TextureData(KaitaiStream p__io, Ndp3BinaryFormat.MaterialInstance p__parent = null, Ndp3BinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _hash = m_io.ReadU4be();
                _alignment = m_io.ReadBytes(6);
                _mapMode = m_io.ReadU2be();
                _wrapModeS = m_io.ReadS1();
                _wrapModeT = m_io.ReadS1();
                _minFilter = m_io.ReadS1();
                _magFilter = m_io.ReadS1();
                _mipDetail = m_io.ReadS1();
                _unk49 = m_io.ReadS1();
                _unk50 = m_io.ReadU2be();
                _unk52 = m_io.ReadS4be();
            }
            private uint _hash;
            private byte[] _alignment;
            private ushort _mapMode;
            private sbyte _wrapModeS;
            private sbyte _wrapModeT;
            private sbyte _minFilter;
            private sbyte _magFilter;
            private sbyte _mipDetail;
            private sbyte _unk49;
            private ushort _unk50;
            private int _unk52;
            private Ndp3BinaryFormat m_root;
            private Ndp3BinaryFormat.MaterialInstance m_parent;
            public uint Hash
            {
                get { return _hash; }

                set
                {
                    _hash = value;
                }
            }
            public byte[] Alignment
            {
                get { return _alignment; }

                set
                {
                    _alignment = value;
                }
            }
            public ushort MapMode
            {
                get { return _mapMode; }

                set
                {
                    _mapMode = value;
                }
            }
            public sbyte WrapModeS
            {
                get { return _wrapModeS; }

                set
                {
                    _wrapModeS = value;
                }
            }
            public sbyte WrapModeT
            {
                get { return _wrapModeT; }

                set
                {
                    _wrapModeT = value;
                }
            }
            public sbyte MinFilter
            {
                get { return _minFilter; }

                set
                {
                    _minFilter = value;
                }
            }
            public sbyte MagFilter
            {
                get { return _magFilter; }

                set
                {
                    _magFilter = value;
                }
            }
            public sbyte MipDetail
            {
                get { return _mipDetail; }

                set
                {
                    _mipDetail = value;
                }
            }
            public sbyte Unk49
            {
                get { return _unk49; }

                set
                {
                    _unk49 = value;
                }
            }
            public ushort Unk50
            {
                get { return _unk50; }

                set
                {
                    _unk50 = value;
                }
            }
            public int Unk52
            {
                get { return _unk52; }

                set
                {
                    _unk52 = value;
                }
            }
            public Ndp3BinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public Ndp3BinaryFormat.MaterialInstance M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class UvData : KaitaiStruct
        {
            public static UvData FromFile(string fileName)
            {
                return new UvData(new KaitaiStream(fileName));
            }

            public UvData(KaitaiStream p__io, Ndp3BinaryFormat.VertexData p__parent = null, Ndp3BinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _color = new Vector4(m_io, this, m_root);
                _uv = new Vector2(m_io, this, m_root);
            }
            private Vector4 _color;
            private Vector2 _uv;
            private Ndp3BinaryFormat m_root;
            private Ndp3BinaryFormat.VertexData m_parent;
            public Vector4 Color
            {
                get { return _color; }

                set
                {
                    _color = value;
                }
            }
            public Vector2 Uv
            {
                get { return _uv; }

                set
                {
                    _uv = value;
                }
            }
            public Ndp3BinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public Ndp3BinaryFormat.VertexData M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class Vector2 : KaitaiStruct
        {
            public static Vector2 FromFile(string fileName)
            {
                return new Vector2(new KaitaiStream(fileName));
            }

            public Vector2(KaitaiStream p__io, Ndp3BinaryFormat.UvData p__parent = null, Ndp3BinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _x = m_io.ReadU2be();
                _y = m_io.ReadU2be();
            }
            private ushort _x;
            private ushort _y;
            private Ndp3BinaryFormat m_root;
            private Ndp3BinaryFormat.UvData m_parent;
            public ushort X
            {
                get { return _x; }

                set
                {
                    _x = value;
                }
            }
            public ushort Y
            {
                get { return _y; }

                set
                {
                    _y = value;
                }
            }
            public Ndp3BinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public Ndp3BinaryFormat.UvData M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class Vector4 : KaitaiStruct
        {
            public static Vector4 FromFile(string fileName)
            {
                return new Vector4(new KaitaiStream(fileName));
            }

            public Vector4(KaitaiStream p__io, Ndp3BinaryFormat.UvData p__parent = null, Ndp3BinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _x = m_io.ReadU1();
                _y = m_io.ReadU1();
                _z = m_io.ReadU1();
                _w = m_io.ReadU1();
            }
            private byte _x;
            private byte _y;
            private byte _z;
            private byte _w;
            private Ndp3BinaryFormat m_root;
            private Ndp3BinaryFormat.UvData m_parent;
            public byte X
            {
                get { return _x; }

                set
                {
                    _x = value;
                }
            }
            public byte Y
            {
                get { return _y; }

                set
                {
                    _y = value;
                }
            }
            public byte Z
            {
                get { return _z; }

                set
                {
                    _z = value;
                }
            }
            public byte W
            {
                get { return _w; }

                set
                {
                    _w = value;
                }
            }
            public Ndp3BinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public Ndp3BinaryFormat.UvData M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class VertexData : KaitaiStruct
        {
            public static VertexData FromFile(string fileName)
            {
                return new VertexData(new KaitaiStream(fileName));
            }

            public VertexData(KaitaiStream p__io, Ndp3BinaryFormat.PolyData p__parent = null, Ndp3BinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                f_uv = write;
                f_vertex = write;
                if (!write)
                    _read();
            }
            private void _read()
            {
            }
            private bool f_uv;
            private List<UvData> _uv;
            public List<UvData> Uv
            {
                get
                {
                    if (f_uv)
                        return _uv;
                    f_uv = true;
                    long _pos = m_io.Pos;
                    m_io.Seek(M_Parent.M_Parent.M_Parent.Header.VertclumpPointer);
                    _uv = new List<UvData>();
                    for (var i = 0; i < M_Parent.UvSize >> 4; i++)
                    {
                        _uv.Add(new UvData(m_io, this, m_root));
                    }
                    m_io.Seek(_pos);
                    return _uv;
                }

                set
                {
                    _uv = value;
                }
            }
            private bool f_vertex;
            private PosData _vertex;
            public PosData Vertex
            {
                get
                {
                    if (f_vertex)
                        return _vertex;
                    f_vertex = true;
                    long _pos = m_io.Pos;
                    m_io.Seek(M_Parent.M_Parent.M_Parent.Header.VertaddclumpPointer);
                    _vertex = new PosData(m_io, this, m_root);
                    m_io.Seek(_pos);
                    return _vertex;
                }

                set
                {
                    _vertex = value;
                }
            }
            private Ndp3BinaryFormat m_root;
            private Ndp3BinaryFormat.PolyData m_parent;
            public Ndp3BinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public Ndp3BinaryFormat.PolyData M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        private HeaderData _header;
        private BoundingSphere _boundingSphere1;
        private BoundingSphere _boundingSphere2;
        private BoundingSphere _boundingSphere3;
        private List<MeshData> _meshes;
        private Ndp3BinaryFormat m_root;
        private KaitaiStruct m_parent;
        public HeaderData Header
        {
            get { return _header; }

            set
            {
                _header = value;
            }
        }

        /// <summary>
        /// Bounding sphere information (Render?)
        /// </summary>
        public BoundingSphere BoundingSphere1
        {
            get { return _boundingSphere1; }

            set
            {
                _boundingSphere1 = value;
            }
        }

        /// <summary>
        /// Bounding sphere information (Physics?)
        /// </summary>
        public BoundingSphere BoundingSphere2
        {
            get { return _boundingSphere2; }

            set
            {
                _boundingSphere2 = value;
            }
        }

        /// <summary>
        /// Bounding sphere information (Distance?)
        /// </summary>
        public BoundingSphere BoundingSphere3
        {
            get { return _boundingSphere3; }

            set
            {
                _boundingSphere3 = value;
            }
        }
        public List<MeshData> Meshes
        {
            get { return _meshes; }

            set
            {
                _meshes = value;
            }
        }
        public Ndp3BinaryFormat M_Root
        {
            get { return m_root; }

            set
            {
                m_root = value;
            }
        }
        public KaitaiStruct M_Parent
        {
            get { return m_parent; }

            set
            {
                m_parent = value;
            }
        }
    }
}
