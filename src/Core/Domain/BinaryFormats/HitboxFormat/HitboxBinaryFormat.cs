
//----------------------
// <auto-generated>
//     This is a generated file! Please edit source .ksy file and use kaitai-struct-compiler to rebuild
// </auto-generated>
//----------------------
using Kaitai;
using System.Collections.Generic;

namespace BoostStudio.Formats
{
    public partial class HitboxBinaryFormat : KaitaiStruct
    {
        public static HitboxBinaryFormat FromFile(string fileName)
        {
            return new HitboxBinaryFormat(new KaitaiStream(fileName));
        }


        public enum PropertiesEnum : uint
        {
            Unk56 = 67689847,
            Unk8 = 121838105,
            DownValueThreshold = 249298519,
            DamageCorrection = 437287607,
            KnockUpAngle = 697571464,
            HitboxType = 871312587,
            FlyDirection2 = 952019249,
            MultipleHitIntervalFrame = 1187959444,
            FriendlyDamageFlag = 1327449793,
            Unk68 = 1345231791,
            Unk24 = 1409650013,
            PlayerStunDuration = 1471339881,
            PlayerCameraShakeMultiplier = 2078284952,
            Unk100 = 2284053762,
            EnemyStunDuration = 2341815670,
            EnemyCameraShakeMultiplier = 2814870663,
            Damage = 2841955492,
            Unk108 = 3007418498,
            HitEffect = 3202098066,
            MultipleHitCount = 3204450643,
            HitVisualEffectSizeMultiplier = 3236647954,
            KnockUpRange = 3296353592,
            YorukeValueThreshold = 3516333205,
            Unk20 = 3585665567,
            HitSoundEffectHash = 3721108852,
            HitVisualEffect = 3797078568,
            FlyDirection3 = 3818043606,
            FlyDirection1 = 3997410658,
            SpecialEffect = 4209268117,
        }
        public HitboxBinaryFormat(KaitaiStream p__io, KaitaiStruct p__parent = null, HitboxBinaryFormat p__root = null, bool write = false) : base(p__io)
        {
            m_parent = p__parent;
            m_root = p__root ?? this;
            f_hitbox = write;
            if (!write)
                _read();
        }
        private void _read()
        {
            _fileMagic = m_io.ReadU4be();
            _hitboxHashesPointer = m_io.ReadU4be();
            _hitboxDataPointer = m_io.ReadU4be();
            _unk12 = m_io.ReadU4be();
            _propertyCount = m_io.ReadU4be();
            _propertyHashes = new List<PropertiesEnum>();
            for (var i = 0; i < PropertyCount; i++)
            {
                _propertyHashes.Add(((PropertiesEnum)m_io.ReadU4be()));
            }
            _hitboxCount = m_io.ReadU4be();
        }
        public partial class HitboxBody : KaitaiStruct
        {
            public HitboxBody(int p_index, KaitaiStream p__io, HitboxBinaryFormat p__parent = null, HitboxBinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                _index = p_index;
                f_pos = write;
                f_properties = write;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _hash = m_io.ReadU4be();
            }
            private bool f_pos;
            private int _pos;
            public int Pos
            {
                get
                {
                    if (f_pos)
                        return _pos;
                    _pos = (int)(((((16 + 4) + (M_Parent.PropertyCount * 4)) + (4 + (M_Parent.HitboxCount * 4))) + ((Index * M_Parent.PropertyCount) * 4)));
                    f_pos = true;
                    return _pos;
                }

                set
                {
                    _pos = value;
                }
            }
            private bool f_properties;
            private List<HitboxProperty> _properties;
            public List<HitboxProperty> Properties
            {
                get
                {
                    if (f_properties)
                        return _properties;
                    long _pos = m_io.Pos;
                    m_io.Seek(Pos);
                    _properties = new List<HitboxProperty>();
                    for (var i = 0; i < M_Parent.PropertyCount; i++)
                    {
                        _properties.Add(new HitboxProperty(i, m_io, this, m_root));
                    }
                    m_io.Seek(_pos);
                    f_properties = true;
                    return _properties;
                }

                set
                {
                    _properties = value;
                }
            }
            private uint _hash;
            private int _index;
            private HitboxBinaryFormat m_root;
            private HitboxBinaryFormat m_parent;
            public uint Hash
            {
                get { return _hash; }

                set
                {
                    _hash = value;
                }
            }
            public int Index
            {
                get { return _index; }

                set
                {
                    _index = value;
                }
            }
            public HitboxBinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public HitboxBinaryFormat M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class HitboxProperty : KaitaiStruct
        {
            public HitboxProperty(int p_index, KaitaiStream p__io, HitboxBinaryFormat.HitboxBody p__parent = null, HitboxBinaryFormat p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                _index = p_index;
                f_name = write;
                if (!write)
                    _read();
            }
            private void _read()
            {
                switch (((uint)(M_Parent.M_Parent.PropertyHashes[Index])))
                {
                    case 2078284952:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 3296353592:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 3007418498:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 952019249:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 1471339881:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 121838105:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 1187959444:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 2814870663:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 2341815670:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 1345231791:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 437287607:
                        {
                            _value = m_io.ReadF4be();
                            break;
                        }
                    case 1409650013:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 3797078568:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 3585665567:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 4209268117:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 3516333205:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 3997410658:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 3818043606:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 67689847:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 871312587:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 697571464:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 3202098066:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 3721108852:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 3236647954:
                        {
                            _value = m_io.ReadF4be();
                            break;
                        }
                    case 3204450643:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 2284053762:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 1327449793:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 249298519:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    case 2841955492:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                    default:
                        {
                            _value = m_io.ReadU4be();
                            break;
                        }
                }
            }
            private bool f_name;
            private PropertiesEnum _name;
            public PropertiesEnum Name
            {
                get
                {
                    if (f_name)
                        return _name;
                    _name = (PropertiesEnum)(M_Parent.M_Parent.PropertyHashes[Index]);
                    f_name = true;
                    return _name;
                }

                set
                {
                    _name = value;
                }
            }
            private double _value;
            private int _index;
            private HitboxBinaryFormat m_root;
            private HitboxBinaryFormat.HitboxBody m_parent;
            public double Value
            {
                get { return _value; }

                set
                {
                    _value = value;
                }
            }
            public int Index
            {
                get { return _index; }

                set
                {
                    _index = value;
                }
            }
            public HitboxBinaryFormat M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public HitboxBinaryFormat.HitboxBody M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        private bool f_hitbox;
        private List<HitboxBody> _hitbox;
        public List<HitboxBody> Hitbox
        {
            get
            {
                if (f_hitbox)
                    return _hitbox;
                _hitbox = new List<HitboxBody>();
                for (var i = 0; i < HitboxCount; i++)
                {
                    _hitbox.Add(new HitboxBody(i, m_io, this, m_root));
                }
                f_hitbox = true;
                return _hitbox;
            }

            set
            {
                _hitbox = value;
            }
        }
        private uint _fileMagic;
        private uint _hitboxHashesPointer;
        private uint _hitboxDataPointer;
        private uint _unk12;
        private uint _propertyCount;
        private List<PropertiesEnum> _propertyHashes;
        private uint _hitboxCount;
        private HitboxBinaryFormat m_root;
        private KaitaiStruct m_parent;
        public uint FileMagic
        {
            get { return _fileMagic; }

            set
            {
                _fileMagic = value;
            }
        }
        public uint HitboxHashesPointer
        {
            get { return _hitboxHashesPointer; }

            set
            {
                _hitboxHashesPointer = value;
            }
        }
        public uint HitboxDataPointer
        {
            get { return _hitboxDataPointer; }

            set
            {
                _hitboxDataPointer = value;
            }
        }
        public uint Unk12
        {
            get { return _unk12; }

            set
            {
                _unk12 = value;
            }
        }

        /// <summary>
        /// The number of property on each hitbox, usually 29
        /// </summary>
        public uint PropertyCount
        {
            get { return _propertyCount; }

            set
            {
                _propertyCount = value;
            }
        }
        public List<PropertiesEnum> PropertyHashes
        {
            get { return _propertyHashes; }

            set
            {
                _propertyHashes = value;
            }
        }
        public uint HitboxCount
        {
            get { return _hitboxCount; }

            set
            {
                _hitboxCount = value;
            }
        }
        public HitboxBinaryFormat M_Root
        {
            get { return m_root; }

            set
            {
                m_root = value;
            }
        }
        public KaitaiStruct M_Parent
        {
            get { return m_parent; }

            set
            {
                m_parent = value;
            }
        }
    }
}
