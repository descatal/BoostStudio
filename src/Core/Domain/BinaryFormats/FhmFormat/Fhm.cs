
//----------------------
// <auto-generated>
//     This is a generated file! Please edit source .ksy file and use kaitai-struct-compiler to rebuild
// </auto-generated>
//----------------------
using Kaitai;
using System.Collections.Generic;

namespace BoostStudio.Formats
{
    public partial class Fhm : KaitaiStruct
    {
        public static Fhm FromFile(string fileName)
        {
            return new Fhm(new KaitaiStream(fileName));
        }


        public enum AssetLoadEnum
        {
            Normal = 0,
            Image = 1,
            Model = 2,
            Unknown = 3,
        }

        public enum UnkEnum
        {
            Unknown = 0,
        }

        public enum FileMagicEnums
        {
            Fhm = 1179143456,
        }
        public Fhm(KaitaiStream p__io, KaitaiStruct p__parent = null, Fhm p__root = null, bool write = false) : base(p__io)
        {
            m_parent = p__parent;
            m_root = p__root ?? this;
            if (!write)
                _read();
        }
        private void _read()
        {
            __raw_body = m_io.ReadBytesFull();
            var io___raw_body = new KaitaiStream(__raw_body);
            _body = new FileBody(io___raw_body, this, m_root);
        }
        public partial class FhmFile : KaitaiStruct
        {
            public FhmFile(int p_indexOfs, uint p_regionSize, KaitaiStream p__io, Fhm.FhmBody p__parent = null, Fhm p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                _indexOfs = p_indexOfs;
                _regionSize = p_regionSize;
                f_assetLoadType = write;
                f_unkType = write;
                f_size = write;
                f_body = write;
                f_offset = write;
                if (!write)
                    _read();
            }
            private void _read()
            {
            }
            private bool f_assetLoadType;
            private AssetLoadEnum _assetLoadType;
            public AssetLoadEnum AssetLoadType
            {
                get
                {
                    if (f_assetLoadType)
                        return _assetLoadType;
                    long _pos = m_io.Pos;
                    m_io.Seek((IndexOfs + (RegionSize * 2)));
                    _assetLoadType = ((Fhm.AssetLoadEnum)m_io.ReadU4be());
                    m_io.Seek(_pos);
                    f_assetLoadType = true;
                    return _assetLoadType;
                }

                set
                {
                    _assetLoadType = value;
                }
            }
            private bool f_unkType;
            private UnkEnum _unkType;
            public UnkEnum UnkType
            {
                get
                {
                    if (f_unkType)
                        return _unkType;
                    long _pos = m_io.Pos;
                    m_io.Seek((IndexOfs + (RegionSize * 3)));
                    _unkType = ((Fhm.UnkEnum)m_io.ReadU4be());
                    m_io.Seek(_pos);
                    f_unkType = true;
                    return _unkType;
                }

                set
                {
                    _unkType = value;
                }
            }
            private bool f_size;
            private uint _size;
            public uint Size
            {
                get
                {
                    if (f_size)
                        return _size;
                    long _pos = m_io.Pos;
                    m_io.Seek((IndexOfs + RegionSize));
                    _size = m_io.ReadU4be();
                    m_io.Seek(_pos);
                    f_size = true;
                    return _size;
                }

                set
                {
                    _size = value;
                }
            }
            private bool f_body;
            private FileBody _body;
            public FileBody Body
            {
                get
                {
                    if (f_body)
                        return _body;
                    long _pos = m_io.Pos;
                    m_io.Seek(Offset);
                    __raw_body = m_io.ReadBytes(Size);
                    var io___raw_body = new KaitaiStream(__raw_body);
                    _body = new FileBody(io___raw_body, this, m_root);
                    m_io.Seek(_pos);
                    f_body = true;
                    return _body;
                }

                set
                {
                    _body = value;
                }
            }
            private bool f_offset;
            private uint _offset;
            public uint Offset
            {
                get
                {
                    if (f_offset)
                        return _offset;
                    long _pos = m_io.Pos;
                    m_io.Seek(IndexOfs);
                    _offset = m_io.ReadU4be();
                    m_io.Seek(_pos);
                    f_offset = true;
                    return _offset;
                }

                set
                {
                    _offset = value;
                }
            }
            private int _indexOfs;
            private uint _regionSize;
            private Fhm m_root;
            private Fhm.FhmBody m_parent;
            private byte[] __raw_body;
            public int IndexOfs
            {
                get { return _indexOfs; }

                set
                {
                    _indexOfs = value;
                }
            }
            public uint RegionSize
            {
                get { return _regionSize; }

                set
                {
                    _regionSize = value;
                }
            }
            public Fhm M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public Fhm.FhmBody M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
            public byte[] M_RawBody
            {
                get { return __raw_body; }

                set
                {
                    __raw_body = value;
                }
            }
        }
        public partial class UintZero : KaitaiStruct
        {
            public static UintZero FromFile(string fileName)
            {
                return new UintZero(new KaitaiStream(fileName));
            }

            public UintZero(KaitaiStream p__io, Fhm.FhmBody p__parent = null, Fhm p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _zero = m_io.ReadBytes(4);
                if (!((KaitaiStream.ByteArrayCompare(Zero, new byte[] { 0, 0, 0, 0 }) == 0)))
                {
                    throw new ValidationNotEqualError(new byte[] { 0, 0, 0, 0 }, Zero, M_Io, "/types/uint_zero/seq/0");
                }
            }
            private byte[] _zero;
            private Fhm m_root;
            private Fhm.FhmBody m_parent;
            public byte[] Zero
            {
                get { return _zero; }

                set
                {
                    _zero = value;
                }
            }
            public Fhm M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public Fhm.FhmBody M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class FhmBody : KaitaiStruct
        {
            public static FhmBody FromFile(string fileName)
            {
                return new FhmBody(new KaitaiStream(fileName));
            }

            public FhmBody(KaitaiStream p__io, Fhm.FileBody p__parent = null, Fhm p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _flag1 = m_io.ReadBytes(2);
                if (!((KaitaiStream.ByteArrayCompare(Flag1, new byte[] { 1, 1 }) == 0)))
                {
                    throw new ValidationNotEqualError(new byte[] { 1, 1 }, Flag1, M_Io, "/types/fhm_body/seq/0");
                }
                _flag2 = m_io.ReadBytes(2);
                if (!((KaitaiStream.ByteArrayCompare(Flag2, new byte[] { 0, 16 }) == 0)))
                {
                    throw new ValidationNotEqualError(new byte[] { 0, 16 }, Flag2, M_Io, "/types/fhm_body/seq/1");
                }
                _unkC = new UintZero(m_io, this, m_root);
                _totalFileSize = m_io.ReadU4be();
                _numFiles = m_io.ReadU4be();
                _files = new List<FhmFile>();
                for (var i = 0; i < NumFiles; i++)
                {
                    _files.Add(new FhmFile((20 + (i * 4)), (NumFiles * 4), m_io, this, m_root));
                }
                _alignment = m_io.ReadBytes(12);
            }
            private byte[] _flag1;
            private byte[] _flag2;
            private UintZero _unkC;
            private uint _totalFileSize;
            private uint _numFiles;
            private List<FhmFile> _files;
            private byte[] _alignment;
            private Fhm m_root;
            private Fhm.FileBody m_parent;
            public byte[] Flag1
            {
                get { return _flag1; }

                set
                {
                    _flag1 = value;
                }
            }
            public byte[] Flag2
            {
                get { return _flag2; }

                set
                {
                    _flag2 = value;
                }
            }
            public UintZero UnkC
            {
                get { return _unkC; }

                set
                {
                    _unkC = value;
                }
            }
            public uint TotalFileSize
            {
                get { return _totalFileSize; }

                set
                {
                    _totalFileSize = value;
                }
            }
            public uint NumFiles
            {
                get { return _numFiles; }

                set
                {
                    _numFiles = value;
                }
            }
            public List<FhmFile> Files
            {
                get { return _files; }

                set
                {
                    _files = value;
                }
            }
            public byte[] Alignment
            {
                get { return _alignment; }

                set
                {
                    _alignment = value;
                }
            }
            public Fhm M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public Fhm.FileBody M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class GenericBody : KaitaiStruct
        {
            public static GenericBody FromFile(string fileName)
            {
                return new GenericBody(new KaitaiStream(fileName));
            }

            public GenericBody(KaitaiStream p__io, Fhm.FileBody p__parent = null, Fhm p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                f_body = write;
                if (!write)
                    _read();
            }
            private void _read()
            {
            }
            private bool f_body;
            private byte[] _body;
            public byte[] Body
            {
                get
                {
                    if (f_body)
                        return _body;
                    _body = m_io.ReadBytesFull();
                    f_body = true;
                    return _body;
                }

                set
                {
                    _body = value;
                }
            }
            private Fhm m_root;
            private Fhm.FileBody m_parent;
            public Fhm M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public Fhm.FileBody M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        public partial class FileBody : KaitaiStruct
        {
            public static FileBody FromFile(string fileName)
            {
                return new FileBody(new KaitaiStream(fileName));
            }

            public FileBody(KaitaiStream p__io, KaitaiStruct p__parent = null, Fhm p__root = null, bool write = false) : base(p__io)
            {
                m_parent = p__parent;
                m_root = p__root;
                if (!write)
                    _read();
            }
            private void _read()
            {
                _fileMagic = ((Fhm.FileMagicEnums)m_io.ReadU4be());
                switch (FileMagic)
                {
                    case Fhm.FileMagicEnums.Fhm:
                        {
                            _fileContent = new FhmBody(m_io, this, m_root);
                            break;
                        }
                    default:
                        {
                            _fileContent = new GenericBody(m_io, this, m_root);
                            break;
                        }
                }
            }
            private FileMagicEnums _fileMagic;
            private KaitaiStruct _fileContent;
            private Fhm m_root;
            private KaitaiStruct m_parent;
            public FileMagicEnums FileMagic
            {
                get { return _fileMagic; }

                set
                {
                    _fileMagic = value;
                }
            }
            public KaitaiStruct FileContent
            {
                get { return _fileContent; }

                set
                {
                    _fileContent = value;
                }
            }
            public Fhm M_Root
            {
                get { return m_root; }

                set
                {
                    m_root = value;
                }
            }
            public KaitaiStruct M_Parent
            {
                get { return m_parent; }

                set
                {
                    m_parent = value;
                }
            }
        }
        private FileBody _body;
        private Fhm m_root;
        private KaitaiStruct m_parent;
        private byte[] __raw_body;
        public FileBody Body
        {
            get { return _body; }

            set
            {
                _body = value;
            }
        }
        public Fhm M_Root
        {
            get { return m_root; }

            set
            {
                m_root = value;
            }
        }
        public KaitaiStruct M_Parent
        {
            get { return m_parent; }

            set
            {
                m_parent = value;
            }
        }
        public byte[] M_RawBody
        {
            get { return __raw_body; }

            set
            {
                __raw_body = value;
            }
        }
    }
}
