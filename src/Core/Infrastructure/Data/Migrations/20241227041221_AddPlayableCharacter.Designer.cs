// <auto-generated />
using System;
using BoostStudio.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BoostStudio.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241227041221_AddPlayableCharacter")]
    partial class AddPlayableCharacter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-preview.6.24327.4");

            modelBuilder.Entity("AssetFileUnit", b =>
                {
                    b.Property<uint>("AssetFilesHash")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("UnitsGameUnitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AssetFilesHash", "UnitsGameUnitId");

                    b.HasIndex("UnitsGameUnitId");

                    b.ToTable("AssetFileUnit");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Config", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("Configs");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Ammo.Ammo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<uint>("AmmoType")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("AssaultBurstChargeDurationFrame")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("AssaultBurstReloadDurationFrame")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BlastBurstChargeDurationFrame")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BlastBurstReloadDurationFrame")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("BurstReplenish")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ChargeDurationFrame")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ChargeInput")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CooldownDurationFrame")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Hash")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("InactiveAssaultBurstReloadDurationFrame")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("InactiveBlastBurstReloadDurationFrame")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("InactiveCooldownDurationFrame")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("InactiveReloadDurationFrame")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("InactiveUnk48")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("InactiveUnk68")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("InactiveUnk72")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("InitialAmmo")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MaxAmmo")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MaxChargeLevel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ReleaseChargeLingerDurationFrame")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ReloadDurationFrame")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ReloadType")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("TimedDurationFrame")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("UnitStatId")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Unk108")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk112")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk124")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk128")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk16")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk40")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk44")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk80")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk84")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk88")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UnitStatId");

                    b.ToTable("Ammo");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", b =>
                {
                    b.Property<uint>("Hash")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<uint>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Hash");

                    b.ToTable("AssetFiles");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Hitboxes.Hitbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<uint>("Damage")
                        .HasColumnType("INTEGER");

                    b.Property<float>("DamageCorrection")
                        .HasColumnType("REAL");

                    b.Property<uint>("DownValueThreshold")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("EnemyCameraShakeMultiplier")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("EnemyStunDuration")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("FlyDirection1")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("FlyDirection2")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("FlyDirection3")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("FriendlyDamageFlag")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Hash")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("HitEffect")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("HitSoundEffectHash")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("HitVisualEffect")
                        .HasColumnType("INTEGER");

                    b.Property<float>("HitVisualEffectSizeMultiplier")
                        .HasColumnType("REAL");

                    b.Property<uint>("HitboxGroupHash")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("HitboxType")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("KnockUpAngle")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("KnockUpRange")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MultipleHitCount")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("MultipleHitIntervalFrame")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("PlayerCameraShakeMultiplier")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("PlayerStunDuration")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SpecialEffect")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk100")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk108")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk20")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk24")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk56")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk68")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk8")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("YorukeValueThreshold")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HitboxGroupHash");

                    b.ToTable("Hitboxes");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Hitboxes.HitboxGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<uint>("Hash")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("HitboxGroups");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Projectiles.Projectile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<float>("Acceleration")
                        .HasColumnType("REAL");

                    b.Property<uint>("AccelerationStartFrame")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("AimType")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("AmmoConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ChainedProjectileHash")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CosmeticHash")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("DurationFrame")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Hash")
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("HitboxHash")
                        .HasColumnType("INTEGER");

                    b.Property<float>("HorizontalGuidance")
                        .HasColumnType("REAL");

                    b.Property<float>("HorizontalGuidanceAngle")
                        .HasColumnType("REAL");

                    b.Property<float>("InitialSpeed")
                        .HasColumnType("REAL");

                    b.Property<float>("MaxSpeed")
                        .HasColumnType("REAL");

                    b.Property<float>("MaxTravelDistance")
                        .HasColumnType("REAL");

                    b.Property<uint>("ModelHash")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("ProjectileType")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Reserved100")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved104")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved108")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved112")
                        .HasColumnType("REAL");

                    b.Property<uint>("Reserved116")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Reserved136")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Reserved140")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Reserved144")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved148")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved152")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved156")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved160")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved164")
                        .HasColumnType("REAL");

                    b.Property<uint>("Reserved168")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Reserved172")
                        .HasColumnType("REAL");

                    b.Property<uint>("Reserved180")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Reserved184")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Reserved192")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Reserved196")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Reserved204")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Reserved208")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Reserved212")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Reserved216")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Reserved220")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved224")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved228")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved232")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved236")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved240")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved244")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved248")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved252")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved256")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved260")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved264")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved268")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved272")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved276")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved92")
                        .HasColumnType("REAL");

                    b.Property<float>("Reserved96")
                        .HasColumnType("REAL");

                    b.Property<float>("RotateX")
                        .HasColumnType("REAL");

                    b.Property<float>("RotateZ")
                        .HasColumnType("REAL");

                    b.Property<float>("Size")
                        .HasColumnType("REAL");

                    b.Property<uint>("SkeletonIndex")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("SoundEffectHash")
                        .HasColumnType("INTEGER");

                    b.Property<float>("TranslateX")
                        .HasColumnType("REAL");

                    b.Property<float>("TranslateY")
                        .HasColumnType("REAL");

                    b.Property<float>("TranslateZ")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("UnitProjectileId")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Unk44")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk48")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("Unk52")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Unk56")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk84")
                        .HasColumnType("REAL");

                    b.Property<float>("VerticalGuidance")
                        .HasColumnType("REAL");

                    b.Property<float>("VerticalGuidanceAngle")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasAlternateKey("Hash");

                    b.HasIndex("HitboxHash");

                    b.HasIndex("UnitProjectileId");

                    b.ToTable("Projectiles");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Projectiles.UnitProjectile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<uint?>("FileSignature")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("GameUnitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameUnitId")
                        .IsUnique();

                    b.ToTable("UnitProjectiles");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Series.Series", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NameChinese")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameEnglish")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameJapanese")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SlugName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Stats.Stat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<float>("AssaultBurstBoostConsumptionMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("AssaultBurstDamageDealtBurstGaugeIncreaseMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("AssaultBurstDamageDealtMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("AssaultBurstDamageTakenBurstGaugeIncreaseMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("AssaultBurstDamageTakenMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("AssaultBurstDownValueDealtMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("AssaultBurstMobilityMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("AssaultBurstRedLock")
                        .HasColumnType("REAL");

                    b.Property<float>("AssaultBurstRedLockMelee")
                        .HasColumnType("REAL");

                    b.Property<float>("BlastBurstBoostConsumptionMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("BlastBurstDamageDealtBurstGaugeIncreaseMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("BlastBurstDamageDealtMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("BlastBurstDamageTakenBurstGaugeIncreaseMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("BlastBurstDamageTakenMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("BlastBurstDownValueDealtMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("BlastBurstMobilityMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("BlastBurstRedLock")
                        .HasColumnType("REAL");

                    b.Property<float>("BlastBurstRedLockMelee")
                        .HasColumnType("REAL");

                    b.Property<int>("BoostAirStepConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoostAirStepInitialConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoostBdConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoostBdInitialConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoostFlyConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoostFuwaInitialConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoostGroundStepConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoostGroundStepInitialConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoostInitialConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoostNonVernierActionConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoostPostActionConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoostRainbowStepInitialConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoostReplenish")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoostTransformConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BoostTransformInitialConsumption")
                        .HasColumnType("INTEGER");

                    b.Property<float>("CameraZoomMultiplier")
                        .HasColumnType("REAL");

                    b.Property<int>("DownValueThreshold")
                        .HasColumnType("INTEGER");

                    b.Property<float>("FourthBurstBoostConsumptionMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("FourthBurstDamageDealtBurstGaugeIncreaseMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("FourthBurstDamageDealtMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("FourthBurstDamageTakenBurstGaugeIncreaseMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("FourthBurstDamageTakenMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("FourthBurstDownValueDealtMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("FourthBurstMobilityMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("FourthBurstRedLock")
                        .HasColumnType("REAL");

                    b.Property<float>("FourthBurstRedLockMelee")
                        .HasColumnType("REAL");

                    b.Property<float>("GravityMultiplierAir")
                        .HasColumnType("REAL");

                    b.Property<float>("GravityMultiplierLand")
                        .HasColumnType("REAL");

                    b.Property<int>("MaxBoost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxHp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<float>("RedLockRange")
                        .HasColumnType("REAL");

                    b.Property<float>("RedLockRangeMelee")
                        .HasColumnType("REAL");

                    b.Property<float>("SizeMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("ThirdBurstBoostConsumptionMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("ThirdBurstDamageDealtBurstGaugeIncreaseMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("ThirdBurstDamageDealtMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("ThirdBurstDamageTakenBurstGaugeIncreaseMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("ThirdBurstDamageTakenMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("ThirdBurstDownValueDealtMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("ThirdBurstMobilityMultiplier")
                        .HasColumnType("REAL");

                    b.Property<float>("ThirdBurstRedLock")
                        .HasColumnType("REAL");

                    b.Property<float>("ThirdBurstRedLockMelee")
                        .HasColumnType("REAL");

                    b.Property<int>("UnitCost")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitCost2")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("UnitStatId")
                        .HasColumnType("TEXT");

                    b.Property<float>("Unk100")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk104")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk108")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk116")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk120")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk124")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk128")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk132")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk136")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk140")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk144")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk148")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk152")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk156")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk160")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk164")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk168")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk172")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk176")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk180")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk184")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk196")
                        .HasColumnType("REAL");

                    b.Property<int>("Unk20")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Unk200")
                        .HasColumnType("REAL");

                    b.Property<int>("Unk204")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk208")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk216")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk24")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk256")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk260")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk264")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk268")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk28")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk292")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk296")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk300")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk304")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk308")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk312")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk316")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk320")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk324")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk328")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk332")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Unk36")
                        .HasColumnType("REAL");

                    b.Property<int>("Unk364")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk368")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk380")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Unk384")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk388")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk392")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk396")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk40")
                        .HasColumnType("REAL");

                    b.Property<int>("Unk428")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk432")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk44")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk444")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Unk448")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk452")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk456")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk460")
                        .HasColumnType("REAL");

                    b.Property<int>("Unk492")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk496")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk508")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Unk512")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk516")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk520")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk524")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk56")
                        .HasColumnType("REAL");

                    b.Property<int>("Unk572")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk576")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Unk588")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Unk592")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk596")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk60")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk600")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk604")
                        .HasColumnType("REAL");

                    b.Property<int>("Unk608")
                        .HasColumnType("INTEGER");

                    b.Property<float>("Unk64")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk68")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk72")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk76")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk80")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk88")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk92")
                        .HasColumnType("REAL");

                    b.Property<float>("Unk96")
                        .HasColumnType("REAL");

                    b.Property<int>("YorukeValueThreshold")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UnitStatId");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Stats.UnitStat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<uint?>("FileSignature")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("GameUnitId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameUnitId")
                        .IsUnique();

                    b.ToTable("UnitStats");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Tbl.PatchFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<uint?>("AssetFileHash")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TblId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssetFileHash");

                    b.HasIndex("TblId");

                    b.ToTable("PatchFiles");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Tbl.Tbl", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<uint>("CumulativeAssetIndex")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Tbl");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Units.Unit", b =>
                {
                    b.Property<uint>("GameUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<uint?>("HitboxGroupHash")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameChinese")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NameJapanese")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GameUnitId");

                    b.HasIndex("HitboxGroupHash");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Units.UnitAmmoSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<uint>("AmmoHash")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SlotOrder")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UnitStatId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AmmoHash");

                    b.HasIndex("UnitStatId");

                    b.ToTable("UnitAmmoSlots");
                });

            modelBuilder.Entity("AssetFileUnit", b =>
                {
                    b.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", null)
                        .WithMany()
                        .HasForeignKey("AssetFilesHash")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoostStudio.Domain.Entities.Exvs.Units.Unit", null)
                        .WithMany()
                        .HasForeignKey("UnitsGameUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Ammo.Ammo", b =>
                {
                    b.HasOne("BoostStudio.Domain.Entities.Exvs.Stats.UnitStat", "UnitStat")
                        .WithMany("Ammo")
                        .HasForeignKey("UnitStatId");

                    b.Navigation("UnitStat");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Hitboxes.Hitbox", b =>
                {
                    b.HasOne("BoostStudio.Domain.Entities.Exvs.Hitboxes.HitboxGroup", "HitboxGroup")
                        .WithMany("Hitboxes")
                        .HasForeignKey("HitboxGroupHash")
                        .HasPrincipalKey("Hash")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HitboxGroup");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Projectiles.Projectile", b =>
                {
                    b.HasOne("BoostStudio.Domain.Entities.Exvs.Hitboxes.Hitbox", "Hitbox")
                        .WithMany()
                        .HasForeignKey("HitboxHash")
                        .HasPrincipalKey("Hash");

                    b.HasOne("BoostStudio.Domain.Entities.Exvs.Projectiles.UnitProjectile", "UnitProjectile")
                        .WithMany("Projectiles")
                        .HasForeignKey("UnitProjectileId");

                    b.Navigation("Hitbox");

                    b.Navigation("UnitProjectile");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Projectiles.UnitProjectile", b =>
                {
                    b.HasOne("BoostStudio.Domain.Entities.Exvs.Units.Unit", "Unit")
                        .WithOne("UnitProjectiles")
                        .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Projectiles.UnitProjectile", "GameUnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Series.Series", b =>
                {
                    b.OwnsOne("BoostStudio.Domain.Entities.Exvs.Series.PlayableSeries", "PlayableSeries", b1 =>
                        {
                            b1.Property<byte>("SeriesId")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("LogoSprite2Index")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("LogoSpriteIndex")
                                .HasColumnType("INTEGER");

                            b1.Property<uint?>("MovieAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("SelectOrder")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("Unk11")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("Unk2")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("Unk3")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("Unk4")
                                .HasColumnType("INTEGER");

                            b1.HasKey("SeriesId");

                            b1.HasIndex("MovieAssetHash")
                                .IsUnique();

                            b1.ToTable("PlayableSeries");

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "MovieAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Series.Series.PlayableSeries#BoostStudio.Domain.Entities.Exvs.Series.PlayableSeries", "MovieAssetHash");

                            b1.WithOwner("Series")
                                .HasForeignKey("SeriesId");

                            b1.Navigation("MovieAsset");

                            b1.Navigation("Series");
                        });

                    b.Navigation("PlayableSeries");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Stats.Stat", b =>
                {
                    b.HasOne("BoostStudio.Domain.Entities.Exvs.Stats.UnitStat", "UnitStat")
                        .WithMany("Stats")
                        .HasForeignKey("UnitStatId");

                    b.Navigation("UnitStat");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Stats.UnitStat", b =>
                {
                    b.HasOne("BoostStudio.Domain.Entities.Exvs.Units.Unit", "Unit")
                        .WithOne("UnitStats")
                        .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Stats.UnitStat", "GameUnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Tbl.PatchFile", b =>
                {
                    b.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "AssetFile")
                        .WithMany("PatchFiles")
                        .HasForeignKey("AssetFileHash");

                    b.HasOne("BoostStudio.Domain.Entities.Exvs.Tbl.Tbl", "Tbl")
                        .WithMany("PatchFiles")
                        .HasForeignKey("TblId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("BoostStudio.Domain.Entities.Exvs.Tbl.PatchFileInfo", "FileInfo", b1 =>
                        {
                            b1.Property<Guid>("PatchFileId")
                                .HasColumnType("TEXT");

                            b1.Property<ulong>("Size1")
                                .HasColumnType("INTEGER");

                            b1.Property<ulong>("Size2")
                                .HasColumnType("INTEGER");

                            b1.Property<ulong>("Size3")
                                .HasColumnType("INTEGER");

                            b1.Property<ulong>("Size4")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Version")
                                .HasColumnType("INTEGER");

                            b1.HasKey("PatchFileId");

                            b1.ToTable("PatchFiles");

                            b1.WithOwner()
                                .HasForeignKey("PatchFileId");
                        });

                    b.OwnsOne("BoostStudio.Domain.Entities.Exvs.Tbl.PathInfo", "PathInfo", b1 =>
                        {
                            b1.Property<Guid>("PatchFileId")
                                .HasColumnType("TEXT");

                            b1.Property<uint>("Order")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Path")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("PatchFileId");

                            b1.ToTable("PatchFiles");

                            b1.WithOwner()
                                .HasForeignKey("PatchFileId");
                        });

                    b.Navigation("AssetFile");

                    b.Navigation("FileInfo");

                    b.Navigation("PathInfo");

                    b.Navigation("Tbl");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Units.Unit", b =>
                {
                    b.HasOne("BoostStudio.Domain.Entities.Exvs.Hitboxes.HitboxGroup", "HitboxGroup")
                        .WithMany("Units")
                        .HasForeignKey("HitboxGroupHash")
                        .HasPrincipalKey("Hash");

                    b.OwnsOne("BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "PlayableCharacter", b1 =>
                        {
                            b1.Property<uint>("UnitId")
                                .HasColumnType("INTEGER");

                            b1.Property<uint>("ArcadeSelectionCostume1SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<uint?>("ArcadeSelectionCostume2SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<uint?>("ArcadeSelectionCostume3SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("ArcadeSmallSpriteIndex")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("ArcadeUnitNameSpriteIndex")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<uint?>("CatalogStorePilotCostume2SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("CatalogStorePilotCostume2String")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CatalogStorePilotCostume2TString")
                                .HasColumnType("TEXT");

                            b1.Property<uint?>("CatalogStorePilotCostume3SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("CatalogStorePilotCostume3String")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CatalogStorePilotCostume3TString")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FOutString")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FString")
                                .HasColumnType("TEXT");

                            b1.Property<uint>("FigurineSpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("FigurineSpriteIndex")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<uint>("GenericSelectionCostume1SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<uint?>("GenericSelectionCostume2SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<uint?>("GenericSelectionCostume3SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<uint>("InGameSortieAndAwakeningPilotCostume1SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<uint?>("InGameSortieAndAwakeningPilotCostume2SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<uint?>("InGameSortieAndAwakeningPilotCostume3SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<uint>("LoadingLeftCostume1SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<uint?>("LoadingLeftCostume2SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<uint?>("LoadingLeftCostume3SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<uint>("LoadingRightCostume1SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<uint?>("LoadingRightCostume2SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<uint?>("LoadingRightCostume3SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<uint>("LoadingTargetPilotCostume1SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<uint?>("LoadingTargetPilotCostume2SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<uint?>("LoadingTargetPilotCostume3SpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<uint>("LoadingTargetUnitSmallSpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<uint>("LoadingTargetUnitSpriteAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("PString")
                                .HasColumnType("TEXT");

                            b1.Property<uint>("ResultSmallUnitSpriteHash")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("SeriesId")
                                .HasColumnType("INTEGER");

                            b1.Property<uint>("SpriteFramesAssetHash")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("UnitIndex")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("UnitSelectOrderInSeries")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("Unk112")
                                .HasColumnType("INTEGER");

                            b1.Property<ushort>("Unk114")
                                .HasColumnType("INTEGER");

                            b1.Property<uint>("Unk124")
                                .HasColumnType("INTEGER");

                            b1.Property<uint>("Unk128")
                                .HasColumnType("INTEGER");

                            b1.Property<uint>("Unk156")
                                .HasColumnType("INTEGER");

                            b1.Property<ushort>("Unk2")
                                .HasColumnType("INTEGER");

                            b1.Property<byte>("Unk27")
                                .HasColumnType("INTEGER");

                            b1.HasKey("UnitId");

                            b1.HasIndex("ArcadeSelectionCostume1SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("ArcadeSelectionCostume2SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("ArcadeSelectionCostume3SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("CatalogStorePilotCostume2SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("CatalogStorePilotCostume3SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("FigurineSpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("GenericSelectionCostume1SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("GenericSelectionCostume2SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("GenericSelectionCostume3SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("InGameSortieAndAwakeningPilotCostume1SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("InGameSortieAndAwakeningPilotCostume2SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("InGameSortieAndAwakeningPilotCostume3SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("LoadingLeftCostume1SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("LoadingLeftCostume2SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("LoadingLeftCostume3SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("LoadingRightCostume1SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("LoadingRightCostume2SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("LoadingRightCostume3SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("LoadingTargetPilotCostume1SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("LoadingTargetPilotCostume2SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("LoadingTargetPilotCostume3SpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("LoadingTargetUnitSmallSpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("LoadingTargetUnitSpriteAssetHash")
                                .IsUnique();

                            b1.HasIndex("ResultSmallUnitSpriteHash")
                                .IsUnique();

                            b1.HasIndex("SpriteFramesAssetHash")
                                .IsUnique();

                            b1.ToTable("PlayableCharacters");

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "ArcadeSelectionCostume1SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "ArcadeSelectionCostume1SpriteAssetHash")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "ArcadeSelectionCostume2SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "ArcadeSelectionCostume2SpriteAssetHash");

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "ArcadeSelectionCostume3SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "ArcadeSelectionCostume3SpriteAssetHash");

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "CatalogStorePilotCostume2SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "CatalogStorePilotCostume2SpriteAssetHash");

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "CatalogStorePilotCostume3SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "CatalogStorePilotCostume3SpriteAssetHash");

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "FigurineSpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "FigurineSpriteAssetHash")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "GenericSelectionCostume1SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "GenericSelectionCostume1SpriteAssetHash")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "GenericSelectionCostume2SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "GenericSelectionCostume2SpriteAssetHash");

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "GenericSelectionCostume3SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "GenericSelectionCostume3SpriteAssetHash");

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "InGameSortieAndAwakeningPilotCostume1SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "InGameSortieAndAwakeningPilotCostume1SpriteAssetHash")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "InGameSortieAndAwakeningPilotCostume2SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "InGameSortieAndAwakeningPilotCostume2SpriteAssetHash");

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "InGameSortieAndAwakeningPilotCostume3SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "InGameSortieAndAwakeningPilotCostume3SpriteAssetHash");

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "LoadingLeftCostume1SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "LoadingLeftCostume1SpriteAssetHash")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "LoadingLeftCostume2SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "LoadingLeftCostume2SpriteAssetHash");

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "LoadingLeftCostume3SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "LoadingLeftCostume3SpriteAssetHash");

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "LoadingRightCostume1SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "LoadingRightCostume1SpriteAssetHash")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "LoadingRightCostume2SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "LoadingRightCostume2SpriteAssetHash");

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "LoadingRightCostume3SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "LoadingRightCostume3SpriteAssetHash");

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "LoadingTargetPilotCostume1SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "LoadingTargetPilotCostume1SpriteAssetHash")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "LoadingTargetPilotCostume2SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "LoadingTargetPilotCostume2SpriteAssetHash");

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "LoadingTargetPilotCostume3SpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "LoadingTargetPilotCostume3SpriteAssetHash");

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "LoadingTargetUnitSmallSpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "LoadingTargetUnitSmallSpriteAssetHash")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "LoadingTargetUnitSpriteAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "LoadingTargetUnitSpriteAssetHash")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "ResultSmallUnitSprite")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "ResultSmallUnitSpriteHash")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", "SpriteFramesAsset")
                                .WithOne()
                                .HasForeignKey("BoostStudio.Domain.Entities.Exvs.Units.Unit.PlayableCharacter#BoostStudio.Domain.Entities.Exvs.Units.Characters.PlayableCharacter", "SpriteFramesAssetHash")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner("Unit")
                                .HasForeignKey("UnitId");

                            b1.Navigation("ArcadeSelectionCostume1SpriteAsset");

                            b1.Navigation("ArcadeSelectionCostume2SpriteAsset");

                            b1.Navigation("ArcadeSelectionCostume3SpriteAsset");

                            b1.Navigation("CatalogStorePilotCostume2SpriteAsset");

                            b1.Navigation("CatalogStorePilotCostume3SpriteAsset");

                            b1.Navigation("FigurineSpriteAsset");

                            b1.Navigation("GenericSelectionCostume1SpriteAsset");

                            b1.Navigation("GenericSelectionCostume2SpriteAsset");

                            b1.Navigation("GenericSelectionCostume3SpriteAsset");

                            b1.Navigation("InGameSortieAndAwakeningPilotCostume1SpriteAsset");

                            b1.Navigation("InGameSortieAndAwakeningPilotCostume2SpriteAsset");

                            b1.Navigation("InGameSortieAndAwakeningPilotCostume3SpriteAsset");

                            b1.Navigation("LoadingLeftCostume1SpriteAsset");

                            b1.Navigation("LoadingLeftCostume2SpriteAsset");

                            b1.Navigation("LoadingLeftCostume3SpriteAsset");

                            b1.Navigation("LoadingRightCostume1SpriteAsset");

                            b1.Navigation("LoadingRightCostume2SpriteAsset");

                            b1.Navigation("LoadingRightCostume3SpriteAsset");

                            b1.Navigation("LoadingTargetPilotCostume1SpriteAsset");

                            b1.Navigation("LoadingTargetPilotCostume2SpriteAsset");

                            b1.Navigation("LoadingTargetPilotCostume3SpriteAsset");

                            b1.Navigation("LoadingTargetUnitSmallSpriteAsset");

                            b1.Navigation("LoadingTargetUnitSpriteAsset");

                            b1.Navigation("ResultSmallUnitSprite");

                            b1.Navigation("SpriteFramesAsset");

                            b1.Navigation("Unit");
                        });

                    b.Navigation("HitboxGroup");

                    b.Navigation("PlayableCharacter");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Units.UnitAmmoSlot", b =>
                {
                    b.HasOne("BoostStudio.Domain.Entities.Exvs.Ammo.Ammo", "Ammo")
                        .WithMany()
                        .HasForeignKey("AmmoHash")
                        .HasPrincipalKey("Hash")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoostStudio.Domain.Entities.Exvs.Stats.UnitStat", "UnitStat")
                        .WithMany("AmmoSlots")
                        .HasForeignKey("UnitStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ammo");

                    b.Navigation("UnitStat");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Assets.AssetFile", b =>
                {
                    b.Navigation("PatchFiles");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Hitboxes.HitboxGroup", b =>
                {
                    b.Navigation("Hitboxes");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Projectiles.UnitProjectile", b =>
                {
                    b.Navigation("Projectiles");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Stats.UnitStat", b =>
                {
                    b.Navigation("Ammo");

                    b.Navigation("AmmoSlots");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Tbl.Tbl", b =>
                {
                    b.Navigation("PatchFiles");
                });

            modelBuilder.Entity("BoostStudio.Domain.Entities.Exvs.Units.Unit", b =>
                {
                    b.Navigation("UnitProjectiles");

                    b.Navigation("UnitStats");
                });
#pragma warning restore 612, 618
        }
    }
}
